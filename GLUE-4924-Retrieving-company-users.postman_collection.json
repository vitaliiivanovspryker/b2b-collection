{
	"info": {
		"_postman_id": "21d3f328-a11e-4c4f-b997-941d970fb7e4",
		"name": "GLUE-4924-Retrieving-company-users",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Company user",
			"item": [
				{
					"name": "{{url}}/access-tokens(helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "40dd0d53-e448-428e-a0fb-6ea052e58f23",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.environment.set(\"token\", responseData.attributes.accessToken);",
									"pm.variables.set(\"refresh-token\", responseData.attributes.refreshToken);",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"access-tokens\");",
									"});",
									"",
									"pm.test(\"Has id null\", function() {",
									"    pm.expect(responseData.id).to.eql(null);",
									"});",
									"",
									"pm.test(\"Has token type Bearer\", function(){",
									"    pm.expect(responseData.attributes.tokenType).to.eql(\"Bearer\");",
									"});",
									"",
									"pm.test(\"Has expiration time\", function() {",
									"    pm.expect(responseData.attributes.expiresIn).to.eql(28800);",
									"});",
									"",
									"pm.test(\"Has access token returned\", function() {",
									"    pm.expect(responseData.attributes.accessToken).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has refresh token returned\", function() {",
									"    pm.expect(responseData.attributes.refreshToken).to.not.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"sonia@spryker.com\", \"password\": \"change123\"}}}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request company users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e801bff2-4cae-40c1-8abe-8fc546f612c3",
								"exec": [
									"let jsonResponse = pm.response.json(),",
									"    response = jsonResponse.data,",
									"    links = jsonResponse.links,",
									"    selfLinkItemOne = pm.variables.get(\"url\") + \"/company-users/88ac19e3-ca9c-539e-b1f1-9c3b7fd48718\",",
									"    selfLinkItemTwo = pm.variables.get(\"url\") + \"/company-users/3882cdba-a8b3-5f0b-95c9-e19b3350fec8\",",
									"    selfLinkItemThree = pm.variables.get(\"url\") + \"/company-users/5ae3c53a-7296-5b77-8c81-1101a581a804\",",
									"    selfLinkItemFour = pm.variables.get(\"url\") + \"/company-users/2ee52add-7ada-5ca5-8cf4-92b81b0bc0ee\",",
									"    selfLinkItemFive = pm.variables.get(\"url\") + \"/company-users/52b76396-465d-5b4a-990a-8d9f0ecfa4f6\",",
									"    selfLinkItemSix = pm.variables.get(\"url\") + \"/company-users/e235af49-117f-59f2-82be-ed1cc26efbe6\",",
									"    selfLinkItemSeven = pm.variables.get(\"url\") + \"/company-users/dbd74561-6a8e-597d-adf3-4b939d4cad03\",",
									"    selfLinkItemEight = pm.variables.get(\"url\") + \"/company-users/8da78283-e629-5667-9f84-e13207a7aef9\",",
									"    selfLinkItemNine = pm.variables.get(\"url\") + \"/company-users/e4bbae58-a371-5db2-8bfc-2c944d2abe85\",",
									"    selfLinkItemTen = pm.variables.get(\"url\") + \"/company-users/1acb9a8b-ef7d-548e-84ff-1486eb9ce562\",",
									"    selfLinkItemEleven = pm.variables.get(\"url\") + \"/company-users/aeab86aa-b380-55e6-90a9-6a5689cbd317\",",
									"    selfLinkItemTwelve = pm.variables.get(\"url\") + \"/company-users/23730c9e-2521-595d-88b8-bf42102a0c05\",",
									"    selfLink = pm.variables.get(\"url\") + \"/company-users\";",
									"    ",
									"",
									"const resourceType = \"company-users\";",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[0].type).to.eql(resourceType);",
									"    pm.expect(response[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[0].id).to.be.a(\"string\");",
									"    pm.expect(response[0].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[0].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item one self link\", function() {",
									"    pm.expect(response[0].links.self).to.eql(selfLinkItemOne);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[1].type).to.eql(resourceType);",
									"    pm.expect(response[1].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[1].id).to.be.a(\"string\");",
									"    pm.expect(response[1].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[1].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item two self link\", function() {",
									"    pm.expect(response[1].links.self).to.eql(selfLinkItemTwo);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[2].type).to.eql(resourceType);",
									"    pm.expect(response[2].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[2].id).to.be.a(\"string\");",
									"    pm.expect(response[2].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[2].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item three self link\", function() {",
									"    pm.expect(response[2].links.self).to.eql(selfLinkItemThree);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[3].type).to.eql(resourceType);",
									"    pm.expect(response[3].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[3].id).to.be.a(\"string\");",
									"    pm.expect(response[3].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[3].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item four self link\", function() {",
									"    pm.expect(response[3].links.self).to.eql(selfLinkItemFour);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[4].type).to.eql(resourceType);",
									"    pm.expect(response[4].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[4].id).to.be.a(\"string\");",
									"    pm.expect(response[4].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[4].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item five self link\", function() {",
									"    pm.expect(response[4].links.self).to.eql(selfLinkItemFive);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[5].type).to.eql(resourceType);",
									"    pm.expect(response[5].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[5].id).to.be.a(\"string\");",
									"    pm.expect(response[5].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[5].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item six self link\", function() {",
									"    pm.expect(response[5].links.self).to.eql(selfLinkItemSix);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[6].type).to.eql(resourceType);",
									"    pm.expect(response[6].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[6].id).to.be.a(\"string\");",
									"    pm.expect(response[6].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[6].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item seven self link\", function() {",
									"    pm.expect(response[6].links.self).to.eql(selfLinkItemSeven);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[7].type).to.eql(resourceType);",
									"    pm.expect(response[7].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[7].id).to.be.a(\"string\");",
									"    pm.expect(response[7].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[7].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item eight self link\", function() {",
									"    pm.expect(response[7].links.self).to.eql(selfLinkItemEight);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[8].type).to.eql(resourceType);",
									"    pm.expect(response[8].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[8].id).to.be.a(\"string\");",
									"    pm.expect(response[8].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[8].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item nine self link\", function() {",
									"    pm.expect(response[8].links.self).to.eql(selfLinkItemNine);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[9].type).to.eql(resourceType);",
									"    pm.expect(response[9].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[9].id).to.be.a(\"string\");",
									"    pm.expect(response[9].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[9].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item ten self link\", function() {",
									"    pm.expect(response[9].links.self).to.eql(selfLinkItemTen);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[10].type).to.eql(resourceType);",
									"    pm.expect(response[10].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[10].id).to.be.a(\"string\");",
									"    pm.expect(response[10].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[10].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item eleven self link\", function() {",
									"    pm.expect(response[10].links.self).to.eql(selfLinkItemEleven);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[11].type).to.eql(resourceType);",
									"    pm.expect(response[11].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[11].id).to.be.a(\"string\");",
									"    pm.expect(response[11].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[11].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item twelve self link\", function() {",
									"    pm.expect(response[11].links.self).to.eql(selfLinkItemTwelve);",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(links.self).to.eql(selfLink);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/company-users",
							"host": [
								"{{url}}"
							],
							"path": [
								"company-users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request compani users Mine",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a524ce82-5ac6-4d4b-815e-a47846528be1",
								"exec": [
									"let jsonResponse = pm.response.json(),",
									"    response = jsonResponse.data,",
									"    links = jsonResponse.links,",
									"    selfLinkOne = pm.variables.get(\"url\") + \"/company-users/e4bbae58-a371-5db2-8bfc-2c944d2abe85\",",
									"    selfLinkTwo = pm.variables.get(\"url\") + \"/company-users/mine\";",
									"    ",
									"",
									"const resourceType = \"company-users\";",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[0].type).to.eql(resourceType);",
									"    pm.expect(response[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[0].id).to.be.a(\"string\");",
									"    pm.expect(response[0].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[0].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item one self link\", function() {",
									"    pm.expect(response[0].links.self).to.eql(selfLinkOne);",
									"});",
									"",
									"pm.test(\"Has item two self link\", function() {",
									"    pm.expect(links.self).to.eql(selfLinkTwo);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/company-users/mine",
							"host": [
								"{{url}}"
							],
							"path": [
								"company-users",
								"mine"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request company users include customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6e38dbae-266c-4dab-8ca1-fc3f703fdaef",
								"exec": [
									"let jsonResponse = pm.response.json(),",
									"    response = jsonResponse.data,",
									"    links = jsonResponse.links,",
									"    included = jsonResponse.included,",
									"    selfLinkItemOne = pm.variables.get(\"url\") + \"/company-users/88ac19e3-ca9c-539e-b1f1-9c3b7fd48718?include=customers\",",
									"    selfLinkItemTwo = pm.variables.get(\"url\") + \"/company-users/3882cdba-a8b3-5f0b-95c9-e19b3350fec8?include=customers\",",
									"    selfLinkItemThree = pm.variables.get(\"url\") + \"/company-users/5ae3c53a-7296-5b77-8c81-1101a581a804?include=customers\",",
									"    selfLinkItemFour = pm.variables.get(\"url\") + \"/company-users/2ee52add-7ada-5ca5-8cf4-92b81b0bc0ee?include=customers\",",
									"    selfLinkItemFive = pm.variables.get(\"url\") + \"/company-users/52b76396-465d-5b4a-990a-8d9f0ecfa4f6?include=customers\",",
									"    selfLinkItemSix = pm.variables.get(\"url\") + \"/company-users/e235af49-117f-59f2-82be-ed1cc26efbe6?include=customers\",",
									"    selfLinkItemSeven = pm.variables.get(\"url\") + \"/company-users/dbd74561-6a8e-597d-adf3-4b939d4cad03?include=customers\",",
									"    selfLinkItemEight = pm.variables.get(\"url\") + \"/company-users/8da78283-e629-5667-9f84-e13207a7aef9?include=customers\",",
									"    selfLinkItemNine = pm.variables.get(\"url\") + \"/company-users/e4bbae58-a371-5db2-8bfc-2c944d2abe85?include=customers\",",
									"    selfLinkItemTen = pm.variables.get(\"url\") + \"/company-users/1acb9a8b-ef7d-548e-84ff-1486eb9ce562?include=customers\",",
									"    selfLinkItemEleven = pm.variables.get(\"url\") + \"/company-users/aeab86aa-b380-55e6-90a9-6a5689cbd317?include=customers\",",
									"    selfLinkItemTwelve = pm.variables.get(\"url\") + \"/company-users/23730c9e-2521-595d-88b8-bf42102a0c05?include=customers\",",
									"    selfLink = pm.variables.get(\"url\") + \"/company-users?include=customers\";",
									"    ",
									"",
									"const resourceType = \"company-users\";",
									"const resourceTypeRelationships = \"customers\";",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[0].type).to.eql(resourceType);",
									"    pm.expect(response[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[0].id).to.be.a(\"string\");",
									"    pm.expect(response[0].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[0].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item one self link\", function() {",
									"    pm.expect(response[0].links.self).to.eql(selfLinkItemOne);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[0].relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[0].relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[0].relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[0].relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[1].type).to.eql(resourceType);",
									"    pm.expect(response[1].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[1].id).to.be.a(\"string\");",
									"    pm.expect(response[1].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[1].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item two self link\", function() {",
									"    pm.expect(response[1].links.self).to.eql(selfLinkItemTwo);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[1].relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[1].relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[1].relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[1].relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[2].type).to.eql(resourceType);",
									"    pm.expect(response[2].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[2].id).to.be.a(\"string\");",
									"    pm.expect(response[2].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[2].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item three self link\", function() {",
									"    pm.expect(response[2].links.self).to.eql(selfLinkItemThree);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[2].relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[2].relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[2].relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[2].relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[3].type).to.eql(resourceType);",
									"    pm.expect(response[3].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[3].id).to.be.a(\"string\");",
									"    pm.expect(response[3].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[3].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item four self link\", function() {",
									"    pm.expect(response[3].links.self).to.eql(selfLinkItemFour);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[3].relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[3].relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[3].relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[3].relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[4].type).to.eql(resourceType);",
									"    pm.expect(response[4].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[4].id).to.be.a(\"string\");",
									"    pm.expect(response[4].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[4].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item five self link\", function() {",
									"    pm.expect(response[4].links.self).to.eql(selfLinkItemFive);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[4].relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[4].relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[4].relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[4].relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[5].type).to.eql(resourceType);",
									"    pm.expect(response[5].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[5].id).to.be.a(\"string\");",
									"    pm.expect(response[5].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[5].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item six self link\", function() {",
									"    pm.expect(response[5].links.self).to.eql(selfLinkItemSix);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[5].relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[5].relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[5].relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[5].relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[6].type).to.eql(resourceType);",
									"    pm.expect(response[6].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[6].id).to.be.a(\"string\");",
									"    pm.expect(response[6].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[6].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item seven self link\", function() {",
									"    pm.expect(response[6].links.self).to.eql(selfLinkItemSeven);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[6].relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[6].relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[6].relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[6].relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[7].type).to.eql(resourceType);",
									"    pm.expect(response[7].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[7].id).to.be.a(\"string\");",
									"    pm.expect(response[7].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[7].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item eight self link\", function() {",
									"    pm.expect(response[7].links.self).to.eql(selfLinkItemEight);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[7].relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[7].relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[7].relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[7].relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[8].type).to.eql(resourceType);",
									"    pm.expect(response[8].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[8].id).to.be.a(\"string\");",
									"    pm.expect(response[8].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[8].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item nine self link\", function() {",
									"    pm.expect(response[8].links.self).to.eql(selfLinkItemNine);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[8].relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[8].relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[8].relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[8].relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[9].type).to.eql(resourceType);",
									"    pm.expect(response[9].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[9].id).to.be.a(\"string\");",
									"    pm.expect(response[9].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[9].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item ten self link\", function() {",
									"    pm.expect(response[9].links.self).to.eql(selfLinkItemTen);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[9].relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[9].relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[9].relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[9].relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[10].type).to.eql(resourceType);",
									"    pm.expect(response[10].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[10].id).to.be.a(\"string\");",
									"    pm.expect(response[10].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[10].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item eleven self link\", function() {",
									"    pm.expect(response[10].links.self).to.eql(selfLinkItemEleven);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[10].relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[10].relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[10].relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[10].relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[11].type).to.eql(resourceType);",
									"    pm.expect(response[11].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[11].id).to.be.a(\"string\");",
									"    pm.expect(response[11].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[11].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item twelve self link\", function() {",
									"    pm.expect(response[11].links.self).to.eql(selfLinkItemTwelve);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[11].relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[11].relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[11].relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[11].relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(links.self).to.eql(selfLink);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(included[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(included[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(included[0].id).to.be.a(\"string\");",
									"    pm.expect(included[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has attributes returned\", function() {",
									"    pm.expect(included[0].attributes.firstName).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.lastName).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.email).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.gender).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.dateOfBirth).to.eql(null);",
									"    pm.expect(included[0].attributes.salutation).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.createdAt).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.updatedAt).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/company-users?include=customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"company-users"
							],
							"query": [
								{
									"key": "include",
									"value": "customers"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Request company users include customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0abd24a-792b-4778-9a15-ca365882b3e7",
								"exec": [
									"let jsonResponse = pm.response.json(),",
									"    response = jsonResponse.data,",
									"    links = jsonResponse.links,",
									"    included = jsonResponse.included,",
									"    selfLinkItemOne = pm.variables.get(\"url\") + \"/company-users/88ac19e3-ca9c-539e-b1f1-9c3b7fd48718?include=company-business-units\",",
									"    selfLinkItemTwo = pm.variables.get(\"url\") + \"/company-users/3882cdba-a8b3-5f0b-95c9-e19b3350fec8?include=company-business-units\",",
									"    selfLinkItemThree = pm.variables.get(\"url\") + \"/company-users/5ae3c53a-7296-5b77-8c81-1101a581a804?include=company-business-units\",",
									"    selfLinkItemFour = pm.variables.get(\"url\") + \"/company-users/2ee52add-7ada-5ca5-8cf4-92b81b0bc0ee?include=company-business-units\",",
									"    selfLinkItemFive = pm.variables.get(\"url\") + \"/company-users/52b76396-465d-5b4a-990a-8d9f0ecfa4f6?include=company-business-units\",",
									"    selfLinkItemSix = pm.variables.get(\"url\") + \"/company-users/e235af49-117f-59f2-82be-ed1cc26efbe6?include=company-business-units\",",
									"    selfLinkItemSeven = pm.variables.get(\"url\") + \"/company-users/dbd74561-6a8e-597d-adf3-4b939d4cad03?include=company-business-units\",",
									"    selfLinkItemEight = pm.variables.get(\"url\") + \"/company-users/8da78283-e629-5667-9f84-e13207a7aef9?include=company-business-units\",",
									"    selfLinkItemNine = pm.variables.get(\"url\") + \"/company-users/e4bbae58-a371-5db2-8bfc-2c944d2abe85?include=company-business-units\",",
									"    selfLinkItemTen = pm.variables.get(\"url\") + \"/company-users/1acb9a8b-ef7d-548e-84ff-1486eb9ce562?include=company-business-units\",",
									"    selfLinkItemEleven = pm.variables.get(\"url\") + \"/company-users/aeab86aa-b380-55e6-90a9-6a5689cbd317?include=company-business-units\",",
									"    selfLinkItemTwelve = pm.variables.get(\"url\") + \"/company-users/23730c9e-2521-595d-88b8-bf42102a0c05?include=company-business-units\",",
									"    selfLink = pm.variables.get(\"url\") + \"/company-users?include=company-business-units\";",
									"    ",
									"",
									"const resourceType = \"company-users\";",
									"const resourceTypeRelationships = \"company-business-units\";",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[0].type).to.eql(resourceType);",
									"    pm.expect(response[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[0].id).to.be.a(\"string\");",
									"    pm.expect(response[0].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[0].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item one self link\", function() {",
									"    pm.expect(response[0].links.self).to.eql(selfLinkItemOne);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[0].relationships.company-business-units.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[0].relationships.company-business-units.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[0].relationships.company-business-units.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[0].relationships.company-business-units.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[1].type).to.eql(resourceType);",
									"    pm.expect(response[1].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[1].id).to.be.a(\"string\");",
									"    pm.expect(response[1].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[1].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item two self link\", function() {",
									"    pm.expect(response[1].links.self).to.eql(selfLinkItemTwo);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[1].relationships.company-business-units.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[1].relationships.company-business-units.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[1].relationships.company-business-units.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[1].relationships.company-business-units.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[2].type).to.eql(resourceType);",
									"    pm.expect(response[2].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[2].id).to.be.a(\"string\");",
									"    pm.expect(response[2].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[2].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item three self link\", function() {",
									"    pm.expect(response[2].links.self).to.eql(selfLinkItemThree);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[2].relationships.company-business-units.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[2].relationships.company-business-units.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[2].relationships.company-business-units.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[2].relationships.company-business-units.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[3].type).to.eql(resourceType);",
									"    pm.expect(response[3].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[3].id).to.be.a(\"string\");",
									"    pm.expect(response[3].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[3].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item four self link\", function() {",
									"    pm.expect(response[3].links.self).to.eql(selfLinkItemFour);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[3].relationships.company-business-units.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[3].relationships.company-business-units.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[3].relationships.company-business-units.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[3].relationships.company-business-units.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[4].type).to.eql(resourceType);",
									"    pm.expect(response[4].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[4].id).to.be.a(\"string\");",
									"    pm.expect(response[4].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[4].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item five self link\", function() {",
									"    pm.expect(response[4].links.self).to.eql(selfLinkItemFive);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[4].relationships.company-business-units.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[4].relationships.company-business-units.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[4].relationships.company-business-units.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[4].relationships.company-business-units.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[5].type).to.eql(resourceType);",
									"    pm.expect(response[5].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[5].id).to.be.a(\"string\");",
									"    pm.expect(response[5].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[5].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item six self link\", function() {",
									"    pm.expect(response[5].links.self).to.eql(selfLinkItemSix);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[5].relationships.company-business-units.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[5].relationships.company-business-units.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[5].relationships.company-business-units.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[5].relationships.company-business-units.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[6].type).to.eql(resourceType);",
									"    pm.expect(response[6].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[6].id).to.be.a(\"string\");",
									"    pm.expect(response[6].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[6].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item seven self link\", function() {",
									"    pm.expect(response[6].links.self).to.eql(selfLinkItemSeven);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[6].relationships.company-business-units.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[6].relationships.company-business-units.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[6].relationships.company-business-units.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[6].relationships.company-business-units.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[7].type).to.eql(resourceType);",
									"    pm.expect(response[7].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[7].id).to.be.a(\"string\");",
									"    pm.expect(response[7].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[7].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item eight self link\", function() {",
									"    pm.expect(response[7].links.self).to.eql(selfLinkItemEight);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[7].relationships.company-business-units.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[7].relationships.company-business-units.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[7].relationships.company-business-units.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[7].relationships.company-business-units.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[8].type).to.eql(resourceType);",
									"    pm.expect(response[8].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[8].id).to.be.a(\"string\");",
									"    pm.expect(response[8].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[8].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item nine self link\", function() {",
									"    pm.expect(response[8].links.self).to.eql(selfLinkItemNine);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[8].relationships.company-business-units.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[8].relationships.company-business-units.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[8].relationships.company-business-units.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[8].relationships.company-business-units.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[9].type).to.eql(resourceType);",
									"    pm.expect(response[9].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[9].id).to.be.a(\"string\");",
									"    pm.expect(response[9].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[9].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item ten self link\", function() {",
									"    pm.expect(response[9].links.self).to.eql(selfLinkItemTen);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[9].relationships.company-business-units.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[9].relationships.company-business-units.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[9].relationships.company-business-units.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[9].relationships.company-business-units.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[10].type).to.eql(resourceType);",
									"    pm.expect(response[10].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[10].id).to.be.a(\"string\");",
									"    pm.expect(response[10].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[10].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item eleven self link\", function() {",
									"    pm.expect(response[10].links.self).to.eql(selfLinkItemEleven);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[10].relationships.company-business-units.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[10].relationships.company-business-units.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[10].relationships.company-business-units.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[10].relationships.company-business-units.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[11].type).to.eql(resourceType);",
									"    pm.expect(response[11].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[11].id).to.be.a(\"string\");",
									"    pm.expect(response[11].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[11].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item twelve self link\", function() {",
									"    pm.expect(response[11].links.self).to.eql(selfLinkItemTwelve);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[11].relationships.company-business-units.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[11].relationships.company-business-units.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[11].relationships.company-business-units.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[11].relationships.company-business-units.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(included[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(included[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(included[0].id).to.be.a(\"string\");",
									"    pm.expect(included[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has attributes returned\", function() {",
									"    pm.expect(included[0].attributes.name).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.email).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.phone).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.externalUrl).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.bic).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.iban).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.defaultBillingAddress).to.eql(null);",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(links.self).to.eql(selfLink);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/company-users?include=company-business-units",
							"host": [
								"{{url}}"
							],
							"path": [
								"company-users"
							],
							"query": [
								{
									"key": "include",
									"value": "company-business-units"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Request users include company-roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e2d48a7c-8cf7-469b-9bfd-b198775832a6",
								"exec": [
									"let jsonResponse = pm.response.json(),",
									"    response = jsonResponse.data,",
									"    links = jsonResponse.links,",
									"    included = jsonResponse.included,",
									"    selfLinkItemOne = pm.variables.get(\"url\") + \"/company-users/88ac19e3-ca9c-539e-b1f1-9c3b7fd48718?include=company-roles\",",
									"    selfLinkItemTwo = pm.variables.get(\"url\") + \"/company-users/3882cdba-a8b3-5f0b-95c9-e19b3350fec8?include=company-roles\",",
									"    selfLinkItemThree = pm.variables.get(\"url\") + \"/company-users/5ae3c53a-7296-5b77-8c81-1101a581a804?include=company-roles\",",
									"    selfLinkItemFour = pm.variables.get(\"url\") + \"/company-users/2ee52add-7ada-5ca5-8cf4-92b81b0bc0ee?include=company-roles\",",
									"    selfLinkItemFive = pm.variables.get(\"url\") + \"/company-users/52b76396-465d-5b4a-990a-8d9f0ecfa4f6?include=company-roles\",",
									"    selfLinkItemSix = pm.variables.get(\"url\") + \"/company-users/e235af49-117f-59f2-82be-ed1cc26efbe6?include=company-roles\",",
									"    selfLinkItemSeven = pm.variables.get(\"url\") + \"/company-users/dbd74561-6a8e-597d-adf3-4b939d4cad03?include=company-roles\",",
									"    selfLinkItemEight = pm.variables.get(\"url\") + \"/company-users/8da78283-e629-5667-9f84-e13207a7aef9?include=company-roles\",",
									"    selfLinkItemNine = pm.variables.get(\"url\") + \"/company-users/e4bbae58-a371-5db2-8bfc-2c944d2abe85?include=company-roles\",",
									"    selfLinkItemTen = pm.variables.get(\"url\") + \"/company-users/1acb9a8b-ef7d-548e-84ff-1486eb9ce562?include=company-roles\",",
									"    selfLinkItemEleven = pm.variables.get(\"url\") + \"/company-users/aeab86aa-b380-55e6-90a9-6a5689cbd317?include=company-roles\",",
									"    selfLinkItemTwelve = pm.variables.get(\"url\") + \"/company-users/23730c9e-2521-595d-88b8-bf42102a0c05?include=company-roles\",",
									"    selfLink = pm.variables.get(\"url\") + \"/company-users?include=company-roles\";",
									"    ",
									"",
									"const resourceType = \"company-users\";",
									"const resourceTypeRelationships = \"company-roles\";",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[0].type).to.eql(resourceType);",
									"    pm.expect(response[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[0].id).to.be.a(\"string\");",
									"    pm.expect(response[0].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[0].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item one self link\", function() {",
									"    pm.expect(response[0].links.self).to.eql(selfLinkItemOne);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[0].relationships.company-roles.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[0].relationships.company-roles.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[0].relationships.company-roles.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[0].relationships.company-roles.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[1].type).to.eql(resourceType);",
									"    pm.expect(response[1].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[1].id).to.be.a(\"string\");",
									"    pm.expect(response[1].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[1].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item two self link\", function() {",
									"    pm.expect(response[1].links.self).to.eql(selfLinkItemTwo);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[1].relationships.company-roles.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[1].relationships.company-roles.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[1].relationships.company-roles.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[1].relationships.company-roles.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[2].type).to.eql(resourceType);",
									"    pm.expect(response[2].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[2].id).to.be.a(\"string\");",
									"    pm.expect(response[2].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[2].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item three self link\", function() {",
									"    pm.expect(response[2].links.self).to.eql(selfLinkItemThree);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[2].relationships.company-roles.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[2].relationships.company-roles.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[2].relationships.company-roles.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[2].relationships.company-roles.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[3].type).to.eql(resourceType);",
									"    pm.expect(response[3].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[3].id).to.be.a(\"string\");",
									"    pm.expect(response[3].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[3].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item four self link\", function() {",
									"    pm.expect(response[3].links.self).to.eql(selfLinkItemFour);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[3].relationships.company-roles.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[3].relationships.company-roles.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[3].relationships.company-roles.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[3].relationships.company-roles.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[4].type).to.eql(resourceType);",
									"    pm.expect(response[4].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[4].id).to.be.a(\"string\");",
									"    pm.expect(response[4].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[4].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item five self link\", function() {",
									"    pm.expect(response[4].links.self).to.eql(selfLinkItemFive);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[4].relationships.company-roles.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[4].relationships.company-roles.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[4].relationships.company-roles.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[4].relationships.company-roles.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[5].type).to.eql(resourceType);",
									"    pm.expect(response[5].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[5].id).to.be.a(\"string\");",
									"    pm.expect(response[5].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[5].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item six self link\", function() {",
									"    pm.expect(response[5].links.self).to.eql(selfLinkItemSix);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[5].relationships.company-roles.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[5].relationships.company-roles.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[5].relationships.company-roles.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[5].relationships.company-roles.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[6].type).to.eql(resourceType);",
									"    pm.expect(response[6].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[6].id).to.be.a(\"string\");",
									"    pm.expect(response[6].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[6].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item seven self link\", function() {",
									"    pm.expect(response[6].links.self).to.eql(selfLinkItemSeven);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[6].relationships.company-roles.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[6].relationships.company-roles.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[6].relationships.company-roles.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[6].relationships.company-roles.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[7].type).to.eql(resourceType);",
									"    pm.expect(response[7].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[7].id).to.be.a(\"string\");",
									"    pm.expect(response[7].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[7].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item eight self link\", function() {",
									"    pm.expect(response[7].links.self).to.eql(selfLinkItemEight);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[7].relationships.company-roles.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[7].relationships.company-roles.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[7].relationships.company-roles.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[7].relationships.company-roles.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[8].type).to.eql(resourceType);",
									"    pm.expect(response[8].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[8].id).to.be.a(\"string\");",
									"    pm.expect(response[8].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[8].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item nine self link\", function() {",
									"    pm.expect(response[8].links.self).to.eql(selfLinkItemNine);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[8].relationships.roles.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[8].relationships.roles.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[8].relationships.roles.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[8].relationships.roles.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[9].type).to.eql(resourceType);",
									"    pm.expect(response[9].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[9].id).to.be.a(\"string\");",
									"    pm.expect(response[9].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[9].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item ten self link\", function() {",
									"    pm.expect(response[9].links.self).to.eql(selfLinkItemTen);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[9].relationships.company-roles.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[9].relationships.roles.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[9].relationships.company-roles.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[9].relationships.company-roles.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[10].type).to.eql(resourceType);",
									"    pm.expect(response[10].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[10].id).to.be.a(\"string\");",
									"    pm.expect(response[10].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[10].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item eleven self link\", function() {",
									"    pm.expect(response[10].links.self).to.eql(selfLinkItemEleven);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[10].relationships.company-roles.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[10].relationships.company-roles.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[10].relationships.company-roles.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[10].relationships.company-roles.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[11].type).to.eql(resourceType);",
									"    pm.expect(response[11].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[11].id).to.be.a(\"string\");",
									"    pm.expect(response[11].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[11].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item twelve self link\", function() {",
									"    pm.expect(response[11].links.self).to.eql(selfLinkItemTwelve);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[11].relationships.company-roles.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[11].relationships.company-roles.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[11].relationships.company-roles.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[11].relationships.company-roles.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(included[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(included[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(included[0].id).to.be.a(\"string\");",
									"    pm.expect(included[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has id attributes\", function() {",
									"    pm.expect(included[0].attributes.name).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(links.self).to.eql(selfLink);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/company-users?include=company-roles",
							"host": [
								"{{url}}"
							],
							"path": [
								"company-users"
							],
							"query": [
								{
									"key": "include",
									"value": "company-roles"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Request users included BU filtered by BU",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9b7d99ee-5b90-45cd-93fd-37aaa3788301",
								"exec": [
									"let jsonResponse = pm.response.json(),",
									"    response = jsonResponse.data,",
									"    links = jsonResponse.links,",
									"    included = jsonResponse.included,",
									"    selfLinkItemOne = pm.variables.get(\"url\") + \"/company-users/5ae3c53a-7296-5b77-8c81-1101a581a804?include=company-business-units&filter[company-business-units.id]=d8943c86-4481-5c2a-b5f6-28c8dbdf1a23\",",
									"    selfLink = pm.variables.get(\"url\") + \"/company-users?include=company-business-units&filter[company-business-units.id]=d8943c86-4481-5c2a-b5f6-28c8dbdf1a23\";",
									"    ",
									"",
									"const resourceType = \"company-users\";",
									"const resourceTypeRelationships = \"company-business-units\";",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[0].type).to.eql(resourceType);",
									"    pm.expect(response[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[0].id).to.be.a(\"string\");",
									"    pm.expect(response[0].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[0].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item one self link\", function() {",
									"    pm.expect(response[0].links.self).to.eql(selfLinkItemOne);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[0].relationships.company-business-units.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[0].relationships.company-business-units.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[0].relationships.company-business-units.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[0].relationships.company-business-units.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(links.self).to.eql(selfLink);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(included[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(included[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(included[0].id).to.be.a(\"string\");",
									"    pm.expect(included[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has attributes returned\", function() {",
									"    pm.expect(included[0].attributes.name).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.email).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.phone).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.externalUrl).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.bic).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.iban).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.defaultBillingAddress).to.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/company-users?include=company-business-units&filter[company-business-units.id]={{company-business-unit-uuid}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"company-users"
							],
							"query": [
								{
									"key": "include",
									"value": "company-business-units"
								},
								{
									"key": "filter[company-business-units.id]",
									"value": "{{company-business-unit-uuid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Request users included customers filtered by BU",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "75518da1-0b29-498a-8133-9c0c9b425227",
								"exec": [
									"let jsonResponse = pm.response.json(),",
									"    response = jsonResponse.data,",
									"    links = jsonResponse.links,",
									"    included = jsonResponse.included,",
									"    selfLinkItemOne = pm.variables.get(\"url\") + \"/company-users/5ae3c53a-7296-5b77-8c81-1101a581a804?include=customers&filter[company-business-units.id]=d8943c86-4481-5c2a-b5f6-28c8dbdf1a23\",",
									"    selfLink = pm.variables.get(\"url\") + \"/company-users?include=customers\";",
									"    ",
									"",
									"const resourceType = \"company-users\";",
									"const resourceTypeRelationships = \"customers\";",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[0].type).to.eql(resourceType);",
									"    pm.expect(response[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[0].id).to.be.a(\"string\");",
									"    pm.expect(response[0].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[0].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item one self link\", function() {",
									"    pm.expect(response[0].links.self).to.eql(selfLinkItemOne);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[0].relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[0].relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[0].relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[0].relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(included[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(included[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(included[0].id).to.be.a(\"string\");",
									"    pm.expect(included[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has attributes returned\", function() {",
									"    pm.expect(included[0].attributes.firstName).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.lastName).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.email).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.gender).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.dateOfBirth).to.eql(null);",
									"    pm.expect(included[0].attributes.salutation).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.createdAt).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.updatedAt).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/company-users?include=customers&filter[company-business-units.id]={{company-business-unit-uuid}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"company-users"
							],
							"query": [
								{
									"key": "include",
									"value": "customers"
								},
								{
									"key": "filter[company-business-units.id]",
									"value": "{{company-business-unit-uuid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Request users included roles filter by BU",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1002147a-fbc5-4ace-9ad7-f59f94955207",
								"exec": [
									"let jsonResponse = pm.response.json(),",
									"    response = jsonResponse.data,",
									"    links = jsonResponse.links,",
									"    included = jsonResponse.included,",
									"    selfLinkItemOne = pm.variables.get(\"url\") + \"/company-users/\" + \"5ae3c53a-7296-5b77-8c81-1101a581a804?include=company-roles&filter[company-business-units.id]=d8943c86-4481-5c2a-b5f6-28c8dbdf1a23\",",
									"    selfLink = pm.variables.get(\"url\") + \"/company-users?include=company-roles\";",
									"    ",
									"",
									"const resourceType = \"company-users\";",
									"const resourceTypeRelationships = \"company-roles\";",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[0].type).to.eql(resourceType);",
									"    pm.expect(response[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[0].id).to.be.a(\"string\");",
									"    pm.expect(response[0].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[0].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item one self link\", function() {",
									"    pm.expect(response[0].links.self).to.eql(selfLinkItemOne);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[0].relationships.company-roles.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[0].relationships.company-roles.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[0].relationships.company-roles.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[0].relationships.company-roles.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(included[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(included[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(included[0].id).to.be.a(\"string\");",
									"    pm.expect(included[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has id attributes\", function() {",
									"    pm.expect(included[0].attributes.name).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.isDefault).to.be.a(\"boolean\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/company-users?include=company-roles&filter[company-business-units.id]={{company-business-unit-uuid}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"company-users"
							],
							"query": [
								{
									"key": "include",
									"value": "company-roles"
								},
								{
									"key": "filter[company-business-units.id]",
									"value": "{{company-business-unit-uuid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Request users include customers filter by roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1109b760-968d-4b46-8e20-341eb7b30fdb",
								"exec": [
									"let jsonResponse = pm.response.json(),",
									"    response = jsonResponse.data,",
									"    links = jsonResponse.links,",
									"    included = jsonResponse.included,",
									"    selfLinkItemOne = pm.variables.get(\"url\") + \"/company-users/5ae3c53a-7296-5b77-8c81-1101a581a804?include=customers&filter[company-roles.id]=50c647a4-d27f-5d82-a587-1d0b7cc6b58d\",",
									"    selfLinkItemTwo = pm.variables.get(\"url\") + \"/company-users/2ee52add-7ada-5ca5-8cf4-92b81b0bc0ee?include=customers&filter[company-roles.id]=50c647a4-d27f-5d82-a587-1d0b7cc6b58d\",",
									"    selfLinkItemThree = pm.variables.get(\"url\") + \"/company-users/52b76396-465d-5b4a-990a-8d9f0ecfa4f6?include=customers&filter[company-roles.id]=50c647a4-d27f-5d82-a587-1d0b7cc6b58d\",",
									"    selfLinkItemFour = pm.variables.get(\"url\") + \"/company-users/e235af49-117f-59f2-82be-ed1cc26efbe6?include=customers&filter[company-roles.id]=50c647a4-d27f-5d82-a587-1d0b7cc6b58d\",",
									"    selfLinkItemFive = pm.variables.get(\"url\") + \"/company-users/dbd74561-6a8e-597d-adf3-4b939d4cad03?include=customers&filter[company-roles.id]=50c647a4-d27f-5d82-a587-1d0b7cc6b58d\",",
									"    selfLinkItemSix = pm.variables.get(\"url\") + \"/company-users/8da78283-e629-5667-9f84-e13207a7aef9?include=customers&filter[company-roles.id]=50c647a4-d27f-5d82-a587-1d0b7cc6b58d\",",
									"    selfLinkItemSeven = pm.variables.get(\"url\") + \"/company-users/e4bbae58-a371-5db2-8bfc-2c944d2abe85?include=customers&filter[company-roles.id]=50c647a4-d27f-5d82-a587-1d0b7cc6b58d\",",
									"    selfLink = pm.variables.get(\"url\") + \"/company-users?include=customers&filter[company-roles.id]=50c647a4-d27f-5d82-a587-1d0b7cc6b58d\";",
									"    ",
									"",
									"const resourceType = \"company-users\";",
									"const resourceTypeRelationships = \"customers\";",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[0].type).to.eql(resourceType);",
									"    pm.expect(response[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[0].id).to.be.a(\"string\");",
									"    pm.expect(response[0].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[0].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item one self link\", function() {",
									"    pm.expect(response[0].links.self).to.eql(selfLinkItemOne);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[0].relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[0].relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[0].relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[0].relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[1].type).to.eql(resourceType);",
									"    pm.expect(response[1].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[1].id).to.be.a(\"string\");",
									"    pm.expect(response[1].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[1].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item two self link\", function() {",
									"    pm.expect(response[1].links.self).to.eql(selfLinkItemTwo);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[1].relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[1].relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[1].relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[1].relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[2].type).to.eql(resourceType);",
									"    pm.expect(response[2].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[2].id).to.be.a(\"string\");",
									"    pm.expect(response[2].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[2].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item three self link\", function() {",
									"    pm.expect(response[2].links.self).to.eql(selfLinkItemThree);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[2].relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[2].relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[2].relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[2].relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[3].type).to.eql(resourceType);",
									"    pm.expect(response[3].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[3].id).to.be.a(\"string\");",
									"    pm.expect(response[3].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[3].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item four self link\", function() {",
									"    pm.expect(response[3].links.self).to.eql(selfLinkItemFour);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[3].relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[3].relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[3].relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[3].relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[4].type).to.eql(resourceType);",
									"    pm.expect(response[4].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[4].id).to.be.a(\"string\");",
									"    pm.expect(response[4].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[4].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item five self link\", function() {",
									"    pm.expect(response[4].links.self).to.eql(selfLinkItemFive);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[4].relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[4].relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[4].relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[4].relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[5].type).to.eql(resourceType);",
									"    pm.expect(response[5].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[5].id).to.be.a(\"string\");",
									"    pm.expect(response[5].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[5].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item six self link\", function() {",
									"    pm.expect(response[5].links.self).to.eql(selfLinkItemSix);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[5].relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[5].relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[5].relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[5].relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[6].type).to.eql(resourceType);",
									"    pm.expect(response[6].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[6].id).to.be.a(\"string\");",
									"    pm.expect(response[6].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[6].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item seven self link\", function() {",
									"    pm.expect(response[6].links.self).to.eql(selfLinkItemSeven);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[6].relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[6].relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[6].relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[6].relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(links.self).to.eql(selfLink);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(included[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(included[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(included[0].id).to.be.a(\"string\");",
									"    pm.expect(included[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has attributes returned\", function() {",
									"    pm.expect(included[0].attributes.firstName).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.lastName).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.email).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.gender).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.dateOfBirth).to.eql(null);",
									"    pm.expect(included[0].attributes.salutation).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.createdAt).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.updatedAt).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/company-users?include=customers&filter[company-roles.id]={{company-role-uuid}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"company-users"
							],
							"query": [
								{
									"key": "include",
									"value": "customers"
								},
								{
									"key": "filter[company-roles.id]",
									"value": "{{company-role-uuid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Request users include BU filter by roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "773fb121-f402-4ebe-bda7-a261d45895d9",
								"exec": [
									"let jsonResponse = pm.response.json(),",
									"    response = jsonResponse.data,",
									"    links = jsonResponse.links,",
									"    included = jsonResponse.included,",
									"    selfLinkItemOne = pm.variables.get(\"url\") + \"/company-users/5ae3c53a-7296-5b77-8c81-1101a581a804?include=company-business-units&filter[company-roles.id]=50c647a4-d27f-5d82-a587-1d0b7cc6b58d\",",
									"    selfLinkItemTwo = pm.variables.get(\"url\") + \"/company-users/2ee52add-7ada-5ca5-8cf4-92b81b0bc0ee?include=company-business-units&filter[company-roles.id]=50c647a4-d27f-5d82-a587-1d0b7cc6b58d\",",
									"    selfLinkItemThree = pm.variables.get(\"url\") + \"/company-users/52b76396-465d-5b4a-990a-8d9f0ecfa4f6?include=company-business-units&filter[company-roles.id]=50c647a4-d27f-5d82-a587-1d0b7cc6b58d\",",
									"    selfLinkItemFour = pm.variables.get(\"url\") + \"/company-users/e235af49-117f-59f2-82be-ed1cc26efbe6?include=company-business-units&filter[company-roles.id]=50c647a4-d27f-5d82-a587-1d0b7cc6b58d\",",
									"    selfLinkItemFive = pm.variables.get(\"url\") + \"/company-users/dbd74561-6a8e-597d-adf3-4b939d4cad03?include=company-business-units&filter[company-roles.id]=50c647a4-d27f-5d82-a587-1d0b7cc6b58d\",",
									"    selfLinkItemSix = pm.variables.get(\"url\") + \"/company-users/8da78283-e629-5667-9f84-e13207a7aef9?include=company-business-units&filter[company-roles.id]=50c647a4-d27f-5d82-a587-1d0b7cc6b58d\",",
									"    selfLinkItemSeven = pm.variables.get(\"url\") + \"/company-users/e4bbae58-a371-5db2-8bfc-2c944d2abe85?include=company-business-units&filter[company-roles.id]=50c647a4-d27f-5d82-a587-1d0b7cc6b58d\",",
									"    selfLink = pm.variables.get(\"url\") + \"/company-users?include=company-business-units&filter[company-roles.id]=50c647a4-d27f-5d82-a587-1d0b7cc6b58d\";",
									"    ",
									"",
									"const resourceType = \"company-users\";",
									"const resourceTypeRelationships = \"company-business-units\";",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[0].type).to.eql(resourceType);",
									"    pm.expect(response[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[0].id).to.be.a(\"string\");",
									"    pm.expect(response[0].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[0].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item one self link\", function() {",
									"    pm.expect(response[0].links.self).to.eql(selfLinkItemOne);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[0].relationships.company-business-units.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[0].relationships.company-business-units.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[0].relationships.company-business-units.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[0].relationships.company-business-units.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[1].type).to.eql(resourceType);",
									"    pm.expect(response[1].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[1].id).to.be.a(\"string\");",
									"    pm.expect(response[1].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[1].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item two self link\", function() {",
									"    pm.expect(response[1].links.self).to.eql(selfLinkItemTwo);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[1].relationships.company-business-units.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[1].relationships.company-business-units.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[1].relationships.company-business-units.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[1].relationships.company-business-units.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[2].type).to.eql(resourceType);",
									"    pm.expect(response[2].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[2].id).to.be.a(\"string\");",
									"    pm.expect(response[2].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[2].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item three self link\", function() {",
									"    pm.expect(response[2].links.self).to.eql(selfLinkItemThree);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[2].relationships.company-business-units.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[2].relationships.company-business-units.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[2].relationships.company-business-units.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[2].relationships.company-business-units.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[3].type).to.eql(resourceType);",
									"    pm.expect(response[3].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[3].id).to.be.a(\"string\");",
									"    pm.expect(response[3].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[3].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item four self link\", function() {",
									"    pm.expect(response[3].links.self).to.eql(selfLinkItemFour);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[3].relationships.company-business-units.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[3].relationships.company-business-units.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[3].relationships.company-business-units.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[3].relationships.company-business-units.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[4].type).to.eql(resourceType);",
									"    pm.expect(response[4].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[4].id).to.be.a(\"string\");",
									"    pm.expect(response[4].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[4].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item five self link\", function() {",
									"    pm.expect(response[4].links.self).to.eql(selfLinkItemFive);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[4].relationships.company-business-units.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[4].relationships.company-business-units.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[4].relationships.company-business-units.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[4].relationships.company-business-units.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[5].type).to.eql(resourceType);",
									"    pm.expect(response[5].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[5].id).to.be.a(\"string\");",
									"    pm.expect(response[5].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[5].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item six self link\", function() {",
									"    pm.expect(response[5].links.self).to.eql(selfLinkItemSix);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[5].relationships.company-business-units.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[5].relationships.company-business-units.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[5].relationships.company-business-units.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[5].relationships.company-business-units.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[6].type).to.eql(resourceType);",
									"    pm.expect(response[6].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[6].id).to.be.a(\"string\");",
									"    pm.expect(response[6].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[6].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item seven self link\", function() {",
									"    pm.expect(response[6].links.self).to.eql(selfLinkItemSeven);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[6].relationships.company-business-units.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[6].relationships.company-business-units.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[6].relationships.company-business-units.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[6].relationships.company-business-units.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(included[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(included[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(included[0].id).to.be.a(\"string\");",
									"    pm.expect(included[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has attributes returned\", function() {",
									"    pm.expect(included[0].attributes.name).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.email).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.phone).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.externalUrl).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.bic).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.iban).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.defaultBillingAddress).to.eql(null);",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(links.self).to.eql(selfLink);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/company-users?include=company-business-units&filter[company-roles.id]={{company-role-uuid}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"company-users"
							],
							"query": [
								{
									"key": "include",
									"value": "company-business-units"
								},
								{
									"key": "filter[company-roles.id]",
									"value": "{{company-role-uuid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Request users include roles filter by roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6da3b9e3-581d-435a-93e0-8e0d216f46dd",
								"exec": [
									"let jsonResponse = pm.response.json(),",
									"    response = jsonResponse.data,",
									"    links = jsonResponse.links,",
									"    included = jsonResponse.included,",
									"    selfLinkItemOne = pm.variables.get(\"url\") + \"/company-users/5ae3c53a-7296-5b77-8c81-1101a581a804?include=company-roles&filter[company-roles.id]=50c647a4-d27f-5d82-a587-1d0b7cc6b58d\",",
									"    selfLinkItemTwo = pm.variables.get(\"url\") + \"/company-users/2ee52add-7ada-5ca5-8cf4-92b81b0bc0ee?include=company-roles&filter[company-roles.id]=50c647a4-d27f-5d82-a587-1d0b7cc6b58d\",",
									"    selfLinkItemThree = pm.variables.get(\"url\") + \"/company-users/52b76396-465d-5b4a-990a-8d9f0ecfa4f6?include=company-roles&filter[company-roles.id]=50c647a4-d27f-5d82-a587-1d0b7cc6b58d\",",
									"    selfLinkItemFour = pm.variables.get(\"url\") + \"/company-users/e235af49-117f-59f2-82be-ed1cc26efbe6?include=company-roles&filter[company-roles.id]=50c647a4-d27f-5d82-a587-1d0b7cc6b58d\",",
									"    selfLinkItemFive = pm.variables.get(\"url\") + \"/company-users/dbd74561-6a8e-597d-adf3-4b939d4cad03?include=company-roles&filter[company-roles.id]=50c647a4-d27f-5d82-a587-1d0b7cc6b58d\",",
									"    selfLinkItemSix = pm.variables.get(\"url\") + \"/company-users/8da78283-e629-5667-9f84-e13207a7aef9?include=company-roles&filter[company-roles.id]=50c647a4-d27f-5d82-a587-1d0b7cc6b58d\",",
									"    selfLinkItemSeven = pm.variables.get(\"url\") + \"/company-users/e4bbae58-a371-5db2-8bfc-2c944d2abe85?include=company-roles&filter[company-roles.id]=50c647a4-d27f-5d82-a587-1d0b7cc6b58d\",",
									"    selfLink = pm.variables.get(\"url\") + \"/company-users?include=company-roles&filter[company-roles.id]=50c647a4-d27f-5d82-a587-1d0b7cc6b58d\";",
									"    ",
									"",
									"const resourceType = \"company-users\";",
									"const resourceTypeRelationships = \"company-roles\";",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[0].type).to.eql(resourceType);",
									"    pm.expect(response[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[0].id).to.be.a(\"string\");",
									"    pm.expect(response[0].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[0].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item one self link\", function() {",
									"    pm.expect(response[0].links.self).to.eql(selfLinkItemOne);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[0].relationships.company-roles.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[0].relationships.company-roles.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[0].relationships.company-roles.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[0].relationships.company-roles.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[1].type).to.eql(resourceType);",
									"    pm.expect(response[1].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[1].id).to.be.a(\"string\");",
									"    pm.expect(response[1].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[1].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item two self link\", function() {",
									"    pm.expect(response[1].links.self).to.eql(selfLinkItemTwo);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[1].relationships.company-roles.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[1].relationships.company-roles.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[1].relationships.company-roles.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[1].relationships.company-roles.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[2].type).to.eql(resourceType);",
									"    pm.expect(response[2].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[2].id).to.be.a(\"string\");",
									"    pm.expect(response[2].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[2].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item three self link\", function() {",
									"    pm.expect(response[2].links.self).to.eql(selfLinkItemThree);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[2].relationships.company-roles.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[2].relationships.company-roles.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[2].relationships.company-roles.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[2].relationships.company-roles.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[3].type).to.eql(resourceType);",
									"    pm.expect(response[3].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[3].id).to.be.a(\"string\");",
									"    pm.expect(response[3].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[3].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item four self link\", function() {",
									"    pm.expect(response[3].links.self).to.eql(selfLinkItemFour);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[3].relationships.company-roles.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[3].relationships.company-roles.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[3].relationships.company-roles.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[3].relationships.company-roles.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[4].type).to.eql(resourceType);",
									"    pm.expect(response[4].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[4].id).to.be.a(\"string\");",
									"    pm.expect(response[4].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[4].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item five self link\", function() {",
									"    pm.expect(response[4].links.self).to.eql(selfLinkItemFive);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[4].relationships.company-roles.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[4].relationships.company-roles.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[4].relationships.company-roles.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[4].relationships.company-roles.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[5].type).to.eql(resourceType);",
									"    pm.expect(response[5].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[5].id).to.be.a(\"string\");",
									"    pm.expect(response[5].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[5].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item six self link\", function() {",
									"    pm.expect(response[5].links.self).to.eql(selfLinkItemSix);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[5].relationships.company-roles.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[5].relationships.company-roles.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[5].relationships.company-roles.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[5].relationships.company-roles.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[6].type).to.eql(resourceType);",
									"    pm.expect(response[6].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[6].id).to.be.a(\"string\");",
									"    pm.expect(response[6].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[6].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item seven self link\", function() {",
									"    pm.expect(response[6].links.self).to.eql(selfLinkItemSeven);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[6].relationships.company-roles.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[6].relationships.company-roles.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[6].relationships.company-roles.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[6].relationships.company-roles.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(included[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(included[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(included[0].id).to.be.a(\"string\");",
									"    pm.expect(included[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has id attributes\", function() {",
									"    pm.expect(included[0].attributes.name).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(links.self).to.eql(selfLink);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/company-users?include=company-roles&filter[company-roles.id]={{company-role-uuid}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"company-users"
							],
							"query": [
								{
									"key": "include",
									"value": "company-roles"
								},
								{
									"key": "filter[company-roles.id]",
									"value": "{{company-role-uuid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Company users pagination",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/company-users?page[limit]=3&page[offset]=0",
							"host": [
								"{{url}}"
							],
							"path": [
								"company-users"
							],
							"query": [
								{
									"key": "page[limit]",
									"value": "3"
								},
								{
									"key": "page[offset]",
									"value": "0"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "BoB user",
			"item": [
				{
					"name": "{{url}}/access-tokens(helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "405a3745-154a-42d9-be3e-9253c225e60f",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.environment.set(\"token\", responseData.attributes.accessToken);",
									"pm.variables.set(\"refresh-token\", responseData.attributes.refreshToken);",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"access-tokens\");",
									"});",
									"",
									"pm.test(\"Has id null\", function() {",
									"    pm.expect(responseData.id).to.eql(null);",
									"});",
									"",
									"pm.test(\"Has token type Bearer\", function(){",
									"    pm.expect(responseData.attributes.tokenType).to.eql(\"Bearer\");",
									"});",
									"",
									"pm.test(\"Has expiration time\", function() {",
									"    pm.expect(responseData.attributes.expiresIn).to.eql(28800);",
									"});",
									"",
									"pm.test(\"Has access token returned\", function() {",
									"    pm.expect(responseData.attributes.accessToken).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has refresh token returned\", function() {",
									"    pm.expect(responseData.attributes.refreshToken).to.not.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"anne.boleyn@spryker.com\", \"password\": \"change123\"}}}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request company users BoB",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d7448d2e-b389-419a-8bfd-a3acd40bb1b2",
								"exec": [
									"pm.test(\"Status code is 403\", function() {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Has correct error returned\", function() {",
									"    var jsonData = pm.response.json(),",
									"        error = _.first(jsonData.errors);",
									"",
									"    pm.expect(error.code).to.eql(\"1403\");",
									"    ",
									"    pm.expect(error.detail).to.eql(\"Current company user is not set. You need to select the current company user with /company-user-access-tokens in order to access the resource collection.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/company-users",
							"host": [
								"{{url}}"
							],
							"path": [
								"company-users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request users Mine BoB",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c9f90328-5498-4fbb-95d3-643443c7375b",
								"exec": [
									"let jsonResponse = pm.response.json(),",
									"    response = jsonResponse.data,",
									"    links = jsonResponse.links,",
									"    selfLinkItemOne = pm.variables.get(\"url\") + \"/company-users/e75455a1-ea9d-569e-b932-4f02e35ec325\",",
									"    selfLinkItemTwo = pm.variables.get(\"url\") + \"/company-users/3692d238-acb3-5b7e-8d24-8dab9c1f4505\",",
									"    selfLinkItemThree = pm.variables.get(\"url\") + \"/company-users/7a6916b5-d35c-5c61-959d-62981c345244\",",
									"    selfLinkItemFour = pm.variables.get(\"url\") + \"/company-users/88ac19e3-ca9c-539e-b1f1-9c3b7fd48718\",",
									"    selfLink = pm.variables.get(\"url\") + \"/company-users/mine\";",
									"    ",
									"",
									"const resourceType = \"company-users\";",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[0].type).to.eql(resourceType);",
									"    pm.expect(response[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[0].id).to.be.a(\"string\");",
									"    pm.expect(response[0].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[0].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item one self link\", function() {",
									"    pm.expect(response[0].links.self).to.eql(selfLinkItemOne);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[1].type).to.eql(resourceType);",
									"    pm.expect(response[1].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[1].id).to.be.a(\"string\");",
									"    pm.expect(response[1].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[1].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item two self link\", function() {",
									"    pm.expect(response[1].links.self).to.eql(selfLinkItemTwo);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[2].type).to.eql(resourceType);",
									"    pm.expect(response[2].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[2].id).to.be.a(\"string\");",
									"    pm.expect(response[2].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[2].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item three self link\", function() {",
									"    pm.expect(response[2].links.self).to.eql(selfLinkItemThree);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[3].type).to.eql(resourceType);",
									"    pm.expect(response[3].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[3].id).to.be.a(\"string\");",
									"    pm.expect(response[3].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[3].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item four self link\", function() {",
									"    pm.expect(response[3].links.self).to.eql(selfLinkItemFour);",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(links.self).to.eql(selfLink);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/company-users/mine",
							"host": [
								"{{url}}"
							],
							"path": [
								"company-users",
								"mine"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request users mine include customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea6a3ce8-a910-4704-8a41-4900174c60ca",
								"exec": [
									"let jsonResponse = pm.response.json(),",
									"    response = jsonResponse.data,",
									"    links = jsonResponse.links,",
									"    included = jsonResponse.included,",
									"    selfLinkItemOne = pm.variables.get(\"url\") + \"/company-users/e75455a1-ea9d-569e-b932-4f02e35ec325?include=customers\",",
									"    selfLinkItemTwo = pm.variables.get(\"url\") + \"/company-users/3692d238-acb3-5b7e-8d24-8dab9c1f4505?include=customers\",",
									"    selfLinkItemThree = pm.variables.get(\"url\") + \"/company-users/7a6916b5-d35c-5c61-959d-62981c345244?include=customers\",",
									"    selfLinkItemFour = pm.variables.get(\"url\") + \"/company-users/88ac19e3-ca9c-539e-b1f1-9c3b7fd48718?include=customers\",",
									"    selfLink = pm.variables.get(\"url\") + \"/company-users/mine?include=customers\";",
									"    ",
									"",
									"const resourceType = \"company-users\";",
									"const resourceTypeRelationships = \"customers\";",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[0].type).to.eql(resourceType);",
									"    pm.expect(response[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[0].id).to.be.a(\"string\");",
									"    pm.expect(response[0].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[0].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item one self link\", function() {",
									"    pm.expect(response[0].links.self).to.eql(selfLinkItemOne);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[0].relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[0].relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[0].relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[0].relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[1].type).to.eql(resourceType);",
									"    pm.expect(response[1].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[1].id).to.be.a(\"string\");",
									"    pm.expect(response[1].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[1].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item two self link\", function() {",
									"    pm.expect(response[1].links.self).to.eql(selfLinkItemTwo);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[1].relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[1].relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[1].relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[1].relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[2].type).to.eql(resourceType);",
									"    pm.expect(response[2].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[2].id).to.be.a(\"string\");",
									"    pm.expect(response[2].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[2].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item three self link\", function() {",
									"    pm.expect(response[2].links.self).to.eql(selfLinkItemThree);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[2].relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[2].relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[2].relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[2].relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[3].type).to.eql(resourceType);",
									"    pm.expect(response[3].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[3].id).to.be.a(\"string\");",
									"    pm.expect(response[3].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[3].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item four self link\", function() {",
									"    pm.expect(response[3].links.self).to.eql(selfLinkItemFour);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[3].relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[3].relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[3].relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[3].relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(links.self).to.eql(selfLink);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(included[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(included[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(included[0].id).to.be.a(\"string\");",
									"    pm.expect(included[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has attributes returned\", function() {",
									"    pm.expect(included[0].attributes.firstName).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.lastName).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.email).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.gender).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.dateOfBirth).to.eql(null);",
									"    pm.expect(included[0].attributes.salutation).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.createdAt).to.eql(null);",
									"    pm.expect(included[0].attributes.updatedAt).to.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/company-users/mine?include=customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"company-users",
								"mine"
							],
							"query": [
								{
									"key": "include",
									"value": "customers"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Request users mine include BU",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "abaac4f7-b153-4f0c-ae93-ad90547de7cd",
								"exec": [
									"let jsonResponse = pm.response.json(),",
									"    response = jsonResponse.data,",
									"    links = jsonResponse.links,",
									"    included = jsonResponse.included,",
									"    selfLinkItemOne = pm.variables.get(\"url\") + \"/company-users/e75455a1-ea9d-569e-b932-4f02e35ec325?include=company-business-units\",",
									"    selfLinkItemTwo = pm.variables.get(\"url\") + \"/company-users/3692d238-acb3-5b7e-8d24-8dab9c1f4505?include=company-business-units\",",
									"    selfLinkItemThree = pm.variables.get(\"url\") + \"/company-users/7a6916b5-d35c-5c61-959d-62981c345244?include=company-business-units\",",
									"    selfLinkItemFour = pm.variables.get(\"url\") + \"/company-users/88ac19e3-ca9c-539e-b1f1-9c3b7fd48718?include=company-business-units\",",
									"    selfLink = pm.variables.get(\"url\") + \"/company-users/mine?include=company-business-units\";",
									"    ",
									"",
									"const resourceType = \"company-users\";",
									"const resourceTypeRelationships = \"company-business-units\";",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[0].type).to.eql(resourceType);",
									"    pm.expect(response[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[0].id).to.be.a(\"string\");",
									"    pm.expect(response[0].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[0].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item one self link\", function() {",
									"    pm.expect(response[0].links.self).to.eql(selfLinkItemOne);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[0].relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[0].relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[0].relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[0].relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[1].type).to.eql(resourceType);",
									"    pm.expect(response[1].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[1].id).to.be.a(\"string\");",
									"    pm.expect(response[1].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[1].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item two self link\", function() {",
									"    pm.expect(response[1].links.self).to.eql(selfLinkItemTwo);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[1].relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[1].relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[1].relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[1].relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[2].type).to.eql(resourceType);",
									"    pm.expect(response[2].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[2].id).to.be.a(\"string\");",
									"    pm.expect(response[2].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[2].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item three self link\", function() {",
									"    pm.expect(response[2].links.self).to.eql(selfLinkItemThree);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[2].relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[2].relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[2].relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[2].relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[3].type).to.eql(resourceType);",
									"    pm.expect(response[3].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[3].id).to.be.a(\"string\");",
									"    pm.expect(response[3].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[3].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item four self link\", function() {",
									"    pm.expect(response[3].links.self).to.eql(selfLinkItemFour);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[3].relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[3].relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[3].relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[3].relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(links.self).to.eql(selfLink);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(included[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(included[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(included[0].id).to.be.a(\"string\");",
									"    pm.expect(included[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has attributes returned\", function() {",
									"    pm.expect(included[0].attributes.name).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.email).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.phone).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.externalUrl).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.bic).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.iban).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.defaultBillingAddress).to.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/company-users/mine?include=company-business-units",
							"host": [
								"{{url}}"
							],
							"path": [
								"company-users",
								"mine"
							],
							"query": [
								{
									"key": "include",
									"value": "company-business-units"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Request users mine include company roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f635fb3d-c2ca-4c4d-856b-38b49abcfc51",
								"exec": [
									"let jsonResponse = pm.response.json(),",
									"    response = jsonResponse.data,",
									"    links = jsonResponse.links,",
									"    included = jsonResponse.included,",
									"    selfLinkItemOne = pm.variables.get(\"url\") + \"/company-users/e75455a1-ea9d-569e-b932-4f02e35ec325?include=company-roles\",",
									"    selfLinkItemTwo = pm.variables.get(\"url\") + \"/company-users/3692d238-acb3-5b7e-8d24-8dab9c1f4505?include=company-roles\",",
									"    selfLinkItemThree = pm.variables.get(\"url\") + \"/company-users/7a6916b5-d35c-5c61-959d-62981c345244?include=company-roles\",",
									"    selfLinkItemFour = pm.variables.get(\"url\") + \"/company-users/88ac19e3-ca9c-539e-b1f1-9c3b7fd48718?include=company-roles\",",
									"    selfLink = pm.variables.get(\"url\") + \"/company-users/mine?include=company-roles\";",
									"    ",
									"",
									"const resourceType = \"company-users\";",
									"const resourceTypeRelationships = \"company-roles\";",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[0].type).to.eql(resourceType);",
									"    pm.expect(response[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[0].id).to.be.a(\"string\");",
									"    pm.expect(response[0].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[0].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item one self link\", function() {",
									"    pm.expect(response[0].links.self).to.eql(selfLinkItemOne);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[0].relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[0].relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[0].relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[0].relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[1].type).to.eql(resourceType);",
									"    pm.expect(response[1].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[1].id).to.be.a(\"string\");",
									"    pm.expect(response[1].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[1].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item two self link\", function() {",
									"    pm.expect(response[1].links.self).to.eql(selfLinkItemTwo);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[1].relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[1].relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[1].relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[1].relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[2].type).to.eql(resourceType);",
									"    pm.expect(response[2].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[2].id).to.be.a(\"string\");",
									"    pm.expect(response[2].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[2].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item three self link\", function() {",
									"    pm.expect(response[2].links.self).to.eql(selfLinkItemThree);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[2].relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[2].relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[2].relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[2].relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response[3].type).to.eql(resourceType);",
									"    pm.expect(response[3].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response[3].id).to.be.a(\"string\");",
									"    pm.expect(response[3].id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response[3].attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item four self link\", function() {",
									"    pm.expect(response[3].links.self).to.eql(selfLinkItemFour);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response[3].relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response[3].relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response[3].relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response[3].relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(links.self).to.eql(selfLink);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/company-users/mine?include=company-roles",
							"host": [
								"{{url}}"
							],
							"path": [
								"company-users",
								"mine"
							],
							"query": [
								{
									"key": "include",
									"value": "company-roles"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "73c8b639-b2ad-4b9c-a7b8-be3a013adea4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f00ce10f-b33c-4220-8392-fb0480d8d1f3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Single user",
			"item": [
				{
					"name": "{{url}}/access-tokens(helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "405a3745-154a-42d9-be3e-9253c225e60f",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.environment.set(\"token\", responseData.attributes.accessToken);",
									"pm.variables.set(\"refresh-token\", responseData.attributes.refreshToken);",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"access-tokens\");",
									"});",
									"",
									"pm.test(\"Has id null\", function() {",
									"    pm.expect(responseData.id).to.eql(null);",
									"});",
									"",
									"pm.test(\"Has token type Bearer\", function(){",
									"    pm.expect(responseData.attributes.tokenType).to.eql(\"Bearer\");",
									"});",
									"",
									"pm.test(\"Has expiration time\", function() {",
									"    pm.expect(responseData.attributes.expiresIn).to.eql(28800);",
									"});",
									"",
									"pm.test(\"Has access token returned\", function() {",
									"    pm.expect(responseData.attributes.accessToken).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has refresh token returned\", function() {",
									"    pm.expect(responseData.attributes.refreshToken).to.not.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"sonia@spryker.com\", \"password\": \"change123\"}}}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Single company user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96effe1c-edd5-4af7-b62e-b1eb1c71d0f7",
								"exec": [
									"let jsonResponse = pm.response.json(),",
									"    response = jsonResponse.data,",
									"    links = jsonResponse.data.links,",
									"    selfLink = pm.variables.get(\"url\") + \"/company-users/e4bbae58-a371-5db2-8bfc-2c944d2abe85\";",
									"    ",
									"",
									"const resourceType = \"company-users\";",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response.type).to.eql(resourceType);",
									"    pm.expect(response.type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response.id).to.be.a(\"string\");",
									"    pm.expect(response.id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response.attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item one self link\", function() {",
									"    pm.expect(links.self).to.eql(selfLink);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/company-users/{{company-user-uuid}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"company-users",
								"{{company-user-uuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Single company user include customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc98f425-58ff-4892-b3c7-204948e90241",
								"exec": [
									"let jsonResponse = pm.response.json(),",
									"    response = jsonResponse.data,",
									"    links = jsonResponse.data.links,",
									"    selfLink = pm.variables.get(\"url\") + \"/company-users/e4bbae58-a371-5db2-8bfc-2c944d2abe85?include=customers\";",
									"    ",
									"",
									"const resourceType = \"company-users\";",
									"const resourceTypeRelationships = \"customers\";",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response.type).to.eql(resourceType);",
									"    pm.expect(response.type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response.id).to.be.a(\"string\");",
									"    pm.expect(response.id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response.attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item one self link\", function() {",
									"    pm.expect(links.self).to.eql(selfLink);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response.relationships.customers.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response.relationships.customers.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response.relationships.customers.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response.relationships.customers.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct include type returned\", function() {",
									"    pm.expect(jsonResponse.included[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(jsonResponse.included[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has include id returned\", function() {",
									"    pm.expect(jsonResponse.included[0].id).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.included[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has attributes returned\", function() {",
									"    pm.expect(jsonResponse.included[0].attributes.firstName).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.included[0].attributes.lastName).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.included[0].attributes.email).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.included[0].attributes.gender).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.included[0].attributes.dateOfBirth).to.eql(null);",
									"    pm.expect(jsonResponse.included[0].attributes.salutation).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.included[0].attributes.createdAt).to.eql(null);",
									"    pm.expect(jsonResponse.included[0].attributes.updatedAt).to.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/company-users/{{company-user-uuid}}?include=customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"company-users",
								"{{company-user-uuid}}"
							],
							"query": [
								{
									"key": "include",
									"value": "customers"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Single company user include BU",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "213cac66-8b84-4635-9c0d-30bb9c4cf042",
								"exec": [
									"let jsonResponse = pm.response.json(),",
									"    response = jsonResponse.data,",
									"    links = jsonResponse.data.links,",
									"    included = jsonResponse.included,",
									"    selfLink = pm.variables.get(\"url\") + \"/company-users/e4bbae58-a371-5db2-8bfc-2c944d2abe85?include=company-business-units\";",
									"    ",
									"",
									"const resourceType = \"company-users\";",
									"const resourceTypeRelationships = \"company-business-units\";",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response.type).to.eql(resourceType);",
									"    pm.expect(response.type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response.id).to.be.a(\"string\");",
									"    pm.expect(response.id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response.attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item one self link\", function() {",
									"    pm.expect(links.self).to.eql(selfLink);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response.relationships.company-business-units.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response.relationships.company-business-units.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response.relationships.company-business-units.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response.relationships.company-business-units.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(included[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(included[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(included[0].id).to.be.a(\"string\");",
									"    pm.expect(included[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has attributes returned\", function() {",
									"    pm.expect(included[0].attributes.name).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.email).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.phone).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.externalUrl).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.bic).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.iban).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.defaultBillingAddress).to.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/company-users/{{company-user-uuid}}?include=company-business-units",
							"host": [
								"{{url}}"
							],
							"path": [
								"company-users",
								"{{company-user-uuid}}"
							],
							"query": [
								{
									"key": "include",
									"value": "company-business-units"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Single company user include roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "558a1797-d2c7-466a-a468-b8cd4e991e32",
								"exec": [
									"let jsonResponse = pm.response.json(),",
									"    response = jsonResponse.data,",
									"    links = jsonResponse.data.links,",
									"    included = jsonResponse.included,",
									"    selfLink = pm.variables.get(\"url\") + \"/company-users/e4bbae58-a371-5db2-8bfc-2c944d2abe85?include=company-roles\";",
									"    ",
									"",
									"const resourceType = \"company-users\";",
									"const resourceTypeRelationships = \"company-roles\";",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(response.type).to.eql(resourceType);",
									"    pm.expect(response.type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(response.id).to.be.a(\"string\");",
									"    pm.expect(response.id).to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    let attributes = response.attributes;",
									"",
									"    pm.expect(attributes.isActive).to.be.a(\"boolean\");",
									"    pm.expect(attributes.isDefault).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Has item one self link\", function() {",
									"    pm.expect(links.self).to.eql(selfLink);",
									"});",
									"",
									"pm.test(\"Has correct relationships type returned\", function() {",
									"    pm.expect(response.relationships.company-roles.data[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(response.relationships.company-roles.data[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has relationships id returned\", function() {",
									"    pm.expect(response.relationships.company-roles.data[0].id).to.be.a(\"string\");",
									"    pm.expect(response.relationships.company-roles.data[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(included[0].type).to.eql(resourceTypeRelationships);",
									"    pm.expect(included[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(included[0].id).to.be.a(\"string\");",
									"    pm.expect(included[0].id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has id attributes\", function() {",
									"    pm.expect(included[0].attributes.name).to.be.a(\"string\");",
									"    pm.expect(included[0].attributes.isDefault).to.be.a(\"boolean\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/company-users/{{company-user-uuid}}?include=company-roles",
							"host": [
								"{{url}}"
							],
							"path": [
								"company-users",
								"{{company-user-uuid}}"
							],
							"query": [
								{
									"key": "include",
									"value": "company-roles"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "74205613-d9a6-4155-afec-18cea7dbcad9",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "4e4c24d7-8d4e-4d77-a165-24809a0dd763",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "ac10defb-8606-4c29-a94c-89a54d09df65",
			"key": "company-user-uuid",
			"value": "e4bbae58-a371-5db2-8bfc-2c944d2abe85",
			"type": "string"
		},
		{
			"id": "24d27d58-cc5b-41d6-959b-185e4896cfd8",
			"key": "company-business-unit-uuid",
			"value": "d8943c86-4481-5c2a-b5f6-28c8dbdf1a23",
			"type": "string"
		},
		{
			"id": "de6cf469-ec14-4e22-af8c-ee7b40af4a57",
			"key": "company-role-uuid",
			"value": "50c647a4-d27f-5d82-a587-1d0b7cc6b58d",
			"type": "string"
		}
	]
}