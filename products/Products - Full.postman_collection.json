{
	"info": {
		"_postman_id": "472395be-f213-4ae7-9c47-16c652f6c1fb",
		"name": "Products - Full",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Tax Sets - Ticket GLUE-244",
			"item": [
				{
					"name": "Request abstract tax sets",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "154c848d-fd4f-4b93-8a40-c7b4ae3c5ac6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200); // verify the correct stastus code = 200 is fine",
									"});",
									"",
									"pm.test(\"Has abstract type, ID returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.type).to.eql(\"tax-sets\");",
									"    pm.expect(jsonData.data.id).to.eql(\"b1b7984e-c7dc-5be4-89f0-0ea50d20cbe1\");",
									"});",
									"",
									"pm.test(\"Has attributes returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.name).to.eql(\"Smart Electronics\");",
									"});",
									"",
									"pm.test(\"Has Austria Standard tax rates returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.restTaxRates[0].name).to.eql(\"Austria Standard\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[0].rate).to.eql(\"20.00\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[0].country).to.eql(\"AT\");",
									"});",
									"",
									"pm.test(\"Has Belgium Standard tax rates returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.restTaxRates[1].name).to.eql(\"Belgium Standard\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[1].rate).to.eql(\"21.00\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[1].country).to.eql(\"BE\");",
									"});",
									"",
									"pm.test(\"Has Bulgaria Standard tax rates returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.restTaxRates[2].name).to.eql(\"Bulgaria Standard\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[2].rate).to.eql(\"20.00\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[2].country).to.eql(\"BG\");",
									"});",
									"",
									"pm.test(\"Has Czech Standard tax rates returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.restTaxRates[3].name).to.eql(\"Czech Republic Standard\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[3].rate).to.eql(\"21.00\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[3].country).to.eql(\"CZ\");",
									"});",
									"",
									"pm.test(\"Has Denmark Standard tax rates returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.restTaxRates[4].name).to.eql(\"Denmark Standard\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[4].rate).to.eql(\"25.00\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[4].country).to.eql(\"DK\");",
									"});",
									"",
									"pm.test(\"Has France Standard tax rates returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.restTaxRates[5].name).to.eql(\"France Standard\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[5].rate).to.eql(\"20.00\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[5].country).to.eql(\"FR\");",
									"});",
									"",
									"pm.test(\"Has Hungary Standard tax rates returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.restTaxRates[6].name).to.eql(\"Hungary Standard\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[6].rate).to.eql(\"27.00\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[6].country).to.eql(\"HU\");",
									"});",
									"",
									"pm.test(\"Has Luxembourg Standard tax rates returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.restTaxRates[7].name).to.eql(\"Luxembourg Standard\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[7].rate).to.eql(\"17.00\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[7].country).to.eql(\"LU\");",
									"});",
									"",
									"pm.test(\"Has Netherlands Standard tax rates returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.restTaxRates[8].name).to.eql(\"Netherlands Standard\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[8].rate).to.eql(\"21.00\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[8].country).to.eql(\"NL\");",
									"});",
									"",
									"pm.test(\"Has Poland Standard tax rates returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.restTaxRates[9].name).to.eql(\"Poland Standard\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[9].rate).to.eql(\"23.00\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[9].country).to.eql(\"PL\");",
									"});",
									"",
									"pm.test(\"Has Romania Standard tax rates returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.restTaxRates[10].name).to.eql(\"Romania Standard\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[10].rate).to.eql(\"20.00\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[10].country).to.eql(\"RO\");",
									"});",
									"",
									"pm.test(\"Has Slovakia Standard tax rates returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.restTaxRates[11].name).to.eql(\"Slovakia Standard\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[11].rate).to.eql(\"20.00\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[11].country).to.eql(\"SK\");",
									"});",
									"",
									"pm.test(\"Has Slovenia Standard tax rates returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.restTaxRates[12].name).to.eql(\"Slovenia Standard\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[12].rate).to.eql(\"22.00\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[12].country).to.eql(\"SI\");",
									"});",
									"",
									"pm.test(\"Has Germany Standard tax rates returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.restTaxRates[13].name).to.eql(\"Germany Reduced\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[13].rate).to.eql(\"7.00\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[13].country).to.eql(\"DE\");",
									"});",
									"",
									"pm.test(\"Has Italy Reduced1 tax rates returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.restTaxRates[14].name).to.eql(\"Italy Reduced1\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[14].rate).to.eql(\"4.00\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[14].country).to.eql(\"IT\");",
									"});",
									"",
									"",
									"pm.test(\"Has self link\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.links.self).to.eql(pm.environment.get(\"url\") +\"/abstract-products/\" + \"209\" + \"/tax-sets\"); ",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}/tax-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"abstract-products",
								"{{abstract_sku_with_1product}}",
								"tax-sets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request abstract wirh 3 products  tax sets",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "290ccad7-adc1-4541-be1a-8d7ddf16f8a4",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200); // verify the correct stastus code = 200 is fine",
									"});",
									"",
									"pm.test(\"Has abstract type, ID returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.type).to.eql(\"tax-sets\");",
									"    pm.expect(jsonData.data.id).to.eql(\"deb94215-a1fc-5cdc-af6e-87ec3a847480\");",
									"});",
									"",
									"pm.test(\"Has attributes returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.name).to.eql(\"Communication Electronics\");",
									"});",
									"",
									"pm.test(\"Has Austria Standard tax rates returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.restTaxRates[0].name).to.eql(\"Austria Standard\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[0].rate).to.eql(\"20.00\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[0].country).to.eql(\"AT\");",
									"});",
									"",
									"pm.test(\"Has Belgium Standard tax rates returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.restTaxRates[1].name).to.eql(\"Belgium Standard\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[1].rate).to.eql(\"21.00\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[1].country).to.eql(\"BE\");",
									"});",
									"",
									"pm.test(\"Has Bulgaria Standard tax rates returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.restTaxRates[2].name).to.eql(\"Bulgaria Standard\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[2].rate).to.eql(\"20.00\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[2].country).to.eql(\"BG\");",
									"});",
									"",
									"pm.test(\"Has Czech Standard tax rates returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.restTaxRates[3].name).to.eql(\"Czech Republic Standard\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[3].rate).to.eql(\"21.00\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[3].country).to.eql(\"CZ\");",
									"});",
									"",
									"pm.test(\"Has Denmark Standard tax rates returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.restTaxRates[4].name).to.eql(\"Denmark Standard\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[4].rate).to.eql(\"25.00\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[4].country).to.eql(\"DK\");",
									"});",
									"",
									"pm.test(\"Has France Standard tax rates returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.restTaxRates[5].name).to.eql(\"France Standard\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[5].rate).to.eql(\"20.00\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[5].country).to.eql(\"FR\");",
									"});",
									"",
									"pm.test(\"Has Hungary Standard tax rates returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.restTaxRates[6].name).to.eql(\"Germany Standard\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[6].rate).to.eql(\"19.00\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[6].country).to.eql(\"DE\");",
									"});",
									"",
									"pm.test(\"Has Luxembourg Standard tax rates returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.restTaxRates[7].name).to.eql(\"Hungary Standard\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[7].rate).to.eql(\"27.00\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[7].country).to.eql(\"HU\");",
									"});",
									"",
									"pm.test(\"Has Italy Standard tax rates returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.restTaxRates[8].name).to.eql(\"Italy Standard\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[8].rate).to.eql(\"22.00\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[8].country).to.eql(\"IT\");",
									"});",
									"",
									"pm.test(\"Has Netherlands Standard tax rates returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.restTaxRates[9].name).to.eql(\"Netherlands Standard\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[9].rate).to.eql(\"21.00\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[9].country).to.eql(\"NL\");",
									"});",
									"",
									"pm.test(\"Has Romania Standard tax rates returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.restTaxRates[10].name).to.eql(\"Romania Standard\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[10].rate).to.eql(\"20.00\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[10].country).to.eql(\"RO\");",
									"});",
									"",
									"pm.test(\"Has Slovakia Standard tax rates returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.restTaxRates[11].name).to.eql(\"Slovakia Standard\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[11].rate).to.eql(\"20.00\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[11].country).to.eql(\"SK\");",
									"});",
									"",
									"pm.test(\"Has Slovenia Standard tax rates returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.restTaxRates[12].name).to.eql(\"Slovenia Standard\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[12].rate).to.eql(\"22.00\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[12].country).to.eql(\"SI\");",
									"});",
									"",
									"pm.test(\"Has Luxembourg Reduced1 tax rates returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.restTaxRates[13].name).to.eql(\"Luxembourg Reduced1\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[13].rate).to.eql(\"3.00\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[13].country).to.eql(\"LU\");",
									"});",
									"",
									"pm.test(\"Has Poland Reduced1 tax rates returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.restTaxRates[14].name).to.eql(\"Poland Reduced1\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[14].rate).to.eql(\"5.00\");",
									"    pm.expect(jsonData.data.attributes.restTaxRates[14].country).to.eql(\"PL\");",
									"});",
									"",
									"",
									"pm.test(\"Has self link\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.links.self).to.eql(pm.environment.get(\"url\") +\"/abstract-products/\" + \"177\" + \"/tax-sets\"); ",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/abstract-products/{{abstract_sku_with_3product}}/tax-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"abstract-products",
								"{{abstract_sku_with_3product}}",
								"tax-sets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Request abstract tax sets with broken URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a8cdf0fc-8ab6-4ca6-b96b-6e11a66887e6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is \", function () {",
									"    pm.response.to.have.status();",
									"});",
									"",
									"// pm.test(\"Error code is \", function() {",
									"//     pm.expect(pm.response.json().errors[0].code).to.eql(\"\");",
									"// });",
									"",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/abstract-p3roducts/{{abstract_sku_with_3product}}/tax-sdets",
							"host": [
								"{{url}}"
							],
							"path": [
								"abstract-p3roducts",
								"{{abstract_sku_with_3product}}",
								"tax-sdets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Request abstract tax sets with wrong SKU",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "138ba273-b040-43b8-90cd-14808b3ddfa0",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is \", function () {",
									"    pm.response.to.have.status();",
									"});",
									"pm.test(\"Error code is \", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/abstract-products/434345/tax-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"abstract-products",
								"434345",
								"tax-sets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request abstract tax sets with PUT method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a31d9294-6fb3-4bfd-94fb-6fbef38e4685",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is \", function () {",
									"    pm.response.to.have.status();",
									"});",
									"pm.test(\"Error code is \", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9, en;q=0.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"register-customer\",\"attributes\":{\"salutation\":\"{{salutation}}\",\"username\":\"test\",\"firstName\":\"{{firstName}}\",\"lastName\":\"{{lastName}}\",\"email\":\"{{email}}\",\"password\":\"{{password}}\",\"passwordConfirmation\":\"{{password}}\",\"acceptedTerms\":true}}}"
						},
						"url": {
							"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}/tax-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"abstract-products",
								"{{abstract_sku_with_1product}}",
								"tax-sets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request abstract tax sets with PATCH method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a31d9294-6fb3-4bfd-94fb-6fbef38e4685",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is \", function () {",
									"    pm.response.to.have.status();",
									"});",
									"pm.test(\"Error code is \", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9, en;q=0.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"register-customer\",\"attributes\":{\"salutation\":\"{{salutation}}\",\"username\":\"test\",\"firstName\":\"{{firstName}}\",\"lastName\":\"{{lastName}}\",\"email\":\"{{email}}\",\"password\":\"{{password}}\",\"passwordConfirmation\":\"{{password}}\",\"acceptedTerms\":true}}}"
						},
						"url": {
							"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}/tax-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"abstract-products",
								"{{abstract_sku_with_1product}}",
								"tax-sets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request abstract tax sets with POST method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a31d9294-6fb3-4bfd-94fb-6fbef38e4685",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is \", function () {",
									"    pm.response.to.have.status();",
									"});",
									"pm.test(\"Error code is \", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9, en;q=0.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"register-customer\",\"attributes\":{\"salutation\":\"{{salutation}}\",\"username\":\"test\",\"firstName\":\"{{firstName}}\",\"lastName\":\"{{lastName}}\",\"email\":\"{{email}}\",\"password\":\"{{password}}\",\"passwordConfirmation\":\"{{password}}\",\"acceptedTerms\":true}}}"
						},
						"url": {
							"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}/tax-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"abstract-products",
								"{{abstract_sku_with_1product}}",
								"tax-sets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request abstract tax sets with DELETE method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a31d9294-6fb3-4bfd-94fb-6fbef38e4685",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is \", function () {",
									"    pm.response.to.have.status();",
									"});",
									"pm.test(\"Error code is \", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9, en;q=0.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"register-customer\",\"attributes\":{\"salutation\":\"{{salutation}}\",\"username\":\"test\",\"firstName\":\"{{firstName}}\",\"lastName\":\"{{lastName}}\",\"email\":\"{{email}}\",\"password\":\"{{password}}\",\"passwordConfirmation\":\"{{password}}\",\"acceptedTerms\":true}}}"
						},
						"url": {
							"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}/tax-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"abstract-products",
								"{{abstract_sku_with_1product}}",
								"tax-sets"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Price Resource - Ticket GLUE-246",
			"item": [
				{
					"name": "Request the abstract product ",
					"item": [
						{
							"name": "Request abstract price resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c7be8c42-be5e-4823-ac69-8396e747f478",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200); // verify the correct stastus code = 200 is fine",
											"});",
											"",
											"pm.test(\"Has abstract type, ID returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.type).to.eql(\"abstract-product-prices\");",
											"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"abstract_sku_with_3product\"));",
											"});",
											"",
											"pm.test(\"Has prices EUR returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.prices.EUR.priceData).to.eql(null);",
											"    pm.expect(jsonData.data.attributes.prices.EUR.GROSS_MODE.DEFAULT).to.eql(42502);",
											"    pm.expect(jsonData.data.attributes.prices.EUR.NET_MODE.DEFAULT).to.eql(38252);",
											"});",
											"",
											"pm.test(\"Has prices CHF returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.prices.CHF.priceData).to.eql(null);",
											"    pm.expect(jsonData.data.attributes.prices.CHF.GROSS_MODE.DEFAULT).to.eql(48877);",
											"    pm.expect(jsonData.data.attributes.prices.CHF.NET_MODE.DEFAULT).to.eql(43990);",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.links.self).to.eql(pm.environment.get(\"url\") + \"/abstract-product-prices/\" + pm.environment.get(\"abstract_sku_with_3product\")); ",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_3product}}/abstract-product-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_3product}}",
										"abstract-product-prices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract price using special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c273e35e-b961-4506-9aa3-bac5d66a0916",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Error code is 302\", function() {",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"306\");",
											"});",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Can`t find abstract product prices.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-product-prices/±!@#$%^&",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-product-prices",
										"±!@"
									],
									"hash": "$%^&"
								}
							},
							"response": []
						},
						{
							"name": "Request abstract price using spaces ",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "70999597-c5be-4218-bdfe-bb37d594c0f1",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Error code is 302\", function() {",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"306\");",
											"});",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Can`t find abstract product prices.\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-product-prices/",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-product-prices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract price with broken URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ccbc7b68-f9fe-4da6-9b9b-b7a2115fd574",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Error code is 302\", function() {",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"\");",
											"});",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-product-p1rices/{{abstract_sku_with_3product}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-product-p1rices",
										"{{abstract_sku_with_3product}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract price resource using POST method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90c3df2c-4127-4b31-a1e0-4d94cd07593a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, de;q=0.9, en;q=0.1"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{ \"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/abstract-product-prices/{{abstract_sku_with_3product}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-product-prices",
										"{{abstract_sku_with_3product}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract price using DELETE method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb5d743d-b6a6-47d4-9704-3ada2d81f5ee",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-product-prices/{{abstract_sku_with_3product}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-product-prices",
										"{{abstract_sku_with_3product}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract price resource using PUT method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90c3df2c-4127-4b31-a1e0-4d94cd07593a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, de;q=0.9, en;q=0.1"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{ \"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/abstract-product-prices/{{abstract_sku_with_3product}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-product-prices",
										"{{abstract_sku_with_3product}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Request the concrete product ",
					"item": [
						{
							"name": "Request concrete price resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c849f36-335a-43f1-8f76-5dacd793c8e5",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200); // verify the correct stastus code = 200 is fine",
											"});",
											"",
											"pm.test(\"Has abstract type, ID returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.type).to.eql(\"concrete-product-prices\");",
											"    pm.expect(jsonData.data.id).to.eql(\"265\");",
											"});",
											"",
											"pm.test(\"Has prices EUR returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.prices.EUR.priceData).to.eql(null);",
											"    pm.expect(jsonData.data.attributes.prices.CHF.GROSS_MODE.DEFAULT).to.eql(20701);",
											"    pm.expect(jsonData.data.attributes.prices.CHF.NET_MODE.DEFAULT).to.eql(18631);",
											"});",
											"",
											"pm.test(\"Has prices CHF returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.prices.EUR.priceData).to.eql(null);",
											"    pm.expect(jsonData.data.attributes.prices.EUR.GROSS_MODE.DEFAULT).to.eql(18001);",
											"    pm.expect(jsonData.data.attributes.prices.EUR.NET_MODE.DEFAULT).to.eql(16201);",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.links.self).to.eql(pm.environment.get(\"url\") + \"/concrete-product-prices/\" + pm.environment.get(\"concrete_id\")); ",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concrete_sku}}/concrete-product-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concrete_sku}}",
										"concrete-product-prices"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Products - Get product information ",
			"item": [
				{
					"name": "Request the abstract product",
					"item": [
						{
							"name": "Request abstract information with 3 concrete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c75c0ee2-b7df-45da-86b4-788faaf3a54e",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200); // verify the correct stastus code = 200 is fine",
											"});",
											"pm.test(\"Has correct type and ID  returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.type).to.eql(\"abstract-products\"); // re-check the correct type in the response ",
											"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"abstract_sku_with_3product\"));",
											"});",
											"pm.test(\"Has abstract description returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.sku).to.eql(pm.environment.get(\"abstract_sku_with_3product\"));",
											"    pm.expect(jsonData.data.attributes.name).to.be.eql(\"Samsung Galaxy Tab Active 8.0 8 GB\"); ",
											"    pm.expect(jsonData.data.attributes.description).to.be.a(\"string\"); // verify the description of abstract product",
											"});",
											"pm.test(\"Has attribute variants returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.attributeMap.attribute_variants[\"internal_storage_capacity:8 GB\"].id_product_concrete).to.eql(254);",
											"    pm.expect(jsonData.data.attributes.attributeMap.attribute_variants[\"internal_storage_capacity:16 GB\"].id_product_concrete).to.eql(255);",
											"    pm.expect(jsonData.data.attributes.attributeMap.attribute_variants[\"internal_storage_capacity:32 GB\"].id_product_concrete).to.eql(256); // verify the attribute variants in the Attribute Map",
											"});",
											"pm.test(\"Has super attributes  returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.attributeMap.super_attributes.internal_storage_capacity).to.contain(\"8 GB\", \"16 GB\", \"32 GB\"); // verify the all super attributes in the Attribute Map",
											"});",
											"pm.test(\"Has product concrete ids returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.attributeMap.product_concrete_ids[\"177_24867659\"]).to.eql(254); ",
											"    pm.expect(jsonData.data.attributes.attributeMap.product_concrete_ids[\"177_24422865\"]).to.eql(255);",
											"    pm.expect(jsonData.data.attributes.attributeMap.product_concrete_ids[\"177_25913296\"]).to.eql(256);",
											"    // verify the roduct concrete ids in the Attribute Map",
											"});",
											"pm.test(\"Has self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.links.self).to.eql(pm.environment.get(\"url\") + \"/abstract-products/\" +  pm.environment.get(\"abstract_sku_with_3product\"));",
											"    // verify the self link in abstract product",
											"});",
											"pm.test(\"Has relationships concrete-products returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[0].type).to.eql(\"concrete-products\"); ",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[0].id).to.eql(\"177_24867659\");",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[1].type).to.eql(\"concrete-products\"); ",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[1].id).to.eql(\"177_24422865\");",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[2].type).to.eql(\"concrete-products\");",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[2].id).to.eql(\"177_25913296\");",
											"});",
											"",
											"pm.test(\"Has relationships abstract-product-image-sets returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-image-sets\"].data[0].type).to.eql(\"abstract-product-image-sets\"); ",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-image-sets\"].data[0].id).to.eql(\"177\");",
											"});",
											"pm.test(\"Has relationships abstract-product-availabilities returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-availabilities\"].data[0].type).to.eql(\"abstract-product-availabilities\"); ",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-availabilities\"].data[0].id).to.eql(\"177\");",
											"});",
											"",
											"pm.test(\"Has relationships tax-sets returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.relationships[\"tax-sets\"].data[0].type).to.eql(\"tax-sets\"); ",
											"    pm.expect(jsonData.data.relationships[\"tax-sets\"].data[0].id).to.eql(null);",
											"});",
											"",
											"pm.test(\"Has relationships abstract-product-prices returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-prices\"].data[0].type).to.eql(\"abstract-product-prices\"); ",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-prices\"].data[0].id).to.eql(\"177\");",
											"});",
											"",
											"// Data Include level ",
											"",
											"pm.test(\"Has include the first concrete-product-image-sets type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[0].type).to.eql(\"concrete-product-image-sets\"); ",
											"    pm.expect(jsonData.included[0].id).to.eql(\"177_24867659\"); ",
											"});",
											"",
											"pm.test(\"Has include the first concrete-product-image-sets self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[0].links.self).to.eql(pm.environment.get(\"url\") + \"/concrete-products/\" + (\"177_24867659\") + \"/concrete-product-image-sets\");",
											"});",
											"",
											"pm.test(\"Has include the second concrete-product-availabilities type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[1].type).to.eql(\"concrete-product-availabilities\"); ",
											"    pm.expect(jsonData.included[1].id).to.eql(\"177_24867659\"); ",
											"});",
											"",
											"pm.test(\"Has include the second concrete-product-availabilities self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[1].links.self).to.eql(pm.environment.get(\"url\") + \"/concrete-products/\" + (\"177_24867659\") + \"/concrete-product-availabilities\");",
											"});",
											"",
											"pm.test(\"Has include the third concrete-product type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[2].type).to.eql(\"concrete-products\"); ",
											"    pm.expect(jsonData.included[2].id).to.eql(\"177_24867659\"); ",
											"});",
											"pm.test(\"Has include the third concrete-products self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[2].links.self).to.eql(pm.environment.get(\"url\") + \"/concrete-products/\" + (\"177_24867659\"));",
											"});",
											"",
											"pm.test(\"Has include the fourth concrete-product-image-sets type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[3].type).to.eql(\"concrete-product-image-sets\"); ",
											"    pm.expect(jsonData.included[3].id).to.eql(\"177_24867659\"); ",
											"});",
											"",
											"pm.test(\"Has include the fourth concrete-product-image-sets self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[3].links.self).to.eql(pm.environment.get(\"url\") + \"/concrete-products/\" + (\"177_24867659\") + \"/concrete-product-image-sets\");",
											"});",
											"",
											"pm.test(\"Has include the fifth concrete-product-availabilities type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[4].type).to.eql(\"concrete-product-availabilities\"); ",
											"    pm.expect(jsonData.included[4].id).to.eql(\"177_24422865\"); ",
											"});",
											"",
											"pm.test(\"Has include the fifth concrete-product-availabilities self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[4].links.self).to.eql(pm.environment.get(\"url\") + \"/concrete-products/\" + (\"177_24422865\") + \"/concrete-product-availabilities\");",
											"});",
											"",
											"pm.test(\"Has include the sixth concrete-product type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[5].type).to.eql(\"concrete-products\"); ",
											"    pm.expect(jsonData.included[5].id).to.eql(\"177_24422865\"); ",
											"});",
											"pm.test(\"Has include the sixth concrete-products self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[5].links.self).to.eql(pm.environment.get(\"url\") + \"/concrete-products/\" + (\"177_24422865\"));",
											"});",
											"",
											"pm.test(\"Has include the seventh concrete-product-image-sets type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[6].type).to.eql(\"concrete-product-image-sets\"); ",
											"    pm.expect(jsonData.included[6].id).to.eql(\"177_25913296\"); ",
											"});",
											"",
											"pm.test(\"Has include the seventh concrete-product-image-sets self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[6].links.self).to.eql(pm.environment.get(\"url\") + \"/concrete-products/\" + (\"177_25913296\") + \"/concrete-product-image-sets\");",
											"});",
											"",
											"pm.test(\"Has include the eighth concrete-product-availabilities type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[7].type).to.eql(\"concrete-product-availabilities\"); ",
											"    pm.expect(jsonData.included[7].id).to.eql(\"177_25913296\"); ",
											"});",
											"",
											"pm.test(\"Has include the eighth concrete-product-availabilities self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[7].links.self).to.eql(pm.environment.get(\"url\") + \"/concrete-products/\" + (\"177_25913296\") + \"/concrete-product-availabilities\");",
											"});",
											"",
											"pm.test(\"Has include the ninth concrete-product type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[8].type).to.eql(\"concrete-products\"); ",
											"    pm.expect(jsonData.included[8].id).to.eql(\"177_25913296\"); ",
											"});",
											"pm.test(\"Has include the ninth concrete-products self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[8].links.self).to.eql(pm.environment.get(\"url\") + \"/concrete-products/\" + (\"177_25913296\"));",
											"});",
											"",
											"pm.test(\"Has include the tenth abstract-product-image-sets type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[9].type).to.eql(\"abstract-product-image-sets\");",
											"    pm.expect(jsonData.included[9].id).to.eql(\"177\");",
											"});",
											"pm.test(\"Has include the tenth concrete-products self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[9].links.self).to.eql(pm.environment.get(\"url\") + \"/abstract-products/\" + (\"177\") + \"/abstract-product-image-sets\");",
											"});",
											"",
											"pm.test(\"Has include the eleventh abstract-product-availabilities type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[10].type).to.eql(\"abstract-product-availabilities\");",
											"    pm.expect(jsonData.included[10].id).to.eql(\"177\");",
											"});",
											"pm.test(\"Has include the eleventh abstract-product-availabilities self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[10].links.self).to.eql(pm.environment.get(\"url\") + \"/abstract-products/\" + (\"177\") + \"/abstract-product-availabilities\");",
											"});",
											"",
											"pm.test(\"Has include the twelfth tax-sets type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[11].type).to.eql(\"tax-sets\");",
											"    pm.expect(jsonData.included[11].id).to.eql(\"177\");",
											"});",
											"pm.test(\"Has include the twelfth tax-sest self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[11].links.self).to.eql(pm.environment.get(\"url\") + \"/tax-sets\" );",
											"});",
											"",
											"pm.test(\"Has include the abstract-product-prices type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[12].type).to.eql(\"abstract-product-prices\");",
											"    pm.expect(jsonData.included[12].id).to.eql(\"177\");",
											"});",
											"pm.test(\"Has include the abstract-product-prices self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[12].links.self).to.eql(pm.environment.get(\"url\") + \"/abstract-product-prices\" + \"/177\" );",
											"});",
											"",
											"",
											"",
											"",
											"",
											"// pm.test(\"Has include the second type conctaions relationships concrete-product-image-sets returned\", function() {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.included[1].relationships[\"concrete-product-image-sets\"].data[0].type).to.eql(\"concrete-product-image-sets\"); ",
											"//     pm.expect(jsonData.included[1].relationships[\"concrete-product-image-sets\"].data[0].id).to.eql(\"263\"); ",
											"// });",
											"// pm.test(\"Has include the third concrete-product-image-sets type returned\", function() {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.included[2].type).to.eql(\"concrete-product-image-sets\"); ",
											"//     pm.expect(jsonData.included[2].id).to.eql(\"264\");",
											"// });",
											"",
											"",
											"// pm.test(\"Has include the third concrete-product-image-sets self link\", function() {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.included[2].links.self).to.eql(pm.environment.get(\"url\") + \"/concrete-products/\" + (\"264\") + \"/concrete-product-image-sets\");",
											"// });",
											"// pm.test(\"Has include the fourth concrete-products type returned\", function() {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.included[3].type).to.eql(\"concrete-products\"); ",
											"//     pm.expect(jsonData.included[3].id).to.eql(\"264\");",
											"// });",
											"// pm.test(\"Has include the fourth concrete-products self link\", function() {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.included[3].links.self).to.eql(pm.environment.get(\"url\") + \"/concrete-products/\" + (\"264\"));",
											"// });",
											"// pm.test(\"Has include the fourth type contains concrete-product-image-sets  returned\", function() {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.included[3].relationships[\"concrete-product-image-sets\"].data[0].type).to.eql(\"concrete-product-image-sets\"); ",
											"//     pm.expect(jsonData.included[3].relationships[\"concrete-product-image-sets\"].data[0].id).to.eql(\"264\");",
											"// });",
											"// pm.test(\"Has include the fifth concrete-product-image-sets type returned\", function() {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.included[4].type).to.eql(\"concrete-product-image-sets\"); ",
											"//     pm.expect(jsonData.included[4].id).to.eql(\"265\");",
											"// });",
											"// pm.test(\"Has include the fifth concrete-product-image-sets self link\", function() {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.included[4].links.self).to.eql(pm.environment.get(\"url\") + \"/concrete-products/\" + (\"265\") + \"/concrete-product-image-sets\");",
											"// });",
											"// pm.test(\"Has include the sixth concrete-products type returned\", function() {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.included[5].type).to.eql(\"concrete-products\");",
											"//     pm.expect(jsonData.included[5].id).to.eql(\"265\");",
											"// });",
											"// pm.test(\"Has include the sixth concrete-products self link\", function() {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.included[5].links.self).to.eql(pm.environment.get(\"url\") + \"/concrete-products/\" + (\"265\"));",
											"// });",
											"// pm.test(\"Has include the sixth type contains concrete-product-image-sets  returned\", function() {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.included[5].relationships[\"concrete-product-image-sets\"].data[0].type).to.eql(\"concrete-product-image-sets\");",
											"//     pm.expect(jsonData.included[5].relationships[\"concrete-product-image-sets\"].data[0].id).to.eql(\"265\");  ",
											"// });",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_3product}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_3product}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get abstract with 3 concrete and included image sets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4a5ff0b-b030-4b86-a833-09687fb06796",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200); // verify the correct stastus code = 200 is fine",
											"});",
											"pm.test(\"Has correct type and ID  returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.type).to.eql(\"abstract-products\"); // re-check the correct type in the response ",
											"    pm.expect(jsonData.data.id).to.eql(\"184\");",
											"});",
											"",
											"pm.test(\"Has abstract description returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.sku).to.eql(\"184\");",
											"    pm.expect(jsonData.data.attributes.name).to.be.eql(\"Canon LEGRIA HF G25\"); ",
											"    pm.expect(jsonData.data.attributes.description).to.be.a(\"string\"); // ",
											"});",
											"pm.test(\"Has abstract correct attribute Map returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.attributeMap.attribute_variants[\"internal_storage_capacity:8 GB\"].id_product_concrete).to.eql(263);",
											"    pm.expect(jsonData.data.attributes.attributeMap.attribute_variants[\"internal_storage_capacity:16 GB\"].id_product_concrete).to.eql(264);",
											"    pm.expect(jsonData.data.attributes.attributeMap.attribute_variants[\"internal_storage_capacity:32 GB\"].id_product_concrete).to.eql(265); // veirfy the correct id of concrete prroduct ",
											"});",
											"pm.test(\"Has product concrete ids returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.attributeMap.product_concrete_ids[\"184_17365820\"]).to.eql(263); ",
											"    pm.expect(jsonData.data.attributes.attributeMap.product_concrete_ids[\"184_17494387\"]).to.eql(264);",
											"    pm.expect(jsonData.data.attributes.attributeMap.product_concrete_ids[\"184_17560323\"]).to.eql(265);",
											"});",
											"pm.test(\"Has self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.links.self).to.eql(pm.environment.get(\"url\") + \"/abstract-products/\" +  pm.environment.get(\"abstract_id_with_3product\"));",
											"});",
											"pm.test(\"Has relationships concrete-products returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[0].type).to.eql(\"concrete-products\"); ",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[0].id).to.eql(\"263\");",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[1].type).to.eql(\"concrete-products\"); ",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[1].id).to.eql(\"264\");",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[2].type).to.eql(\"concrete-products\");",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[2].id).to.eql(\"265\");",
											"});",
											"",
											"pm.test(\"Has relationships abstract-product-image-sets returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-image-sets\"].data[0].type).to.eql(\"abstract-product-image-sets\"); ",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-image-sets\"].data[0].id).to.eql(\"184\");",
											"});",
											"pm.test(\"Has include abstract-product-image-sets type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[0].type).to.eql(\"abstract-product-image-sets\");",
											"    pm.expect(jsonData.included[0].id).to.eql(\"184\");",
											"});",
											"pm.test(\"Has include concrete-products self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[0].links.self).to.eql(pm.environment.get(\"url\") + \"/abstract-products/\" + (\"184\") + \"/abstract-product-image-sets\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_3product}}?include=abstract-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_3product}}"
									],
									"query": [
										{
											"key": "include",
											"value": "abstract-product-image-sets"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get abstract with 3 concrete and included product availability",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4676a3c9-5e72-409c-87b5-aa9f3f293157",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200); // verify the correct stastus code = 200 is fine",
											"});",
											"pm.test(\"Has correct type and ID  returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.type).to.eql(\"abstract-products\"); // re-check the correct type in the response ",
											"    pm.expect(jsonData.data.id).to.eql(\"184\");",
											"});",
											"",
											"pm.test(\"Has abstract description returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.sku).to.eql(\"184\");",
											"    pm.expect(jsonData.data.attributes.name).to.be.eql(\"Canon LEGRIA HF G25\"); ",
											"    pm.expect(jsonData.data.attributes.description).to.be.a(\"string\"); // ",
											"});",
											"pm.test(\"Has abstract correct attribute Map returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.attributeMap.attribute_variants[\"internal_storage_capacity:8 GB\"].id_product_concrete).to.eql(263);",
											"    pm.expect(jsonData.data.attributes.attributeMap.attribute_variants[\"internal_storage_capacity:16 GB\"].id_product_concrete).to.eql(264);",
											"    pm.expect(jsonData.data.attributes.attributeMap.attribute_variants[\"internal_storage_capacity:32 GB\"].id_product_concrete).to.eql(265); // veirfy the correct id of concrete prroduct ",
											"});",
											"pm.test(\"Has product concrete ids returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.attributeMap.product_concrete_ids[\"184_17365820\"]).to.eql(263); ",
											"    pm.expect(jsonData.data.attributes.attributeMap.product_concrete_ids[\"184_17494387\"]).to.eql(264);",
											"    pm.expect(jsonData.data.attributes.attributeMap.product_concrete_ids[\"184_17560323\"]).to.eql(265);",
											"});",
											"pm.test(\"Has self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.links.self).to.eql(pm.environment.get(\"url\") + \"/abstract-products/\" +  pm.environment.get(\"abstract_id_with_3product\"));",
											"});",
											"pm.test(\"Has relationships concrete-products returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[0].type).to.eql(\"concrete-products\"); ",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[0].id).to.eql(\"263\");",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[1].type).to.eql(\"concrete-products\"); ",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[1].id).to.eql(\"264\");",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[2].type).to.eql(\"concrete-products\");",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[2].id).to.eql(\"265\");",
											"});",
											"pm.test(\"Has relationships abstract-product-availabilities returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-availabilities\"].data[0].type).to.eql(\"abstract-product-availabilities\"); ",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-availabilities\"].data[0].id).to.eql(\"184\");",
											"});",
											"pm.test(\"Has include abstract-product-availabilities type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[0].type).to.eql(\"abstract-product-availabilities\");",
											"    pm.expect(jsonData.included[0].id).to.eql(\"184\");",
											"});",
											"pm.test(\"Has include concrete-products self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[0].links.self).to.eql(pm.environment.get(\"url\") + \"/abstract-products/\" + (\"184\") + \"/abstract-product-availabilities\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_3product}}?include=abstract-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_3product}}"
									],
									"query": [
										{
											"key": "include",
											"value": "abstract-product-availabilities"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract information by sku with 1 concrete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c50e40fa-9a19-4f22-93c6-445766cd65c7",
										"type": "text/javascript",
										"exec": [
											"// Data - Product Abstract Level",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200); // verify the correct stastus code = 200 is fine",
											"});",
											"pm.test(\"Has abstract-products type, ID returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.type).to.eql(\"abstract-products\"); // re-check the correct type and ID of abstarct product  in the response ",
											"    pm.expect(jsonData.data.id).to.eql(\"209\");",
											"});",
											"pm.test(\"Has correct sku, name and description returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.sku).to.eql(\"209\");",
											"    pm.expect(jsonData.data.attributes.name).to.eql(\"Toshiba CAMILEO S20\");",
											"    pm.expect(jsonData.data.attributes.description).to.be.a(\"string\");",
											"});",
											"pm.test(\"Has correct values for prdocut attributes returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.attributes.focus_adjustment).to.eql(\"Auto\");",
											"    pm.expect(jsonData.data.attributes.attributes.weight).to.eql(\"118 g\");",
											"    pm.expect(jsonData.data.attributes.attributes.total_megapixels).to.eql(\"8 MP\");",
											"    pm.expect(jsonData.data.attributes.attributes.memory_slots).to.eql(\"1\");",
											"    pm.expect(jsonData.data.attributes.attributes.brand).to.eql(\"Toshiba\");",
											"    pm.expect(jsonData.data.attributes.attributes.color).to.eql(\"Grey\"); // this test verify that all attributes are correct for absract product ",
											"});",
											"pm.test(\"Has super attributes definition returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.superAttributesDefinition).to.contain(\"total_megapixels\", \"color\"); // verify the all super Attributes Definition of absract product in the response ",
											"});",
											"pm.test(\"Has attribute mape turned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.attributeMap.attribute_variants).to.eql([]);",
											"    pm.expect(jsonData.data.attributes.attributeMap.super_attributes).to.eql([]);",
											"    pm.expect(jsonData.data.attributes.attributeMap.product_concrete_ids[\"209_12554247\"]).to.eql(291); // verify the correct attribute Map",
											"});",
											"pm.test(\"Has meta title data returned\", function() { ",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.metaTitle).to.eql(\"Toshiba CAMILEO S20\");",
											"    pm.expect(jsonData.data.attributes.metaKeywords).to.eql(\"Toshiba,Smart Electronics\");",
											"    pm.expect(jsonData.data.attributes.metaKeywords).to.be.a(\"string\"); // here check all MetaTitle in response ",
											"});",
											"",
											"pm.test(\"Has relationships concrete-products   returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[0].type).to.eql(\"concrete-products\");",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[0].id).to.eql(\"209_12554247\"); // verify the concrete-products type and ID in the relationships",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.links.self).to.eql(pm.environment.get(\"url\") + \"/abstract-products/\" + pm.environment.get(\"abstract_sku_with_1product\")); // verify the  self link of abstract product ",
											"});",
											"",
											"pm.test(\"Has relationships contain correct id concrete-products type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[0].type).to.eql(\"concrete-products\");",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[0].id).to.eql(\"209_12554247\"); // here verify the correct type and id of concrete product in the relationships",
											"});",
											"",
											"pm.test(\"Has relationships contaion abstract-product-image-sets returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-image-sets\"].data[0].type).to.eql(\"abstract-product-image-sets\");",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-image-sets\"].data[0].id).to.eql(\"209\"); // here verify that in relations we have the abstract-product-image-sets with correct type and id ",
											"});",
											"pm.test(\"Has relationships contaion abstract-product-availabilities returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-availabilities\"].data[0].type).to.eql(\"abstract-product-availabilities\");",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-availabilities\"].data[0].id).to.eql(\"209\"); // here verify that in relations we have the abstract-product-availabilities with correct type and id ",
											"});",
											"",
											"// Data - Included level ",
											"",
											"pm.test(\"Has included 0  concrete-product-image-sets returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[0].type).to.eql(\"concrete-product-image-sets\");",
											"    pm.expect(jsonData.included[0].id).to.eql(\"209_12554247\");",
											"}); ",
											"",
											"pm.test(\"Has included 0 attributes in concrete-product-image-sets\", function (){",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[0].attributes.name).to.eql(\"default\");",
											"    pm.expect(jsonData.included[0].attributes.images[0].externalUrlLarge).to.eql(\"//images.icecat.biz/img/norm/high/15743_12554247-9579.jpg\");",
											"    pm.expect(jsonData.included[0].attributes.images[0].externalUrlSmall).to.eql(\"//images.icecat.biz/img/norm/medium/15743_12554247-9579.jpg\"); ",
											"}); ",
											"",
											"pm.test(\"Has included 0 self link concrete-product-image-sets\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[0].links.self).to.eql(pm.environment.get(\"url\") + \"/concrete-products/\" + \"209_12554247\" + \"/concrete-product-image-sets\");",
											"});",
											"",
											"pm.test(\"Has included 1 type, id and info of availabilities returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[1].type).to.eql(\"concrete-product-availabilities\"); ",
											"    pm.expect(jsonData.included[1].id).to.eql(\"209_12554247\");",
											"    pm.expect(jsonData.included[1].attributes.availability).to.eql(true); ",
											"    pm.expect(jsonData.included[1].attributes.quantity).to.eql(10);",
											"    pm.expect(jsonData.included[1].attributes.isNeverOutOfStock).to.eql(true);",
											"});",
											"",
											"pm.test(\"Has included 1 self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[1].links.self).to.eql(pm.environment.get(\"url\") + \"/concrete-products/\" + \"209_12554247\" + \"/concrete-product-availabilities\");",
											"}); ",
											"",
											"pm.test(\"Has included 2 concrete-products type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[2].type).to.eql(\"concrete-products\");",
											"    pm.expect(jsonData.included[2].id).to.eql(\"209_12554247\");",
											"});",
											"",
											"pm.test(\"Has included 2 concrete-products type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[2].attributes.sku).to.eql(\"209_12554247\");",
											"    pm.expect(jsonData.included[2].attributes.name).to.eql(\"Toshiba CAMILEO S20\");",
											"    pm.expect(jsonData.included[2].attributes.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has included 2 concrete-products description returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[2].attributes.attributes.focus_adjustment).to.eql(\"Auto\"); ",
											"    pm.expect(jsonData.included[2].attributes.attributes.weight).to.eql(\"118 g\");",
											"    pm.expect(jsonData.included[2].attributes.attributes.total_megapixels).to.eql(\"8 MP\");",
											"    pm.expect(jsonData.included[2].attributes.attributes.memory_slots).to.eql(\"1\");",
											"    pm.expect(jsonData.included[2].attributes.attributes.brand).to.eql(\"Toshiba\");",
											"    pm.expect(jsonData.included[2].attributes.attributes.color).to.eql(\"Grey\");",
											"});",
											"",
											"pm.test(\"Has included 2 super attributes definition returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[2].attributes.superAttributesDefinition).to.be.contain(\"total_megapixels\", \"color\"); ",
											"});",
											"",
											"pm.test(\"Has included 2 meta data returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[2].attributes.metaTitle).to.eql(\"Toshiba CAMILEO S20\");",
											"    pm.expect(jsonData.included[2].attributes.metaKeywords).to.eql(\"Toshiba,Smart Electronics\");",
											"    pm.expect(jsonData.included[2].attributes.metaDescription).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has included 2 concrete-products self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[2].links.self).to.eql(pm.environment.get(\"url\") + \"/concrete-products/\" + \"209_12554247\"); ",
											"});",
											"",
											"pm.test(\"Has included 2 - relations  concrete-product-image-sets  returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[2].relationships[\"concrete-product-image-sets\"].data[0].type).to.eql(\"concrete-product-image-sets\");",
											"    pm.expect(jsonData.included[2].relationships[\"concrete-product-image-sets\"].data[0].id).to.eql(\"\");",
											"});",
											"",
											"pm.test(\"Has included 2 - relations concrete-product-availabilities returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[2].relationships[\"concrete-product-availabilities\"].data[0].type).to.eql(\"concrete-product-availabilities\");",
											"    pm.expect(jsonData.included[2].relationships[\"concrete-product-availabilities\"].data[0].id).to.eql(\"209_12554247\");",
											"});",
											"",
											"pm.test(\"Has included 3 abstract-product-image-sets returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[3].type).to.eql(\"abstract-product-image-sets\");",
											"   // pm.expect(jsonData.included[3].id).to.eql(\"\");",
											"    pm.expect(jsonData.included[3].attributes.name).to.eql(\"default\");",
											"    pm.expect(jsonData.included[3].attributes.images[0].externalUrlLarge).to.eql(\"//images.icecat.biz/img/norm/high/15743_12554247-9579.jpg\");",
											"    pm.expect(jsonData.included[3].attributes.images[0].externalUrlSmall).to.eql(\"//images.icecat.biz/img/norm/medium/15743_12554247-9579.jpg\");",
											"});",
											"",
											"pm.test(\"Has included 3 abstract-product-image-sets self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[3].links.self).to.eql(pm.environment.get(\"url\") + \"/abstract-products/\" + \"sku\" + \"/abstract-product-image-sets\"); ",
											"});",
											"",
											"pm.test(\"Has included 4 abstract-product-availabilities returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[4].type).to.eql(\"abstract-product-availabilities\");",
											"    pm.expect(jsonData.included[4].id).to.eql(\"\");",
											"    pm.expect(jsonData.included[4].attributes.availability).to.eql(true);  ",
											"    pm.expect(jsonData.included[4].attributes.quantity).to.eql(10);",
											"});",
											"",
											"pm.test(\"Has included 4 abstract-product-availabilities self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[4].links.self).to.eql(pm.environment.get(\"url\") + \"/abstract-products/\" + \"sku\" + \"/abstract-product-availabilities\"); ",
											"});",
											"",
											"pm.test(\"Has included 5 tax-sets returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[5].type).to.eql(\"tax-sets\");",
											"    pm.expect(jsonData.included[5].id).to.eql(\"\");",
											"    pm.expect(jsonData.included[5].attributes.name).to.eql(\"Smart Electronics\");",
											"});",
											"",
											"pm.test(\"Has included 5 tax-sets self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[5].links.self).to.eql(pm.environment.get(\"url\") + \"/tax-sets\" ); ",
											"});",
											"",
											"pm.test(\"Has included 6 abstract-product-prices returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[6].type).to.eql(\"abstract-product-prices\");",
											"    pm.expect(jsonData.included[6].id).to.eql(\"209\");",
											"});",
											"",
											"pm.test(\"Has included 6 prices returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[6].attributes.prices.EUR.GROSS_MODE.DEFAULT).to.eql(19568);",
											"    pm.expect(jsonData.included[6].attributes.prices.EUR.NET_MODE.DEFAULT).to.eql(17611);",
											"});",
											"",
											"pm.test(\"Has included 6 abstract-product-prices self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[6].links.self).to.eql(pm.environment.get(\"url\") + \"/abstract-product-prices\" + \"/209\" ); ",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"// pm.test(\"Has include level 1 the fourth abstract-product-availabilities type returned\", function() {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.included[3].type).to.eql(\"abstract-product-availabilities\")",
											"//     pm.expect(jsonData.included[3].id).to.eql(\"209\") // here veirfy the correct information for the fourth abstract-product-availabilities type",
											"// });",
											"// pm.test(\"Has included level 1 availability returned\", function() {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.included[3].attributes.availability).to.eql(true)",
											"//     pm.expect(jsonData.included[3].attributes.quantity).to.eql(10) // here verify the correct availability for abstract-product-availabilities",
											"// }); ",
											"// pm.test(\"Has included level 1 abstract-product-availabilities contains self link\", function() {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.included[3].links.self).to.eql(pm.environment.get(\"url\") + \"/abstract-products/\" + (\"209\") + \"/abstract-product-availabilities\");  //verify the  abstract-product-availabilities for abstarct prodcut ID 209",
											"// });",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get abstract with 1 concrete and included image sets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f94fb142-0857-4be4-a765-7b1b9fcb7bd4",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200); // verify the correct stastus code = 200 is fine",
											"});",
											"pm.test(\"Has abstract-products type, ID returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.type).to.eql(\"abstract-products\"); // re-check the correct type and ID of abstarct product  in the response ",
											"    pm.expect(jsonData.data.id).to.eql(\"209\");",
											"});",
											"pm.test(\"Has abstract-products contains correct sku, name and description returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.sku).to.eql(\"209\");",
											"    pm.expect(jsonData.data.attributes.name).to.eql(\"Toshiba CAMILEO S20\");",
											"    pm.expect(jsonData.data.attributes.description).to.be.a(\"string\");",
											"});",
											"pm.test(\"Has abstract-products contains correct values for prdocut attributes returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.attributes.focus_adjustment).to.eql(\"Auto\");",
											"    pm.expect(jsonData.data.attributes.attributes.weight).to.eql(\"118 g\");",
											"    pm.expect(jsonData.data.attributes.attributes.total_megapixels).to.eql(\"8 MP\");",
											"    pm.expect(jsonData.data.attributes.attributes.memory_slots).to.eql(\"1\");",
											"    pm.expect(jsonData.data.attributes.attributes.brand).to.eql(\"Toshiba\");",
											"    pm.expect(jsonData.data.attributes.attributes.color).to.eql(\"Grey\"); // this test verify that all attributes are correct for absract product ",
											"});",
											"pm.test(\"Has abstract-products contains super Attributes Definition returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.superAttributesDefinition).to.contain(\"total_megapixels\", \"color\"); // verify the all super Attributes Definition of absract product in the response ",
											"});",
											"pm.test(\"Has abstract-products contains attribute Mapre turned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.attributeMap.attribute_variants).to.eql([]);",
											"    pm.expect(jsonData.data.attributes.attributeMap.super_attributes).to.eql([]);",
											"    pm.expect(jsonData.data.attributes.attributeMap.product_concrete_ids[\"209_12554247\"]).to.eql(291); // verify the correct attribute Map",
											"});",
											"pm.test(\"Has abstract-products contains MetaTitle data returned\", function() { ",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.metaTitle).to.eql(\"Toshiba CAMILEO S20\");",
											"    pm.expect(jsonData.data.attributes.metaKeywords).to.eql(\"Toshiba,Smart Electronics\");",
											"    pm.expect(jsonData.data.attributes.metaKeywords).to.be.a(\"string\"); // here check all MetaTitle in response ",
											"});",
											"pm.test(\"Has abstract-products contains self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.links.self).to.eql(pm.environment.get(\"url\") + \"/abstract-products/\" + pm.environment.get(\"abstract_id_with_1product\")); // verify the  self link of abstract product ",
											"});",
											"pm.test(\"Has relationships contains correct type and ID of concrete-products type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[0].type).to.eql(\"concrete-products\");",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[0].id).to.eql(\"291\"); // here verify the correct type and id of concrete product in the relationships",
											"});",
											"pm.test(\"Has relationships contaions correct information of abstract-product-image-sets returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-image-sets\"].data[0].type).to.eql(\"abstract-product-image-sets\");",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-image-sets\"].data[0].id).to.eql(\"209\"); // here verify that in relations we have the abstract-product-image-sets with correct type and id ",
											"});",
											"pm.test(\"Has included level 1 abstract-product-image-sets contains type and id returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[0].type).to.eql(\"abstract-product-image-sets\"); //",
											"    pm.expect(jsonData.included[0].id).to.eql(\"209\");",
											"});",
											"",
											"pm.test(\"Has included level 1 abstract-product-image-sets contains correct information returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[0].attributes.name).to.eql(\"default\"); ",
											"    pm.expect(jsonData.included[0].attributes.images[0].externalUrlLarge).to.eql(\"//images.icecat.biz/img/norm/high/15743_12554247-9579.jpg\");",
											"    pm.expect(jsonData.included[0].attributes.images[0].externalUrlSmall).to.eql(\"//images.icecat.biz/img/norm/medium/15743_12554247-9579.jpg\");",
											"});",
											"pm.test(\"Has included level 1 abstract-product-image-sets contains self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[0].links.self).to.eql(pm.environment.get(\"url\") + \"/abstract-products/\" + pm.environment.get(\"abstract_id_with_1product\") + \"/abstract-product-image-sets\"); // ",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}?include=abstract-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}"
									],
									"query": [
										{
											"key": "include",
											"value": "abstract-product-image-sets"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get abstract with 1 concrete and included abstract availability",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54e62a26-8c7c-471c-abaa-a9d96b2b5750",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200); // verify the correct stastus code = 200 is fine",
											"});",
											"pm.test(\"Has abstract-products type, ID returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.type).to.eql(\"abstract-products\"); // re-check the correct type and ID of abstarct product  in the response ",
											"    pm.expect(jsonData.data.id).to.eql(\"209\");",
											"});",
											"pm.test(\"Has abstract-products contains correct sku, name and description returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.sku).to.eql(\"209\");",
											"    pm.expect(jsonData.data.attributes.name).to.eql(\"Toshiba CAMILEO S20\");",
											"    pm.expect(jsonData.data.attributes.description).to.be.a(\"string\");",
											"});",
											"pm.test(\"Has abstract-products contains correct values for prdocut attributes returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.attributes.focus_adjustment).to.eql(\"Auto\");",
											"    pm.expect(jsonData.data.attributes.attributes.weight).to.eql(\"118 g\");",
											"    pm.expect(jsonData.data.attributes.attributes.total_megapixels).to.eql(\"8 MP\");",
											"    pm.expect(jsonData.data.attributes.attributes.memory_slots).to.eql(\"1\");",
											"    pm.expect(jsonData.data.attributes.attributes.brand).to.eql(\"Toshiba\");",
											"    pm.expect(jsonData.data.attributes.attributes.color).to.eql(\"Grey\"); // this test verify that all attributes are correct for absract product ",
											"});",
											"pm.test(\"Has abstract-products contains super Attributes Definition returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.superAttributesDefinition).to.contain(\"total_megapixels\", \"color\"); // verify the all super Attributes Definition of absract product in the response ",
											"});",
											"pm.test(\"Has abstract-products contains attribute Mapre turned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.attributeMap.attribute_variants).to.eql([]);",
											"    pm.expect(jsonData.data.attributes.attributeMap.super_attributes).to.eql([]);",
											"    pm.expect(jsonData.data.attributes.attributeMap.product_concrete_ids[\"209_12554247\"]).to.eql(291); // verify the correct attribute Map",
											"});",
											"pm.test(\"Has abstract-products contains MetaTitle data returned\", function() { ",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.metaTitle).to.eql(\"Toshiba CAMILEO S20\");",
											"    pm.expect(jsonData.data.attributes.metaKeywords).to.eql(\"Toshiba,Smart Electronics\");",
											"    pm.expect(jsonData.data.attributes.metaKeywords).to.be.a(\"string\"); // here check all MetaTitle in response ",
											"});",
											"pm.test(\"Has abstract-products contains self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.links.self).to.eql(pm.environment.get(\"url\") + \"/abstract-products/\" + pm.environment.get(\"abstract_id_with_1product\")); // verify the  self link of abstract product ",
											"});",
											"pm.test(\"Has relationships contains correct type and ID of concrete-products type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[0].type).to.eql(\"concrete-products\");",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[0].id).to.eql(\"291\"); // here verify the correct type and id of concrete product in the relationships",
											"});",
											"pm.test(\"Has relationships contaions correct information of abstract-product-image-sets returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-availabilities\"].data[0].type).to.eql(\"abstract-product-availabilities\");",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-availabilities\"].data[0].id).to.eql(\"209\"); // here verify that in relations we have the abstract-product-image-sets with correct type and id ",
											"});",
											"",
											"// Data level Included ",
											"",
											"pm.test(\"Has included level 1 abstract-product-availabilities contains type and id returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[0].type).to.eql(\"abstract-product-availabilities\"); //",
											"    pm.expect(jsonData.included[0].id).to.eql(\"209\");",
											"});",
											"",
											"pm.test(\"Has included level 1 abstract-product-availabilities contains correct information returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[0].attributes.availability).to.eql(true);",
											"    pm.expect(jsonData.included[0].attributes.quantity).to.eql(10);",
											"});",
											"pm.test(\"Has included level 1 abstract-product-image-sets contains self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[0].links.self).to.eql(pm.environment.get(\"url\") + \"/abstract-products/\" + pm.environment.get(\"abstract_id_with_1product\") + \"/abstract-product-availabilities\"); // ",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}?include=abstract-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}"
									],
									"query": [
										{
											"key": "include",
											"value": "abstract-product-availabilities"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get abstract information using special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e2f4fbc-7742-4a71-b6d2-9dfa8f440fe1",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Error code is 302\", function() {",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"301\");",
											"});",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Can`t find abstract product\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/!@#$%^&*()",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"!@"
									],
									"hash": "$%^&*()"
								}
							},
							"response": []
						},
						{
							"name": "Get abstract information using a lot of spaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a5611894-5e77-44cc-8b30-efcebac60627",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Error code is 302\", function() {",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"302\");",
											"});",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Not Found\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/products-abstract/",
									"host": [
										"{{url}}"
									],
									"path": [
										"products-abstract",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get abstract information using wrong method POST",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a5611894-5e77-44cc-8b30-efcebac60627",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Error code is 302\", function() {",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"302\");",
											"});",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Not Found\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{ \"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/products-abstract/{{abstract_sku_with_1product}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"products-abstract",
										"{{abstract_sku_with_1product}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get abstract information using wrong method PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a5611894-5e77-44cc-8b30-efcebac60627",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Error code is 302\", function() {",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"302\");",
											"});",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Not Found\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{ \"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/products-abstract/{{abstract_sku_with_1product}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"products-abstract",
										"{{abstract_sku_with_1product}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract information wrong method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79996552-0298-4493-8798-860dfb475c57",
										"type": "text/javascript",
										"exec": [
											"",
											"pm.test(\"Has abstract id  returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.id).to.eql(\"184\"); // re-creck the  in the response ",
											"});",
											"",
											"pm.test(\"Has correct abstract sku returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    var id = pm.environment.get(\"abstract_sku\");",
											"    pm.expect(jsonData.data.id).to.eql(id);",
											"});",
											"",
											"",
											"pm.test(\"Has self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.links.self).to.eql(pm.environment.get(\"url\") + \"/products-abstract/\" + \"184\");",
											"});",
											"",
											"",
											"// we need to add the following test cases such as",
											"// (verify all arrays in the respons and will check id_product_concrete)"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/products-abstract/{{abstract_sku_with_1product}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"products-abstract",
										"{{abstract_sku_with_1product}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Request the concrete product ",
					"item": [
						{
							"name": "Request concrete information using SKU",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb11d609-4f92-4689-abf7-0eab79a604a5",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200); // verify the correct stastus code = 200 is fine",
											"});",
											"",
											"pm.test(\"Has correct type and ID returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.type).to.eql(\"concrete-products\");// re-check the correct type in the response ",
											"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"concrete_sku\"));",
											"});",
											"",
											"pm.test(\"Has description of concrete-products type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.sku).to.be.eql(\"177_25913296\");",
											"    pm.expect(jsonData.data.attributes.name).to.be.eql(\"Samsung Galaxy Tab Active 8.0 32 GB\");",
											"    pm.expect(jsonData.data.attributes.description).to.be.a(\"string\");// verify all description of concrete-products",
											"});",
											"",
											"pm.test(\"Has attributes of concrete-products type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.attributes.storage_media).to.be.eql(\"flash\");",
											"    pm.expect(jsonData.data.attributes.attributes.processor_frequency).to.be.eql(\"1.2 GHz\");",
											"    pm.expect(jsonData.data.attributes.attributes.display_diagonal).to.be.eql(\"20.3 cm\");",
											"    pm.expect(jsonData.data.attributes.attributes.aspect_ratio).to.be.eql(\"16:09\");",
											"    pm.expect(jsonData.data.attributes.attributes.brand).to.be.eql(\"Samsung\");",
											"    pm.expect(jsonData.data.attributes.attributes.internal_storage_capacity).to.be.eql(\"32 GB\");// verify all attributes of concrete-products",
											"});",
											"",
											"pm.test(\"Has super Attributes Definition of concrete-products type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.superAttributesDefinition).to.be.contain(\"storage_media\", \"processor_frequency\", \"internal_storage_capacity\");",
											"});",
											"",
											"pm.test(\"Has meta data returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.metaTitle).to.eql(\"Samsung Galaxy Tab Active 8.0 8 GB\");// re-check the correct type in the response ",
											"    pm.expect(jsonData.data.attributes.metaKeywords).to.eql(\"Samsung,Communication Electronics\");",
											"    pm.expect(jsonData.data.attributes.metaDescription).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has concrete-products self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.links.self).to.eql(pm.environment.get(\"url\") + \"/concrete-products/\" + pm.environment.get(\"concrete_sku\")); ",
											"}); ",
											"",
											"pm.test(\"Has relationships concrete-product-image-sets type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.relationships[\"concrete-product-image-sets\"].data[0].type).to.be.eql(\"concrete-product-image-sets\");",
											"    pm.expect(jsonData.data.relationships[\"concrete-product-image-sets\"].data[0].id).to.be.eql(pm.environment.get(\"concrete_sku\"));",
											"});",
											"",
											"pm.test(\"Has relationships concrete-product-availabilities type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.relationships[\"concrete-product-availabilities\"].data[0].type).to.be.eql(\"concrete-product-availabilities\");",
											"    pm.expect(jsonData.data.relationships[\"concrete-product-availabilities\"].data[0].id).to.be.eql(pm.environment.get(\"concrete_sku\"));",
											"});",
											"",
											"// Included level",
											"",
											"pm.test(\"Has included concrete-product-image-sets type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[0].type).to.be.eql(\"concrete-product-image-sets\");",
											"    pm.expect(jsonData.included[0].id).to.be.eql(pm.environment.get(\"concrete_sku\"));",
											"});",
											"",
											"pm.test(\"Has included concrete-product-image-sets attributes returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[0].attributes.name).to.be.eql(\"default\");",
											"    pm.expect(jsonData.included[0].attributes.images[0].externalUrlLarge).to.be.eql(\"//images.icecat.biz/img/gallery/29554217_7377.jpg\");",
											"     pm.expect(jsonData.included[0].attributes.images[0].externalUrlSmall).to.be.eql(\"//images.icecat.biz/img/gallery_mediums/29554217_7377.jpg\");",
											"});",
											"",
											"pm.test(\"Has included concrete-product-image-sets self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[0].links.self).to.eql(pm.environment.get(\"url\") + \"/concrete-products/\" + pm.environment.get(\"concrete_sku\") + \"/concrete-product-image-sets\"); ",
											"});",
											"",
											"pm.test(\"Has included concrete-product-availabilities type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[1].type).to.be.eql(\"concrete-product-availabilities\");",
											"    pm.expect(jsonData.included[1].id).to.be.eql(pm.environment.get(\"concrete_sku\"));",
											"});",
											"",
											"pm.test(\"Has included availabilities description type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[1].attributes.availability).to.be.eql(true);",
											"    pm.expect(jsonData.included[1].attributes.quantity).to.be.eql(20);",
											"    pm.expect(jsonData.included[1].attributes.isNeverOutOfStock).to.be.eql(false);",
											"});",
											"",
											"pm.test(\"Has included concrete-product-availabilities self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[1].links.self).to.eql(pm.environment.get(\"url\") + \"/concrete-products/\" + pm.environment.get(\"concrete_sku\") + \"/concrete-product-availabilities\"); ",
											"});",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concrete_sku}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concrete_sku}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request concrete with included availability",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f0524e9-058b-449a-8e97-4320c27a4c6e",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200); // verify the correct stastus code = 200 is fine",
											"});",
											"",
											"pm.test(\"Has correct type and ID returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.type).to.eql(\"concrete-products\");// re-check the correct type in the response ",
											"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"concrete_sku\"));",
											"});",
											"",
											"pm.test(\"Has description of concrete-products type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.sku).to.be.eql(\"177_25913296\");",
											"    pm.expect(jsonData.data.attributes.name).to.be.eql(\"Samsung Galaxy Tab Active 8.0 32 GB\");",
											"    pm.expect(jsonData.data.attributes.description).to.be.a(\"string\");// verify all description of concrete-products",
											"});",
											"",
											"pm.test(\"Has attributes of concrete-products type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.attributes.storage_media).to.be.eql(\"flash\");",
											"    pm.expect(jsonData.data.attributes.attributes.processor_frequency).to.be.eql(\"1.2 GHz\");",
											"    pm.expect(jsonData.data.attributes.attributes.display_diagonal).to.be.eql(\"20.3 cm\");",
											"    pm.expect(jsonData.data.attributes.attributes.aspect_ratio).to.be.eql(\"16:09\");",
											"    pm.expect(jsonData.data.attributes.attributes.brand).to.be.eql(\"Samsung\");",
											"    pm.expect(jsonData.data.attributes.attributes.internal_storage_capacity).to.be.eql(\"32 GB\");// verify all attributes of concrete-products",
											"});",
											"",
											"pm.test(\"Has super attributes definition of concrete-products type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.superAttributesDefinition).to.be.contain(\"storage_media\", \"processor_frequency\", \"internal_storage_capacity\");",
											"});",
											"",
											"pm.test(\"Has meta data returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.metaTitle).to.eql(\"Samsung Galaxy Tab Active 8.0 8 GB\");// re-check the correct type in the response ",
											"    pm.expect(jsonData.data.attributes.metaKeywords).to.eql(\"Samsung,Communication Electronics\");",
											"    pm.expect(jsonData.data.attributes.metaDescription).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has concrete-products self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.links.self).to.eql(pm.environment.get(\"url\") + \"/concrete-products/\" + pm.environment.get(\"concrete_sku\")); ",
											"}); ",
											"pm.test(\"Has relationships concrete-product-image-sets type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.relationships[\"concrete-product-image-sets\"].data[0].type).to.be.eql(\"concrete-product-image-sets\");",
											"    pm.expect(jsonData.data.relationships[\"concrete-product-image-sets\"].data[0].id).to.be.eql(pm.environment.get(\"concrete_sku\"));",
											"});",
											"",
											"// Included Level",
											"",
											"pm.test(\"Has included concrete-product-image-sets type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[0].type).to.be.eql(\"concrete-product-image-sets\");",
											"    pm.expect(jsonData.included[0].id).to.be.eql(pm.environment.get(\"concrete_sku\"));",
											"});",
											"",
											"pm.test(\"Has included concrete-product-image-sets attributes returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[0].attributes.name).to.be.eql(\"default\");",
											"    pm.expect(jsonData.included[0].attributes.images[0].externalUrlLarge).to.be.eql(\"//images.icecat.biz/img/gallery/29554217_7377.jpg\");",
											"     pm.expect(jsonData.included[0].attributes.images[0].externalUrlSmall).to.be.eql(\"//images.icecat.biz/img/gallery_mediums/29554217_7377.jpg\");",
											"});",
											"",
											"pm.test(\"Has included concrete-product-image-sets self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[0].links.self).to.eql(pm.environment.get(\"url\") + \"/concrete-products/\" + pm.environment.get(\"concrete_sku\") + \"/concrete-product-image-sets\"); ",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concrete_sku}}?include=concrete-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concrete_sku}}"
									],
									"query": [
										{
											"key": "include",
											"value": "concrete-product-image-sets"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Request concrete with included availabilities",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "beeca058-a4b0-4dec-a6d7-5df6a9917ae5",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200); // verify the correct stastus code = 200 is fine",
											"});",
											"",
											"pm.test(\"Has correct type and ID returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.type).to.eql(\"concrete-products\");// re-check the correct type in the response ",
											"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"concrete_sku\"));",
											"});",
											"",
											"pm.test(\"Has description of concrete-products type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.sku).to.be.eql(\"177_25913296\");",
											"    pm.expect(jsonData.data.attributes.name).to.be.eql(\"Samsung Galaxy Tab Active 8.0 32 GB\");",
											"    pm.expect(jsonData.data.attributes.description).to.be.a(\"string\");// verify all description of concrete-products",
											"});",
											"",
											"pm.test(\"Has attributes of concrete-products type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.attributes.storage_media).to.be.eql(\"flash\");",
											"    pm.expect(jsonData.data.attributes.attributes.processor_frequency).to.be.eql(\"1.2 GHz\");",
											"    pm.expect(jsonData.data.attributes.attributes.display_diagonal).to.be.eql(\"20.3 cm\");",
											"    pm.expect(jsonData.data.attributes.attributes.aspect_ratio).to.be.eql(\"16:09\");",
											"    pm.expect(jsonData.data.attributes.attributes.brand).to.be.eql(\"Samsung\");",
											"    pm.expect(jsonData.data.attributes.attributes.internal_storage_capacity).to.be.eql(\"32 GB\");// verify all attributes of concrete-products",
											"});",
											"",
											"pm.test(\"Has super Attributes Definition of concrete-products type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.superAttributesDefinition).to.be.contain(\"storage_media\", \"processor_frequency\", \"internal_storage_capacity\");",
											"});",
											"",
											"pm.test(\"Has meta data returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.metaTitle).to.eql(\"Samsung Galaxy Tab Active 8.0 8 GB\");// re-check the correct type in the response ",
											"    pm.expect(jsonData.data.attributes.metaKeywords).to.eql(\"Samsung,Communication Electronics\");",
											"    pm.expect(jsonData.data.attributes.metaDescription).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has concrete-products self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.links.self).to.eql(pm.environment.get(\"url\") + \"/concrete-products/\" + pm.environment.get(\"concrete_sku\")); ",
											"}); ",
											"",
											"pm.test(\"Has relationships concrete-product-availabilities type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.relationships[\"concrete-product-availabilities\"].data[0].type).to.be.eql(\"concrete-product-availabilities\");",
											"    pm.expect(jsonData.data.relationships[\"concrete-product-availabilities\"].data[0].id).to.be.eql(pm.environment.get(\"concrete_sku\"));",
											"});",
											"",
											"// Included level ",
											"",
											"pm.test(\"Has included concrete-product-availabilities type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[0].type).to.be.eql(\"concrete-product-availabilities\");",
											"    pm.expect(jsonData.included[0].id).to.be.eql(pm.environment.get(\"concrete_sku\"));",
											"});",
											"",
											"pm.test(\"Has included availabilities description type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[0].attributes.availability).to.be.eql(true);",
											"    pm.expect(jsonData.included[0].attributes.quantity).to.be.eql(20);",
											"    pm.expect(jsonData.included[0].attributes.isNeverOutOfStock).to.be.eql(false);",
											"});",
											"",
											"pm.test(\"Has included concrete-product-availabilities self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.included[0].links.self).to.eql(pm.environment.get(\"url\") + \"/concrete-products/\" + pm.environment.get(\"concrete_sku\") + \"/concrete-product-availabilities\"); ",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concrete_sku}}?include=concrete-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concrete_sku}}"
									],
									"query": [
										{
											"key": "include",
											"value": "concrete-product-availabilities"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Request concreate information with special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "97df5320-90e7-4a46-95c8-afee79d17323",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Error code is 302\", function() {",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"302\");",
											"});",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Can`t find concrete product\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/!@#$%^&*()",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"!@"
									],
									"hash": "$%^&*()"
								}
							},
							"response": []
						},
						{
							"name": "Request concreate information with a lot of space",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52960da7-220b-419b-9441-48e9971b49b3",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404); // verify the correct status ",
											"});",
											"pm.test(\"Error code is 302\", function() {",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"302\"); // verify the correct code ",
											"});",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Can`t find concrete product\"); // verify the correct message ",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Request concreate information with wrong method POST",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10e21e74-93bc-420b-a4b0-ece755d41b63",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Has correct type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.type).to.eql(\"variants\"); // re-check the correct type in the response ",
											"});",
											"pm.test(\"Has correct id returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    var id = pm.environment.get(\"concrete_id\");",
											"    pm.expect(jsonData.data.id).to.eql(id);",
											"});",
											"pm.test(\"Has name returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.id).to.be.a(\"string\");",
											"});",
											"pm.test(\"Has self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.links.self).to.eql(pm.environment.get(\"url\") + \"/variants/\" + \"265\");",
											"}); "
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{ \"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/oncrete-products//{{concrete_sku}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"oncrete-products",
										"",
										"{{concrete_sku}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request concreate information with wrong method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10e21e74-93bc-420b-a4b0-ece755d41b63",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Has correct type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.type).to.eql(\"variants\"); // re-check the correct type in the response ",
											"});",
											"pm.test(\"Has correct id returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    var id = pm.environment.get(\"concrete_id\");",
											"    pm.expect(jsonData.data.id).to.eql(id);",
											"});",
											"pm.test(\"Has name returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.id).to.be.a(\"string\");",
											"});",
											"pm.test(\"Has self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.links.self).to.eql(pm.environment.get(\"url\") + \"/variants/\" + \"265\");",
											"}); "
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/oncrete-products//{{concrete_sku}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"oncrete-products",
										"",
										"{{concrete_sku}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request concreate information with wrong method PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10e21e74-93bc-420b-a4b0-ece755d41b63",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Has correct type returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.type).to.eql(\"variants\"); // re-check the correct type in the response ",
											"});",
											"pm.test(\"Has correct id returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    var id = pm.environment.get(\"concrete_id\");",
											"    pm.expect(jsonData.data.id).to.eql(id);",
											"});",
											"pm.test(\"Has name returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.id).to.be.a(\"string\");",
											"});",
											"pm.test(\"Has self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.links.self).to.eql(pm.environment.get(\"url\") + \"/variants/\" + \"265\");",
											"}); "
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{ \"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/oncrete-products/{{concrete_sku}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"oncrete-products",
										"{{concrete_sku}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Products - Get image set - GLUE-241",
			"item": [
				{
					"name": "Get abstract image set using a-id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e0092a7d-f7ba-4352-bb4d-c12a727d1b58",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200); // check the correct status ",
									"});",
									"pm.test(\"Has correct type returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.type).to.eql(\"abstract-product-image-sets\"); // re-check the correct type in the response ",
									"});",
									"pm.test(\"Has id type returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.id).to.eql(\"184\"); // re-check the correct id in the response ",
									"});",
									"",
									"pm.test(\"Has name type returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.id).to.eql(\"184\"); ",
									"});",
									"pm.test(\"Has correct images for products\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.images[0].externalUrlLarge).to.eql(\"//images.icecat.biz/img/norm/high/17365820-4378.jpg\");",
									"    pm.expect(jsonData.data.attributes.images[0].externalUrlSmall).to.eql(\"//images.icecat.biz/img/norm/medium/17365820-4378.jpg\");",
									"});",
									"pm.test(\"Has self link\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.links.self).to.eql(pm.environment.get(\"url\") + \"/abstract-products/\" +  pm.environment.get(\"abstract_id\") + \"/abstract-product-image-sets\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/abstract-products/{{abstract_id}}/abstract-product-image-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"abstract-products",
								"{{abstract_id}}",
								"abstract-product-image-sets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get abstract image set without a-id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9387b75-d1ef-4b09-b2b4-b1c8c814cf07",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Error code is 302\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"301\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Can`t find abstract product\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/abstract-products//abstract-product-image-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"abstract-products",
								"",
								"abstract-product-image-sets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get abstract image set using wrong a-id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eb2e846d-dca8-41ae-9627-36fb50a73517",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Error code is 302\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"303\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Can`t found abstract product image sets.\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/abstract-products/20934289374/abstract-product-image-sets/",
							"host": [
								"{{url}}"
							],
							"path": [
								"abstract-products",
								"20934289374",
								"abstract-product-image-sets",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get abstract image set using special characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0e9276bf-5b4a-419a-af53-7fff3af121e1",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Error code is 303\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"303\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/abstract-products/±!@#$%^&*()_/abstract-product-image-sets/",
							"host": [
								"{{url}}"
							],
							"path": [
								"abstract-products",
								"±!@"
							],
							"hash": "$%^&*()_/abstract-product-image-sets/"
						}
					},
					"response": []
				},
				{
					"name": "Get abstract image set using a-id but the url is broken",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f5960bb-bc74-455f-b17d-fc11529a8742",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Error code is 302\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"303\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Can`t find abstract product\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/abstract-products/{{abstract_id}}/abstract-product-im1age-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"abstract-products",
								"{{abstract_id}}",
								"abstract-product-im1age-sets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get abstract image set using wrong method POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f5960bb-bc74-455f-b17d-fc11529a8742",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Error code is 302\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"303\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Can`t find abstract product\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2c2eb148-f0f6-4ba1-905c-c6e34a2c7358",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{ \"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
						},
						"url": {
							"raw": "{{url}}/abstract-products/{{abstract_id}}/abstract-product-image-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"abstract-products",
								"{{abstract_id}}",
								"abstract-product-image-sets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get abstract image set using wrong method PUT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f5960bb-bc74-455f-b17d-fc11529a8742",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Error code is 302\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"303\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Can`t find abstract product\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2c2eb148-f0f6-4ba1-905c-c6e34a2c7358",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{ \"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
						},
						"url": {
							"raw": "{{url}}/abstract-products/{{abstract_id}}/abstract-product-image-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"abstract-products",
								"{{abstract_id}}",
								"abstract-product-image-sets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get abstract image set using wrong method Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18f9eae1-1b95-4a97-853a-7a3d40d979ad",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Error code is 303\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"303\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/abstract-products/{{abstract_id}}/abstract-product-image-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"abstract-products",
								"{{abstract_id}}",
								"abstract-product-image-sets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get concrete image set using c-id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d6b6ad7c-cd7d-4523-a38b-d796abc42170",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200); // check the correct status ",
									"});",
									"pm.test(\"Has correct type returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.type).to.eql(\"concrete-product-image-sets\"); // re-check the correct type in the response ",
									"});",
									"pm.test(\"Has id type returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.id).to.eql(\"265\"); // re-check the correct id in the response ",
									"});",
									"pm.test(\"Has name type returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.name).to.eql(\"default\"); // need to ask why this name is default",
									"});",
									"pm.test(\"Has correct images for products\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.images[0].externalUrlLarge).to.eql(\"//images.icecat.biz/img/norm/high/17365820-4378.jpg\");",
									"    pm.expect(jsonData.data.attributes.images[0].externalUrlSmall).to.eql(\"//images.icecat.biz/img/norm/medium/17365820-4378.jpg\");",
									"});",
									"pm.test(\"Has self link\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.links.self).to.eql(pm.environment.get(\"url\") + \"/concrete-products/\" +  pm.environment.get(\"concrete_id\") + \"/concrete-product-image-sets\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/concrete-products/{{concrete_id}}/concrete-product-image-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"concrete-products",
								"{{concrete_id}}",
								"concrete-product-image-sets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get concrete image set without c-id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73e2c65a-944d-4938-bb14-d0aa617fecf2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Error code is 302\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"301\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Can`t find abstract product\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/concrete-products//concrete-product-image-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"concrete-products",
								"",
								"concrete-product-image-sets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get concrete image set using wrong c-id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d323cc09-9bf5-443f-805d-7347afbc5a4e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Error code is 302\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"301\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Can`t found concrete product image sets.\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/concrete-products/234234234/concrete-product-image-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"concrete-products",
								"234234234",
								"concrete-product-image-sets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get concrete image set using special characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "925e5faa-1846-41f4-9242-b54dd30042f3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Error code is 302\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"302\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Can`t found concrete product image sets.\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/concrete-products/±!@#$%^&*()_/concrete-product-image-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"concrete-products",
								"±!@"
							],
							"hash": "$%^&*()_/concrete-product-image-sets"
						}
					},
					"response": []
				},
				{
					"name": "Get concrete image set using c-id but the url is broke",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "925e5faa-1846-41f4-9242-b54dd30042f3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Error code is 302\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"302\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Can`t found concrete product image sets.\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/concrete-products/{{concrete_id}}/concrete-product-image-s1ets",
							"host": [
								"{{url}}"
							],
							"path": [
								"concrete-products",
								"{{concrete_id}}",
								"concrete-product-image-s1ets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get concrete image set using wrong method POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "925e5faa-1846-41f4-9242-b54dd30042f3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Error code is 302\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"302\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Can`t found concrete product image sets.\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{ \"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
						},
						"url": {
							"raw": "{{url}}/concrete-products/{{concrete_id}}/concrete-product-image-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"concrete-products",
								"{{concrete_id}}",
								"concrete-product-image-sets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get concrete image set using wrong method PUT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "925e5faa-1846-41f4-9242-b54dd30042f3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Error code is 302\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"302\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Can`t found concrete product image sets.\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{ \"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
						},
						"url": {
							"raw": "{{url}}/concrete-products/{{concrete_id}}/concrete-product-image-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"concrete-products",
								"{{concrete_id}}",
								"concrete-product-image-sets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get concrete image set using wrong method DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "925e5faa-1846-41f4-9242-b54dd30042f3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Error code is 302\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"302\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Can`t found concrete product image sets.\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/concrete-products/{{concrete_id}}/concrete-product-image-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"concrete-products",
								"{{concrete_id}}",
								"concrete-product-image-sets"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Product - Get availability",
			"item": [
				{
					"name": "Abstract availability GLUE-335",
					"item": [
						{
							"name": "Request abstract availability by SKU with 1 concrete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "950127dc-e8fe-4ddc-81f0-3bdfd9cb87f0",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has type and id returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data[0].type).to.eql(\"abstract-product-availabilities\"); ",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.environment.get(\"abstract_sku_with_1product\"));",
											"});",
											"",
											"pm.test(\"Has correct attributes returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data[0].attributes.availability).to.eql(true); ",
											"    pm.expect(jsonData.data[0].attributes.quantity).to.eql(10);",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data[0].links.self).to.eql(pm.environment.get(\"url\") + \"/abstract-products/\" + (pm.environment.get(\"abstract_sku_with_1product\")) + \"/abstract-product-availabilities\");",
											"}); "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}/abstract-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}",
										"abstract-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract availability by SKU with 3 concrete ",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68498b71-c027-40d1-9cbf-806854496de7",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has type and id returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data[0].type).to.eql(\"abstract-product-availabilities\"); ",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.environment.get(\"abstract_sku_with_3product\"));",
											"});",
											"",
											"pm.test(\"Has correct attributes returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data[0].attributes.availability).to.eql(true); ",
											"    pm.expect(jsonData.data[0].attributes.quantity).to.eql(60);",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data[0].links.self).to.eql(pm.environment.get(\"url\") + \"/abstract-products/\" + (pm.environment.get(\"abstract_sku_with_3product\")) + \"/abstract-product-availabilities\");",
											"}); "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_3product}}/abstract-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_3product}}",
										"abstract-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request  abstract availability  without SKU",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48c21aed-e7b6-48c2-8d8a-d0b521b8e0c0",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Error code is 311\", function() {",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"311\");",
											"});",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Abstract product sku is not specified.\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products//abstract-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"",
										"abstract-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request  abstract availability by special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3bc6ca0f-8adf-4100-b1a8-495127d3df6a",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Error code is 305\", function() {",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"305\");",
											"});",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Availability is not found.\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/*/abstract-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"*",
										"abstract-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request  abstract availability  using spaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e72643f-d26f-4c8b-a828-d7429f96f326",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Error code is 302\", function() {",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"305\");",
											"});",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Availability is not found.\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/     /abstract-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"     ",
										"abstract-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request  abstract availability by  SKU of concrete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7671c545-d4e4-4f92-8f82-3d36d8246607",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Error code is 302\", function() {",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"305\");",
											"});",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Availability is not found.\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{concrete_sku}}/abstract-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{concrete_sku}}",
										"abstract-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request  abstract availability by sku with broke URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05a998d9-4479-4ed3-b443-c7cd84bcd4e8",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Not Found\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-pro123ducts/{{concrete_sku}}/abstract-product-av123ilabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-pro123ducts",
										"{{concrete_sku}}",
										"abstract-product-av123ilabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request abstract availability using the wrong method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9a0e8e4-573b-457d-8984-1e3d9d35b73d",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Not Found\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{\"type\":\"access_tokens\",\"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}/abstract-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}",
										"abstract-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request to Delete abstract availability by sku",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ac54d977-a0ba-4905-ace9-afe71f7f703d",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Not Found\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}/abstract-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}",
										"abstract-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request to Put abstract availability by SKU",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92df54d9-747f-46b1-912c-27e179640096",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Not Found\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5b63ce0b-4a0f-4c7d-880b-258e79de9deb",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{\"type\":\"access_tokens\",\"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}/abstract-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}",
										"abstract-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request abstract availability by sku witout type in body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22954e96-c950-41a2-9825-e956d34212d0",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Error code is null\", function() {",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(null);",
											"});",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Post data missing.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{\"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}/abstract-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}",
										"abstract-product-availabilities"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Concrete availability GLUE-242",
					"item": [
						{
							"name": "Request concrete availability by concrete SKU",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86603909-e670-47bc-a4f8-64f4acf81a2e",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has type and id returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data[0].type).to.eql(\"concrete-product-availabilities\"); ",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.environment.get(\"concrete_sku\"));",
											"});",
											"",
											"pm.test(\"Has correct attributes returned\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data[0].attributes.availability).to.eql(true); ",
											"    pm.expect(jsonData.data[0].attributes.quantity).to.eql(20);",
											"    pm.expect(jsonData.data[0].attributes.isNeverOutOfStock).to.eql(false);",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data[0].links.self).to.eql(pm.environment.get(\"url\") + \"/concrete-products/\" + (pm.environment.get(\"concrete_sku\")) + \"/concrete-product-availabilities\");",
											"}); "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concrete_sku}}/concrete-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concrete_sku}}",
										"concrete-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request concrete availability by abstract SKU",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99216f6a-3b1c-4990-adb1-f90ca50aaf34",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Error code is 306\", function() {",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"306\");",
											"});",
											"",
											"pm.test(\"Errors status is 404\", function() {",
											"    pm.expect(pm.response.json().errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Availability is not found.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{abstract_sku_with_1product}}/concrete-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{abstract_sku_with_1product}}",
										"concrete-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request concrete availability by special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec53b55b-aa30-44a4-8278-a4eae88fc65e",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Error code is 302\", function() {",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"302\");",
											"});",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Concrete product is not found.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/±!@#$%^&*()/concrete-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"±!@"
									],
									"hash": "$%^&*()/concrete-product-availabilities"
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request concrete availability by spaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06ec34ca-2189-4f16-864b-5b12bd8e701e",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Error code is 306\", function() {",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"306\");",
											"});",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Availability is not found.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/              /concrete-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"              ",
										"concrete-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request concrete availability by sku with broken URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80547f1d-a564-41ea-81fe-4b374ffd0e96",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Not Found\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-p123aroducts/{{concrete_sku}}/concrete-product-availassbilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-p123aroducts",
										"{{concrete_sku}}",
										"concrete-product-availassbilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request concrete availability by sku  using wrong method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75b75055-24ef-4357-a058-afc4b6b4dd56",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Not Found\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{\"type\":\"access_tokens\",\"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/product-concrete-availability/{{concrete_sku}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"product-concrete-availability",
										"{{concrete_sku}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request to Delete concrete availability by SKU using wrong method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91610dc4-817f-4792-ba86-321f3f6bdfab",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Not Found\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/product-concrete-availability/{{concrete_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"product-concrete-availability",
										"{{concrete_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request to Put concrete availability by SKU using wrong method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01c4d8be-94ec-4ccd-afa4-15b770687eb4",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Not Found\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{\"type\":\"access_tokens\",\"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/product-concrete-availability/{{concrete_sku}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"product-concrete-availability",
										"{{concrete_sku}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request concrete availability by sku  using wrong method and without type in body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22954e96-c950-41a2-9825-e956d34212d0",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Error code is null\", function() {",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(null);",
											"});",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Post data missing.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{ \"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/product-concrete-availability/{{concrete_sku}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"product-concrete-availability",
										"{{concrete_sku}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}