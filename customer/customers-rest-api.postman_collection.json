{
	"info": {
		"_postman_id": "c671ed5d-bd46-4410-a93c-d0f6e48c6936",
		"name": "customers-rest-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Customer - Create new customer",
			"item": [
				{
					"name": "Create new customer/Create a customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ad8c317-2a5a-46a7-afee-92b8b26b9d20",
								"exec": [
									"if ('errors' in pm.response.json() && pm.response.json().errors[0].code == 400) {",
									"    var email = pm.variables.get(\"email\");",
									"    pm.variables.set(\"email\", new Date().getTime() + '@mail.com');",
									"    postman.setNextRequest(request.name);",
									"} else {",
									"    var responseData = pm.response.json().data;",
									"",
									"    pm.variables.set(\"customer_reference\", responseData.id);",
									"    pm.variables.set(\"customer_create_at\", responseData.attributes.createdAt);",
									"    pm.variables.set(\"customer_update_at\", responseData.attributes.updatedAt);",
									"    ",
									"    pm.test(\"Status code is 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"    ",
									"    pm.test(\"Has correct type and id returned\", function () {",
									"        pm.expect(responseData.type).to.eql(\"customers\");",
									"        pm.expect(responseData.id).to.eql(pm.variables.get(\"customer_reference\"));",
									"    });",
									"    ",
									"    pm.test(\"Has correct first, lastname  and salution\", function () {",
									"        pm.expect(responseData.attributes.firstName).to.eql(pm.variables.get(\"firstName\"));",
									"        pm.expect(responseData.attributes.lastName).to.eql(pm.variables.get(\"lastName\"));",
									"        pm.expect(responseData.attributes.salutation).to.eql(pm.variables.get(\"salutation\"));",
									"    });",
									"    ",
									"    pm.test(\"Create_at returned\", function (){",
									"        // need to add the assert to check the null in the field ",
									"        pm.expect(responseData.attributes.createdAt).to.eql(pm.variables.get(\"customer_create_at\"));",
									"    });",
									"    ",
									"    pm.test(\"Create_at returned\", function (){",
									"        // need to add the assert to check the null in the field ",
									"        pm.expect(responseData.attributes.updatedAt).to.eql(pm.variables.get(\"customer_update_at\"));",
									"    });",
									"    ",
									"    pm.test(\"Has self link\", function() {",
									"        pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\"));",
									"    });",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9, en;q=0.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n    \"attributes\": {\n        \"salutation\": \"{{salutation}}\",\n        \"firstName\":\"{{firstName}}\",\n        \"lastName\":\"{{lastName}}\",\n        \"email\":\"{{email}}\",\n        \"password\":\"{{password}}\",\n        \"confirmPassword\":\"{{password}}\",\n        \"acceptedTerms\":true\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a customer with existing email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c369d90-d8a4-4b34-b09d-a10694fc56fd",
								"exec": [
									"var responseData = pm.response.json();",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct status in the body\", function() {",
									"    pm.expect(responseData.errors[0].status).to.eql(422);",
									"});",
									"",
									"pm.test(\"Has correct error code in the body\", function() {",
									"    pm.expect(responseData.errors[0].code).to.eql(\"400\");",
									"});",
									"",
									"pm.test(\"Has correct error message in the body\", function() {",
									"    pm.expect(responseData.errors[0].detail).to.eql(\"Customer with this email already exists.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"customers\",\"attributes\":{\"salutation\":\"{{salutation}}\",\"username\":\"test\",\"firstName\":\"{{firstName}}\",\"lastName\":\"{{lastName}}\",\"email\":\"{{email}}\",\"password\":\"{{password}}\",\"confirmPassword\":\"{{password}}\",\"acceptedTerms\":true}}}"
						},
						"url": {
							"raw": "{{url}}/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a customer without any attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "459aab6a-d9c3-4d2a-a890-a79a0c7e7b84",
								"exec": [
									"var responseData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Has correct status in the body\", function() {",
									"    pm.expect(responseData.errors[0].status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Has correct error code in the request body\", function() {",
									"    pm.expect(pm.response.text()).to.include(\"400\");",
									"});",
									"",
									"pm.test(\"Has correct error message in the body\", function() {",
									"    pm.expect(responseData.errors[0].detail).to.eql(\"Post data is invalid.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"customers\"}}"
						},
						"url": {
							"raw": "{{url}}/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a customer without salutation field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab2da9e0-4de9-4e4e-a832-cfc2240f551c",
								"exec": [
									"if ('errors' in pm.response.json() && pm.response.json().errors[0].code == 400) {",
									"    var email = pm.variables.get(\"email\");",
									"    pm.variables.set(\"email\", new Date().getTime() + '@mail.com');",
									"    postman.setNextRequest(request.name);",
									"} else {",
									"",
									"    pm.test(\"Status code is 422\", function () {",
									"        pm.response.to.have.status(422);",
									"    });",
									"    ",
									"    pm.test(\"Has correct status in the body\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.errors[0].status).to.eql(422);",
									"    });",
									"    ",
									"     pm.test(\"Has correct code in the body\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"    });",
									"    ",
									"    pm.test(\"Has correct detail in the body\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.errors[0].detail).to.eql(\"salutation => This field is missing.\");",
									"    });",
									"}",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"customers\",\"attributes\":{\"firstName\":\"Maxim\",\"lastName\":\"Musterman\",\"email\":\"{{email}}\", \"password\":\"{{password}}\",\"confirmPassword\":\"{{password}}\",\"acceptedTerms\":true}}}"
						},
						"url": {
							"raw": "{{url}}/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a customer without firstName field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3accc455-1fd7-4cc9-b0a0-7a4d6900f8ce",
								"exec": [
									"",
									"var email = pm.variables.get(\"email\");",
									"",
									"pm.variables.set(\"email\", new Date().getTime() + '@mail.com');",
									"",
									" pm.test(\"Status code is 422\", function () {",
									"        pm.response.to.have.status(422);",
									"    });",
									"    ",
									"    pm.test(\"Has correct status in the body\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.errors[0].status).to.eql(422);",
									"    });",
									"    ",
									"     pm.test(\"Has correct code in the body\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"    });",
									"    ",
									"    pm.test(\"Has correct detail in the body\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.errors[0].detail).to.eql(\"firstName => This field is missing.\");",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"customers\",\"attributes\":{\"salutation\":\"{{salutation}}\",\"lastName\":\"Mustrmannian\",\"email\":\"{{email}}\", \"password\":\"{{password}}\",\"confirmPassword\":\"{{password}}\",\"acceptedTerms\":true}}}"
						},
						"url": {
							"raw": "{{url}}/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a customer without lastName field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86fef52f-68f7-444a-b0ad-34b18e0a4a71",
								"exec": [
									"",
									"var email = pm.variables.get(\"email\");",
									"",
									"pm.variables.set(\"email\", new Date().getTime() + '@mail.com');",
									"",
									" pm.test(\"Status code is 422\", function () {",
									"        pm.response.to.have.status(422);",
									"    });",
									"    ",
									"    pm.test(\"Has correct status in the body\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.errors[0].status).to.eql(422);",
									"    });",
									"    ",
									"     pm.test(\"Has correct code in the body\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"    });",
									"    ",
									"    pm.test(\"Has correct detail in the body\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.errors[0].detail).to.eql(\"lastName => This field is missing.\");",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"customers\",\"attributes\":{\"salutation\":\"{{salutation}}\",\"firstName\":\"Maximillian\",\"email\":\"{{email}}\", \"password\":\"{{password}}\",\"confirmPassword\":\"{{password}}\",\"acceptedTerms\":true}}}"
						},
						"url": {
							"raw": "{{url}}/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a customer without email field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "14809085-160b-4a85-97d9-3130de7fa4ee",
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"        pm.response.to.have.status(422);",
									"    });",
									"    ",
									"    pm.test(\"Has correct status in the body\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.errors[0].status).to.eql(422);",
									"    });",
									"    ",
									"     pm.test(\"Has correct code in the body\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"    });",
									"    ",
									"    pm.test(\"Has correct detail in the body\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.errors[0].detail).to.eql(\"email => This field is missing.\");",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"customers\",\"attributes\":{\"salutation\":\"{{salutation}}\",\"firstName\":\"{{firstName}}\",\"lastName\":\"{{lastName}}\", \"password\":\"{{password}}\",\"confirmPassword\":\"{{password}}\",\"acceptedTerms\":true}}}"
						},
						"url": {
							"raw": "{{url}}/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a customer without password field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6bfb06e-f48c-431c-821a-094f25d16653",
								"exec": [
									"",
									"var email = pm.variables.get(\"email\");",
									"",
									"pm.variables.set(\"email\", new Date().getTime() + '@mail.com');",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"        pm.response.to.have.status(422);",
									"    });",
									"    ",
									"    pm.test(\"Has correct status in the body\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.errors[0].status).to.eql(422);",
									"    });",
									"    ",
									"     pm.test(\"Has correct code in the body\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"    });",
									"    ",
									"    pm.test(\"Has correct detail in the body\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.errors[0].detail).to.eql(\"password => This field is missing.\");",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"customers\",\"attributes\":{\"salutation\":\"{{salutation}}\",\"firstName\":\"{{firstName}}\",\"lastName\":\"{{lastName}}\", \"email\":\"{{email}}\",\"confirmPassword\":\"{{password}}\",\"acceptedTerms\":true}}}"
						},
						"url": {
							"raw": "{{url}}/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a customer without confirmPassword field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a77c4959-b059-4533-b7a8-e8b4981a969c",
								"exec": [
									"",
									"var email = pm.variables.get(\"email\");",
									"",
									"pm.variables.set(\"email\", new Date().getTime() + '@mail.com');",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"        pm.response.to.have.status(422);",
									"    });",
									"    ",
									"    pm.test(\"Has correct status in the body\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.errors[0].status).to.eql(422);",
									"    });",
									"    ",
									"     pm.test(\"Has correct code in the body\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"    });",
									"    ",
									"    pm.test(\"Has correct detail in the body\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.errors[0].detail).to.eql(\"confirmPassword => This field is missing.\");",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"customers\",\"attributes\":{\"salutation\":\"{{salutation}}\",\"firstName\":\"{{firstName}}\",\"lastName\":\"{{lastName}}\",\"email\":\"{{email}}\", \"password\":\"{{password}}\",\"acceptedTerms\":true}}}"
						},
						"url": {
							"raw": "{{url}}/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a customer acceptedTerm false",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7eb9a787-12ae-45af-843a-1299f370a485",
								"exec": [
									"var email = pm.variables.get(\"email\");",
									"",
									"pm.variables.set(\"email\", new Date().getTime() + '@mail.com');",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"        pm.response.to.have.status(422);",
									"    });",
									"    ",
									"    pm.test(\"Has correct status in the body\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.errors[0].status).to.eql(422);",
									"    });",
									"    ",
									"     pm.test(\"Has correct code in the body\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"    });",
									"    ",
									"    pm.test(\"Has correct detail in the body\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.errors[0].detail).to.eql(\"acceptedTerms => This value should be true.\");",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"customers\",\"attributes\":{\"salutation\":\"{{salutation}}\",\"firstName\":\"{{firstName}}\",\"lastName\":\"{{lastName}}\",\"email\":\"{{email}}\", \"password\":\"{{password}}\",\"confirmPassword\":\"{{password}}\",\"acceptedTerms\":false}}}"
						},
						"url": {
							"raw": "{{url}}/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a customer with wrong email field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "14809085-160b-4a85-97d9-3130de7fa4ee",
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"        pm.response.to.have.status(422);",
									"    });",
									"    ",
									"    pm.test(\"Has correct status in the body\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.errors[0].status).to.eql(422);",
									"    });",
									"    ",
									"     pm.test(\"Has correct code in the body\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"    });",
									"    ",
									"    pm.test(\"Has correct detail in the body\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.errors[0].detail).to.eql(\"email => This value is not a valid email address.\");",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"customers\",\"attributes\":{\"salutation\":\"{{salutation}}\",\"firstName\":\"{{firstName}}\",\"lastName\":\"{{lastName}}\",\"email\":\"{{wrong_email}}\",\"password\":\"{{password}}\",\"confirmPassword\":\"{{password}}\",\"acceptedTerms\":true}}}"
						},
						"url": {
							"raw": "{{url}}/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Customer - Login via acces tokens",
			"item": [
				{
					"name": "Request access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eb572f9f-e7e9-43ee-ad9c-8e6bdfafaa45",
								"exec": [
									"var responseData = pm.response.json().data;",
									"pm.variables.set(\"token\", responseData.attributes.accessToken);",
									"pm.variables.set(\"refresh_token\", responseData.attributes.refreshToken);",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"access-tokens\");",
									"});",
									"",
									"pm.test(\"Has id null\", function() {",
									"    pm.expect(responseData.id).to.eql(null);",
									"});",
									"",
									"pm.test(\"Has token type Bearer\", function(){",
									"    pm.expect(responseData.attributes.tokenType).to.eql(\"Bearer\");",
									"});",
									"",
									"pm.test(\"Has expiration time\", function() {",
									"    pm.expect(responseData.attributes.expiresIn).to.eql(28800);",
									"});",
									"",
									"pm.test(\"Has access_token returned\", function() {",
									"    pm.expect(responseData.attributes.accessToken).to.not.be.empty;",
									"    pm.expect(responseData.attributes.accessToken).to.eql(pm.variables.get(\"token\"));",
									"});",
									"",
									"pm.test(\"Has refresh_token returned\", function() {",
									"    pm.expect(responseData.attributes.refreshToken).to.not.be.empty;",
									"    pm.expect(responseData.attributes.refreshToken).to.eql(pm.variables.get(\"refresh_token\"));",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/access-tokens\");",
									"});",
									"",
									"postman.setNextRequest(\"Request access token for non-existing user\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": [
						{
							"name": "Request access token",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/access-tokens",
									"host": [
										"{{url}}"
									],
									"path": [
										"access-tokens"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache",
									"name": "Cache-Control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"key": "Connection",
									"value": "close",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Thu, 21 Jun 2018 15:09:53 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "X-Server",
									"value": "spryker-vagrant",
									"name": "X-Server",
									"description": "Custom header"
								},
								{
									"key": "content-language",
									"value": "en_US",
									"name": "content-language",
									"description": "The language the content is in"
								}
							],
							"cookie": [],
							"body": "{\"data\":{\"type\":\"access-tokens\",\"id\":null,\"attributes\":{\"token_type\":\"Bearer\",\"expires_in\":28799,\"access_token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjI3NjYxZTJlMTk1Njc2ZDgzNTI3MDYwZDY5ODY2MGU3MjA1ODIzMTJkZTUwMjZmMTNjZDFkY2YxNjk1NmE0MTBiZGVmNzc5MDJjNGE1ZmRjIn0.eyJhdWQiOiJmcm9udGVuZCIsImp0aSI6IjI3NjYxZTJlMTk1Njc2ZDgzNTI3MDYwZDY5ODY2MGU3MjA1ODIzMTJkZTUwMjZmMTNjZDFkY2YxNjk1NmE0MTBiZGVmNzc5MDJjNGE1ZmRjIiwiaWF0IjoxNTI5NTkzNzkyLCJuYmYiOjE1Mjk1OTM3OTIsImV4cCI6MTUyOTYyMjU5Miwic3ViIjoie1wiY3VzdG9tZXJfcmVmZXJlbmNlXCI6XCJERS0tMVwiLFwiaWRfY3VzdG9tZXJcIjoxfSIsInNjb3BlcyI6WyJjdXN0b21lciJdfQ.U1Ij4aDJ7H34E8XFCXfQORCnytk7wUuGRAGkBGhhWQsHDQucgSJs8V5q820E9Z3V8lEGXoY2vpZJZ-wP41HVFMsXJo10LG6NenekOeRNVpSpBVAcys5cSCBT25sv32OqFnn-g18CkemAgKAx9qCqzIRj6hmrkGjXDWhHpphJYBX40s38hR7IDHK2DSODifm-lyivd7wIohASbi4nVTgL57TsNsiSJJaWje4mc8Vs-rcNiuwl4t6pVvHRDMlDskq_S1tNp8GXrj_ESNtesuFf_F_iiUt20tJFgdqYddeMZNIECRX1S1WQjefRVZBgvvqDUAeemVb75CAF1TCILW8S-Q\",\"refresh_token\":\"def5020076edcef1e548965759216bcb4957c4e3623e567bbcb66de2e2fdc4e00fbe539bd5d77837c48d05dfa223aeea9701eb43b808b1b71d5820222500fc4bfc045686a636cf5479c6d437f0c210e73de919b044e56471d44402496ff5253d23b9d0d821bf4925e27eb2817eba1538abb5f861a03dd0290897d97b8902e58fcd995c217309ac661d2db449417eb26fb24fd9832312a26cf065ac5122ba747044ac6eb4898fe2ef8b0ba57642c3989a5ac1dd72785098b3da12ed0d35b3f481a09a9d235386de514526e1267c8fe7178e9e229154f6c0dc9c547927ca61a6f725ca23c33930453fcae7e448dd8407d77dec07a41e8c360a3fafe5e1b50b535814e18ac513528113b2726b6414977096b1a7477d43d0bb319906c8086984f8ae182190b30103e8b4ebacc37438d7fada1c06102f870c85660c52a47d879e57e9643369206ac614a6051fd4eb1a3f4a032b74b59af84b88e1a2620b0f86b8ac59366100a9ef03b7606100f884d25d7fc56ac13c5538ccf985701b64ded1e2ec462a0800861747d2706b3184d1b3a4082b7f1e717d17092c4b70b75e5c14fb69d27dc4bdd0c0a905\"},\"links\":{\"self\":\"http:\\/\\/glue.de.shop-suite.local\\/access-tokens\\/\"}}}"
						}
					]
				},
				{
					"name": "[Skip]Refresh access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7960d0ef-1a40-419d-8439-c48375afcaf6",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.variables.set(\"token\", responseData.attributes.accessToken);",
									"pm.variables.set(\"refresh_token\", responseData.attributes.refreshToken);",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"refresh-tokens\");",
									"});",
									"",
									"pm.test(\"Has id null\", function() {",
									"    pm.expect(responseData.id).to.eql(null);",
									"});",
									"",
									"pm.test(\"Has token type Bearer\", function(){",
									"    pm.expect(responseData.attributes.tokenType).to.eql(\"Bearer\");",
									"});",
									"",
									"pm.test(\"Has expiration time\", function() {",
									"    pm.expect(responseData.attributes.expiresIn).to.eql(28800);",
									"});",
									"",
									"pm.test(\"Has access_token returned\", function() {",
									"    pm.expect(responseData.attributes.accessToken).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has refresh_token returned\", function() {",
									"    pm.expect(responseData.attributes.refreshToken).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/refresh-tokens\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"refresh-tokens\",\"attributes\":{\"refreshToken\":\"{{refresh_token}}\"}}}"
						},
						"url": {
							"raw": "{{url}}/refresh-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"refresh-tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request access token for non-existing user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "970b498c-c8d6-4ab6-ad3a-7cf8a1656074",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(jsonData.errors[0].status).to.eql(401);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"003\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Failed to authenticate user.\");",
									"});",
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"spencor.hopkins@sprykerz.com\", \"password\": \"change123\"}}}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request access token with incorrect password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8045b955-103c-45cc-8b20-a418b5af1ebc",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(jsonData.errors[0].status).to.eql(401);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"003\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Failed to authenticate user.\");",
									"});",
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change1234\"}}}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request access tokens with PUT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "458a1b21-1110-41d0-be9a-7c5c11747f0c",
								"exec": [
									"var jsonData = pm.response.json();",
									"    ",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(jsonData.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
									"});",
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request access token with GET",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a329932-c959-4982-995e-7c8b25b5e6f4",
								"exec": [
									"var jsonData = pm.response.json();",
									"    ",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(jsonData.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
									"});",
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request access token with DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d81669ed-ab4d-45f1-9dea-94c41e74f6b4",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(jsonData.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
									"});",
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request access token with an empty body",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5f77592-0c3e-4321-99a5-52f51ccbb326",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(jsonData.errors[0].status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Post data is invalid.\");",
									"});",
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Customer - Get customer",
			"item": [
				{
					"name": "Get customer/Create a customer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b9f78ee1-574d-4ad8-83a4-c10287fe6682",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dc8fdcb5-2014-4c61-b1df-37b3349a044a",
								"exec": [
									"if ('errors' in pm.response.json() && pm.response.json().errors[0].code == 400) {",
									"    var email = pm.variables.get(\"email\");",
									"    pm.variables.set(\"email\", new Date().getTime() + '@mail.com');",
									"    postman.setNextRequest(request.name);",
									"} else {",
									"    var responseData = pm.response.json().data;",
									"    pm.variables.set(\"customer_reference\", responseData.id);",
									"    pm.variables.set(\"customer_create_at\", responseData.attributes.createdAt);",
									"    pm.variables.set(\"customer_update_at\", responseData.attributes.updatedAt);",
									"    ",
									"    pm.test(\"Status code is 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"    ",
									"    pm.test(\"Has correct type and id returned\", function () {",
									"        pm.expect(responseData.type).to.eql(\"customers\");",
									"        pm.expect(responseData.id).to.eql(pm.variables.get(\"customer_reference\"));",
									"    });",
									"    ",
									"    pm.test(\"Has correct first, lastname  and salution\", function () {",
									"        pm.expect(responseData.attributes.firstName).to.eql(pm.variables.get(\"firstName\"));",
									"        pm.expect(responseData.attributes.lastName).to.eql(pm.variables.get(\"lastName\"));",
									"        pm.expect(responseData.attributes.salutation).to.eql(pm.variables.get(\"salutation\"));",
									"    });",
									"    ",
									"    pm.test(\"Create_at returned\", function (){",
									"        // need to add the assert to check the null in the field ",
									"        pm.expect(responseData.attributes.createdAt).to.eql(pm.variables.get(\"customer_create_at\"));",
									"    });",
									"    ",
									"    pm.test(\"Create_at returned\", function (){",
									"        // need to add the assert to check the null in the field ",
									"        pm.expect(responseData.attributes.updatedAt).to.eql(pm.variables.get(\"customer_update_at\"));",
									"    });",
									"    ",
									"    pm.test(\"Has self link\", function() {",
									"        pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\"));",
									"    });",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9, en;q=0.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":\n\t{\n\t\t\"type\":\"customers\",\n\t\t\t\"attributes\":{\n\t\t\t\t\"salutation\":\"{{salutation}}\",\n\t\t\t\t\"firstName\":\"{{firstName}}\",\n\t\t\t\t\"lastName\":\"{{lastName}}\",\n\t\t\t\t\"email\":\"{{email}}\",\n\t\t\t\t\"password\":\"{{password}}\",\n\t\t\t\t\"confirmPassword\":\"{{password}}\",\n\t\t\t\t\"acceptedTerms\":true\n\t\t\t\t\n\t\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cea9639a-d73f-42d3-bc7f-45361e17bb74",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.variables.set(\"token\", responseData.attributes.accessToken);",
									"pm.variables.set(\"refresh-token\", responseData.attributes.refreshToken);",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"access-tokens\");",
									"});",
									"",
									"pm.test(\"Has id null\", function() {",
									"    pm.expect(responseData.id).to.eql(null);",
									"});",
									"",
									"pm.test(\"Has token type Bearer\", function(){",
									"    pm.expect(responseData.attributes.tokenType).to.eql(\"Bearer\");",
									"});",
									"",
									"pm.test(\"Has expiration time\", function() {",
									"    pm.expect(responseData.attributes).to.have.property(\"expiresIn\");",
									"});",
									"",
									"pm.test(\"Has access token returned\", function() {",
									"    pm.expect(responseData.attributes.accessToken).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has refresh token returned\", function() {",
									"    pm.expect(responseData.attributes.refreshToken).to.not.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"{{email}}\", \"password\": \"change123\"}}}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": [
						{
							"name": "Request access token",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/access-tokens",
									"host": [
										"{{url}}"
									],
									"path": [
										"access-tokens"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache",
									"name": "Cache-Control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"key": "Connection",
									"value": "close",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Thu, 21 Jun 2018 15:09:53 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "X-Server",
									"value": "spryker-vagrant",
									"name": "X-Server",
									"description": "Custom header"
								},
								{
									"key": "content-language",
									"value": "en_US",
									"name": "content-language",
									"description": "The language the content is in"
								}
							],
							"cookie": [],
							"body": "{\"data\":{\"type\":\"access-tokens\",\"id\":null,\"attributes\":{\"token_type\":\"Bearer\",\"expires_in\":28799,\"access_token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjI3NjYxZTJlMTk1Njc2ZDgzNTI3MDYwZDY5ODY2MGU3MjA1ODIzMTJkZTUwMjZmMTNjZDFkY2YxNjk1NmE0MTBiZGVmNzc5MDJjNGE1ZmRjIn0.eyJhdWQiOiJmcm9udGVuZCIsImp0aSI6IjI3NjYxZTJlMTk1Njc2ZDgzNTI3MDYwZDY5ODY2MGU3MjA1ODIzMTJkZTUwMjZmMTNjZDFkY2YxNjk1NmE0MTBiZGVmNzc5MDJjNGE1ZmRjIiwiaWF0IjoxNTI5NTkzNzkyLCJuYmYiOjE1Mjk1OTM3OTIsImV4cCI6MTUyOTYyMjU5Miwic3ViIjoie1wiY3VzdG9tZXJfcmVmZXJlbmNlXCI6XCJERS0tMVwiLFwiaWRfY3VzdG9tZXJcIjoxfSIsInNjb3BlcyI6WyJjdXN0b21lciJdfQ.U1Ij4aDJ7H34E8XFCXfQORCnytk7wUuGRAGkBGhhWQsHDQucgSJs8V5q820E9Z3V8lEGXoY2vpZJZ-wP41HVFMsXJo10LG6NenekOeRNVpSpBVAcys5cSCBT25sv32OqFnn-g18CkemAgKAx9qCqzIRj6hmrkGjXDWhHpphJYBX40s38hR7IDHK2DSODifm-lyivd7wIohASbi4nVTgL57TsNsiSJJaWje4mc8Vs-rcNiuwl4t6pVvHRDMlDskq_S1tNp8GXrj_ESNtesuFf_F_iiUt20tJFgdqYddeMZNIECRX1S1WQjefRVZBgvvqDUAeemVb75CAF1TCILW8S-Q\",\"refresh_token\":\"def5020076edcef1e548965759216bcb4957c4e3623e567bbcb66de2e2fdc4e00fbe539bd5d77837c48d05dfa223aeea9701eb43b808b1b71d5820222500fc4bfc045686a636cf5479c6d437f0c210e73de919b044e56471d44402496ff5253d23b9d0d821bf4925e27eb2817eba1538abb5f861a03dd0290897d97b8902e58fcd995c217309ac661d2db449417eb26fb24fd9832312a26cf065ac5122ba747044ac6eb4898fe2ef8b0ba57642c3989a5ac1dd72785098b3da12ed0d35b3f481a09a9d235386de514526e1267c8fe7178e9e229154f6c0dc9c547927ca61a6f725ca23c33930453fcae7e448dd8407d77dec07a41e8c360a3fafe5e1b50b535814e18ac513528113b2726b6414977096b1a7477d43d0bb319906c8086984f8ae182190b30103e8b4ebacc37438d7fada1c06102f870c85660c52a47d879e57e9643369206ac614a6051fd4eb1a3f4a032b74b59af84b88e1a2620b0f86b8ac59366100a9ef03b7606100f884d25d7fc56ac13c5538ccf985701b64ded1e2ec462a0800861747d2706b3184d1b3a4082b7f1e717d17092c4b70b75e5c14fb69d27dc4bdd0c0a905\"},\"links\":{\"self\":\"http:\\/\\/glue.de.shop-suite.local\\/access-tokens\\/\"}}}"
						}
					]
				},
				{
					"name": "Get customer - valid reference",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31023e22-4803-4617-a559-61520907d902",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(responseData.type).to.eql(\"customers\");",
									"    pm.expect(responseData.type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"    pm.expect(responseData.id).to.eql(pm.variables.get(\"customer_reference\"));",
									"});",
									"",
									"pm.test(\"Has correct attributes\", function() {",
									"    pm.expect(responseData.attributes.firstName).to.be.eql(pm.variables.get(\"firstName\"));",
									"    pm.expect(responseData.attributes.lastName).to.be.eql(pm.variables.get(\"lastName\"));",
									"    pm.expect(responseData.attributes.gender).to.be.eql(null);",
									"    pm.expect(responseData.attributes.dateOfBirth).to.be.eql(null);",
									"    pm.expect(responseData.attributes.salutation).to.be.eql(pm.variables.get(\"salutation\"));",
									"});",
									"",
									"",
									"pm.test(\"Has self link\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create first address with default values",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27cbc34e-1e5f-43a2-b6af-161b4998fa85",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.variables.set(\"customer_address_uuid_1\", responseData.id);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(responseData.type).to.eql(\"addresses\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has correct addresses attributes\", function() {",
									"    pm.expect(responseData.attributes.salutation).to.be.eql(\"Mr\");",
									"    pm.expect(responseData.attributes.firstName).to.be.eql(\"John\");",
									"    pm.expect(responseData.attributes.lastName).to.be.eql(\"Doe\");",
									"    pm.expect(responseData.attributes.address1).to.be.eql(\"First, 33, 11\");",
									"    pm.expect(responseData.attributes.address2).to.be.eql(\"b\");",
									"    pm.expect(responseData.attributes.address3).to.be.eql(\"aaa\");",
									"    pm.expect(responseData.attributes.zipCode).to.be.eql(\"12312\");",
									"    pm.expect(responseData.attributes.city).to.be.eql(\"Berlin\");",
									"    pm.expect(responseData.attributes.country).to.be.eql(\"Germany\");",
									"    pm.expect(responseData.attributes.iso2Code).to.be.eql(\"DE\");",
									"    pm.expect(responseData.attributes.company).to.be.eql(null);",
									"    pm.expect(responseData.attributes.phone).to.be.eql(\"22111-3-4-5\");",
									"    pm.expect(responseData.attributes.isDefaultShipping).to.be.eql(true);",
									"    pm.expect(responseData.attributes.isDefaultBilling).to.be.eql(true);",
									"});  ",
									"",
									"// if this address is first we always have true for Shipping and Billing ",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\") + \"/addresses/\" + responseData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"First, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\" : \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating new wishlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5bbc3fe0-b571-4d4f-9068-509b4fe59bb5",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.variables.set(\"wishlist1_uuid\", responseData.id);",
									"pm.variables.set(\"created_at_1\", responseData.attributes.createdAt);",
									"pm.variables.set(\"updated_at_1\", responseData.attributes.updatedAt);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has type and id returned\", function () {",
									"    pm.expect(responseData.type).to.eql(\"wishlists\");",
									"    pm.expect(responseData.id).to.eql(pm.variables.get(\"wishlist1_uuid\"));",
									"});",
									"",
									"pm.test(\"Has correct description returned\", function() {",
									"    pm.expect(responseData.attributes.name).to.eql(\"wishlist_name2\");",
									"    pm.expect(responseData.attributes.numberOfItems).to.eql(0); ",
									"});",
									"",
									"pm.test(\"Has created_at and updated at returned\", function() {",
									"    pm.expect(responseData.attributes.createdAt).to.eql(pm.variables.get(\"created_at_1\"));",
									"    pm.expect(responseData.attributes.updatedAt).to.eql(pm.variables.get(\"updated_at_1\"));",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/wishlists/\" + pm.variables.get(\"wishlist1_uuid\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"wishlists\",\"attributes\":{\"name\":\"wishlist_name2\"}}}"
						},
						"url": {
							"raw": "{{url}}/wishlists",
							"host": [
								"{{url}}"
							],
							"path": [
								"wishlists"
							]
						},
						"description": "Input:\n\ncustomer access token\nname\n\nOutput:\n\nWishlist\n  ID\n  Name"
					},
					"response": []
				},
				{
					"name": "Get customer with address",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f963c4e0-6d72-45bb-b51c-2acebd5280eb",
								"exec": [
									"var responseData = pm.response.json().data,",
									"    included = pm.response.json().included;",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(responseData.type).to.eql(\"customers\");",
									"    pm.expect(responseData.type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"    pm.expect(responseData.id).to.eql(pm.variables.get(\"customer_reference\"));",
									"});",
									"",
									"pm.test(\"Has correct attributes\", function() {",
									"    pm.expect(responseData.attributes.firstName).to.be.eql(pm.variables.get(\"firstName\"));",
									"    pm.expect(responseData.attributes.lastName).to.be.eql(pm.variables.get(\"lastName\"));",
									"    pm.expect(responseData.attributes.gender).to.be.eql(null);",
									"    pm.expect(responseData.attributes.dateOfBirth).to.be.eql(null);",
									"    pm.expect(responseData.attributes.salutation).to.be.eql(pm.variables.get(\"salutation\"));",
									"});",
									"",
									"pm.test(\"Has relationships addresses section\", function() {",
									"    let address = _.first(responseData.relationships.addresses.data);",
									"    pm.expect(address.type).that.is.a(\"string\").to.be.eql(\"addresses\");",
									"    pm.expect(address.id).to.be.eql(pm.variables.get(\"customer_address_uuid_1\"));",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\"));",
									"});",
									"",
									"pm.test(\"Has included address section\", function() {",
									"    pm.expect(included[0].type).to.be.eql(\"addresses\");",
									"    pm.expect(included[0].type).to.be.a(\"string\");",
									"    pm.expect(included[0].id).to.be.eql(pm.variables.get(\"customer_address_uuid_1\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get customer with address and wishlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1fb26cd9-e70a-428e-8551-ab50406473aa",
								"exec": [
									"var responseData = pm.response.json().data,",
									"    included = pm.response.json().included;",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(responseData.type).to.eql(\"customers\");",
									"    pm.expect(responseData.type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"    pm.expect(responseData.id).to.eql(pm.variables.get(\"customer_reference\"));",
									"});",
									"",
									"pm.test(\"Has correct attributes\", function() {",
									"    pm.expect(responseData.attributes.firstName).to.be.eql(pm.variables.get(\"firstName\"));",
									"    pm.expect(responseData.attributes.lastName).to.be.eql(pm.variables.get(\"lastName\"));",
									"    pm.expect(responseData.attributes.gender).to.be.eql(null);",
									"    pm.expect(responseData.attributes.dateOfBirth).to.be.eql(null);",
									"    pm.expect(responseData.attributes.salutation).to.be.eql(pm.variables.get(\"salutation\"));",
									"});",
									"",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\"));",
									"});",
									"",
									"pm.test(\"Has relationships addresses section\", function() {",
									"    pm.expect(responseData.relationships.addresses.data[0].type).to.be.eql(\"addresses\");",
									"    pm.expect(responseData.relationships.addresses.data[0].id).to.be.eql(pm.variables.get(\"customer_address_uuid_1\"));",
									"});",
									"",
									"pm.test(\"Has relationships wishlists section\", function() {",
									"    pm.expect(responseData.relationships.wishlists.data[0].type).to.be.eql(\"wishlists\");",
									"    pm.expect(responseData.relationships.wishlists.data[0].id).to.be.eql(pm.variables.get(\"wishlist1_uuid\"));",
									"});",
									"",
									"pm.test(\"Has included address section\", function() {",
									"    pm.expect(included[0].type).to.be.eql(\"addresses\");",
									"    pm.expect(included[0].type).to.be.a(\"string\");",
									"    pm.expect(included[0].id).to.be.eql(pm.variables.get(\"customer_address_uuid_1\"));",
									"});",
									"",
									"pm.test(\"Has included wishlist section\", function() {",
									"    pm.expect(included[1].type).to.be.eql(\"wishlists\");",
									"    pm.expect(included[1].type).to.be.a(\"string\");",
									"    pm.expect(included[1].id).to.be.eql(pm.variables.get(\"wishlist1_uuid\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request customer with include wishlist ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a8d8d7a1-b96a-4cf3-91d0-518318bec5ed",
								"exec": [
									"var responseData = pm.response.json().data,",
									"    included = pm.response.json().included;",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Has correct type and id returned\", function() {",
									"    pm.expect(responseData.type).to.eql(\"customers\");",
									"    pm.expect(responseData.id).to.eql(pm.variables.get(\"customer_reference\"));",
									"});",
									"",
									"pm.test(\"Has correct first, lastname  and salution\", function() {",
									"    pm.expect(responseData.attributes.firstName).to.eql(pm.variables.get(\"firstName\"));",
									"    pm.expect(responseData.attributes.lastName).to.eql(pm.variables.get(\"lastName\"));",
									"    pm.expect(responseData.attributes.salutation).to.eql(pm.variables.get(\"salutation\"));",
									"});",
									"",
									"pm.test(\"Create_at returned\", function() {",
									"    // need to add the assert to check the null in the field ",
									"    pm.expect(responseData.attributes.createdAt).to.eql(pm.variables.get(\"customer_create_at\"));",
									"});",
									"",
									"pm.test(\"Updated_at returned\", function() {",
									"    // need to add the assert to check the null in the field ",
									"    pm.expect(responseData.attributes).to.have.property(\"updatedAt\").that.is.a(\"string\").and.not.null;",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\"));",
									"});",
									"",
									"// relations ",
									"",
									"pm.test(\"Has wishlist relations returned\", function() {",
									"    pm.expect(responseData.relationships.wishlists.data[0].type).to.eql(\"wishlists\");",
									"    pm.expect(responseData.relationships.wishlists.data[0]).to.have.property(\"id\").that.is.a('string').and.not.null;",
									"});",
									"",
									"pm.test(\"Has type and id returned\", function() {",
									"    pm.expect(included[0].type).to.eql(\"wishlists\");",
									"    pm.expect(included[0].id).to.eql(pm.variables.get(\"wishlist1_uuid\"));",
									"});",
									"",
									"pm.test(\"Has correct description returned\", function() {",
									"    pm.expect(included[0].attributes.name).to.eql(\"wishlist_name2\");",
									"});",
									"",
									"pm.test(\"Has created_at and updated at returned\", function() {",
									"    pm.expect(included[0].attributes.createdAt).to.eql(pm.variables.get(\"created_at_1\"));",
									"    pm.expect(included[0].attributes.updatedAt).to.eql(pm.variables.get(\"updated_at_1\"));",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(included[0].links.self).to.eql(pm.variables.get(\"url\") + \"/wishlists/\" + pm.variables.get(\"wishlist1_uuid\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}?include=wishlists",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							],
							"query": [
								{
									"key": "include",
									"value": "wishlists"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Request customer with include address ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "06c207b0-8876-4547-a411-c2fdf55b28dd",
								"exec": [
									"var responseData = pm.response.json().data,",
									"    included = pm.response.json().included;",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type and id returned\", function() {",
									"    pm.expect(responseData.type).to.eql(\"customers\");",
									"    pm.expect(responseData.id).to.eql(pm.variables.get(\"customer_reference\"));",
									"});",
									"",
									"pm.test(\"Has correct first, lastname  and salution\", function() {",
									"    pm.expect(responseData.attributes.firstName).to.eql(pm.variables.get(\"firstName\"));",
									"    pm.expect(responseData.attributes.lastName).to.eql(pm.variables.get(\"lastName\"));",
									"    pm.expect(responseData.attributes.salutation).to.eql(pm.variables.get(\"salutation\"));",
									"});",
									"",
									"pm.test(\"Create_at returned\", function() {",
									"    // need to add the assert to check the null in the field ",
									"    pm.expect(responseData.attributes.createdAt).to.eql(pm.variables.get(\"customer_create_at\"));",
									"});",
									"",
									"pm.test(\"Create_at returned\", function() {",
									"    // need to add the assert to check the null in the field ",
									"    pm.expect(responseData.attributes).to.have.property(\"updatedAt\").that.is.a(\"string\").and.not.null;",
									"});",
									"",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\"));",
									"});",
									"",
									"// relations ",
									"pm.test(\"Has address relations returned\", function() {",
									"    pm.expect(responseData.relationships.addresses.data[0].type).to.eql(\"addresses\");",
									"    pm.expect(responseData.relationships.addresses.data[0].id).to.eql(pm.variables.get(\"customer_address_uuid_1\"));",
									"});",
									"",
									"// included ",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(included[0].type).to.eql(\"addresses\");",
									"    pm.expect(included[0].type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(included[0].id).to.be.a(\"string\");",
									"    pm.expect(included[0].id).to.eql(pm.variables.get(\"customer_address_uuid_1\"));",
									"});",
									"",
									"pm.test(\"Has correct addresses attributes\", function() {",
									"    pm.expect(included[0].attributes.salutation).to.be.eql(\"Mr\");",
									"    pm.expect(included[0].attributes.firstName).to.be.eql(\"John\");",
									"    pm.expect(included[0].attributes.lastName).to.be.eql(\"Doe\");",
									"    pm.expect(included[0].attributes.address1).to.be.eql(\"First, 33, 11\");",
									"    pm.expect(included[0].attributes.address2).to.be.eql(\"b\");",
									"    pm.expect(included[0].attributes.address3).to.be.eql(\"aaa\");",
									"    pm.expect(included[0].attributes.zipCode).to.be.eql(\"12312\");",
									"    pm.expect(included[0].attributes.city).to.be.eql(\"Berlin\");",
									"    pm.expect(included[0].attributes.country).to.be.eql(\"Germany\");",
									"    pm.expect(included[0].attributes.iso2Code).to.be.eql(\"DE\");",
									"    pm.expect(included[0].attributes.company).to.be.eql(null);",
									"    pm.expect(included[0].attributes.phone).to.be.eql(\"22111-3-4-5\");",
									"    pm.expect(included[0].attributes.isDefaultShipping).to.be.eql(true);",
									"    pm.expect(included[0].attributes.isDefaultBilling).to.be.eql(true);",
									"});",
									"",
									"// if this address is first we always have true for Shipping and Billing ",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}?include=addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							],
							"query": [
								{
									"key": "include",
									"value": "addresses"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get customer wrong url",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7926c708-4216-4645-b014-dec8fd4235ef",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customeres/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customeres",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get customer without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f614d84d-9ea8-43b4-ba33-5cff4ccf2fde",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    var responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.errors[0].detail).to.eql(\"Missing access token.\");",
									"    pm.expect(responseData.errors[0].code).to.eql(\"002\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Get customer - missing token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31023e22-4803-4617-a559-61520907d902",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    var responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.errors[0].detail).to.eql(\"Missing access token.\");",
									"    pm.expect(responseData.errors[0].code).to.eql(\"002\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Get customer -  invalid reference",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31023e22-4803-4617-a559-61520907d902",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    var responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.errors[0].detail).to.eql(\"Customer not found.\");",
									"    pm.expect(responseData.errors[0].code).to.eql(\"402\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/qwe123",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"qwe123"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "68749e00-c774-4b55-9b9a-ce0462740b61",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b4e77322-2686-4984-806b-d32b21ab994c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						},
						"description": "This test is to verify that request returns valid message and status code if customer does not have any addresses"
					},
					"response": []
				},
				{
					"name": "Get customer was deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8e32154-e5dc-4c64-a59c-df6fb2ae79c6",
								"exec": [
									"pm.test(\"Status code is 404\", function() {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Customer not found.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"402\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f4f57703-cb70-4e94-82fc-fa28437f38a4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3d2741a5-993b-417d-aad1-6a8888a65c02",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Customer - Update regular customer data",
			"item": [
				{
					"name": "Update regular customer data/Create a customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "547a160e-48dd-4ee3-8f13-b3e9316d19d7",
								"exec": [
									"if ('errors' in pm.response.json() && pm.response.json().errors[0].code == 400) {",
									"    var email = pm.variables.get(\"email\");",
									"    pm.variables.set(\"email\", new Date().getTime() + '@mail.com');",
									"    postman.setNextRequest(request.name);",
									"} else {",
									"    var responseData = pm.response.json().data;",
									"",
									"    pm.variables.set(\"customer_reference\", responseData.id);",
									"    pm.variables.set(\"customer_create_at\", responseData.attributes.createdAt);",
									"    pm.variables.set(\"customer_update_at\", responseData.attributes.updatedAt);",
									"    ",
									"    pm.test(\"Status code is 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"    ",
									"    pm.test(\"Has correct type and id returned\", function () {",
									"        pm.expect(responseData.type).to.eql(\"customers\");",
									"        pm.expect(responseData.id).to.eql(pm.variables.get(\"customer_reference\"));",
									"    });",
									"    ",
									"    pm.test(\"Has correct first, lastname  and salution\", function () {",
									"        pm.expect(responseData.attributes.firstName).to.eql(pm.variables.get(\"firstName\"));",
									"        pm.expect(responseData.attributes.lastName).to.eql(pm.variables.get(\"lastName\"));",
									"        pm.expect(responseData.attributes.salutation).to.eql(pm.variables.get(\"salutation\"));",
									"    });",
									"    ",
									"    pm.test(\"Create_at returned\", function (){",
									"        // need to add the assert to check the null in the field ",
									"        pm.expect(responseData.attributes.createdAt).to.eql(pm.variables.get(\"customer_create_at\"));",
									"    });",
									"    ",
									"    pm.test(\"Create_at returned\", function (){",
									"        // need to add the assert to check the null in the field ",
									"        pm.expect(responseData.attributes.updatedAt).to.eql(pm.variables.get(\"customer_update_at\"));",
									"    });",
									"    ",
									"    ",
									"    pm.test(\"Has self link\", function() {",
									"        pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\"));",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9, en;q=0.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":\n\t{\n\t\t\"type\":\"customers\",\n\t\t\t\"attributes\":{\n\t\t\t\t\"salutation\":\"{{salutation}}\",\n\t\t\t\t\"firstName\":\"{{firstName}}\",\n\t\t\t\t\"lastName\":\"{{lastName}}\",\n\t\t\t\t\"email\":\"{{email}}\",\n\t\t\t\t\"password\":\"{{password}}\",\n\t\t\t\t\"confirmPassword\":\"{{password}}\",\n\t\t\t\t\"acceptedTerms\":true\n\t\t\t\t\n\t\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97c06ce6-b033-4213-8ef9-2a85afaa592f",
								"exec": [
									"var response = pm.response.json(), ",
									"    responseData = response.data;",
									"",
									"pm.variables.set(\"token\", responseData.attributes.accessToken);",
									"pm.variables.set(\"refresh-token\", responseData.attributes.refreshToken);",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"access-tokens\");",
									"});",
									"",
									"pm.test(\"Has id null\", function() {",
									"    pm.expect(responseData.id).to.eql(null);",
									"});",
									"",
									"pm.test(\"Has token type Bearer\", function(){",
									"    pm.expect(responseData.attributes.tokenType).to.eql(\"Bearer\");",
									"});",
									"",
									"pm.test(\"Has expiration time\", function() {",
									"    pm.expect(responseData.attributes.expiresIn).to.eql(28800);",
									"});",
									"",
									"pm.test(\"Has access_token returned\", function() {",
									"    pm.expect(responseData.attributes.accessToken).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has refresh_token returned\", function() {",
									"    pm.expect(responseData.attributes.refreshToken).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/access-tokens\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"{{email}}\", \"password\": \"{{password}}\"}}}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": [
						{
							"name": "Request access token",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/access-tokens",
									"host": [
										"{{url}}"
									],
									"path": [
										"access-tokens"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache",
									"name": "Cache-Control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"key": "Connection",
									"value": "close",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Thu, 21 Jun 2018 15:09:53 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "X-Server",
									"value": "spryker-vagrant",
									"name": "X-Server",
									"description": "Custom header"
								},
								{
									"key": "content-language",
									"value": "en_US",
									"name": "content-language",
									"description": "The language the content is in"
								}
							],
							"cookie": [],
							"body": "{\"data\":{\"type\":\"access-tokens\",\"id\":null,\"attributes\":{\"token_type\":\"Bearer\",\"expires_in\":28799,\"access_token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjI3NjYxZTJlMTk1Njc2ZDgzNTI3MDYwZDY5ODY2MGU3MjA1ODIzMTJkZTUwMjZmMTNjZDFkY2YxNjk1NmE0MTBiZGVmNzc5MDJjNGE1ZmRjIn0.eyJhdWQiOiJmcm9udGVuZCIsImp0aSI6IjI3NjYxZTJlMTk1Njc2ZDgzNTI3MDYwZDY5ODY2MGU3MjA1ODIzMTJkZTUwMjZmMTNjZDFkY2YxNjk1NmE0MTBiZGVmNzc5MDJjNGE1ZmRjIiwiaWF0IjoxNTI5NTkzNzkyLCJuYmYiOjE1Mjk1OTM3OTIsImV4cCI6MTUyOTYyMjU5Miwic3ViIjoie1wiY3VzdG9tZXJfcmVmZXJlbmNlXCI6XCJERS0tMVwiLFwiaWRfY3VzdG9tZXJcIjoxfSIsInNjb3BlcyI6WyJjdXN0b21lciJdfQ.U1Ij4aDJ7H34E8XFCXfQORCnytk7wUuGRAGkBGhhWQsHDQucgSJs8V5q820E9Z3V8lEGXoY2vpZJZ-wP41HVFMsXJo10LG6NenekOeRNVpSpBVAcys5cSCBT25sv32OqFnn-g18CkemAgKAx9qCqzIRj6hmrkGjXDWhHpphJYBX40s38hR7IDHK2DSODifm-lyivd7wIohASbi4nVTgL57TsNsiSJJaWje4mc8Vs-rcNiuwl4t6pVvHRDMlDskq_S1tNp8GXrj_ESNtesuFf_F_iiUt20tJFgdqYddeMZNIECRX1S1WQjefRVZBgvvqDUAeemVb75CAF1TCILW8S-Q\",\"refresh_token\":\"def5020076edcef1e548965759216bcb4957c4e3623e567bbcb66de2e2fdc4e00fbe539bd5d77837c48d05dfa223aeea9701eb43b808b1b71d5820222500fc4bfc045686a636cf5479c6d437f0c210e73de919b044e56471d44402496ff5253d23b9d0d821bf4925e27eb2817eba1538abb5f861a03dd0290897d97b8902e58fcd995c217309ac661d2db449417eb26fb24fd9832312a26cf065ac5122ba747044ac6eb4898fe2ef8b0ba57642c3989a5ac1dd72785098b3da12ed0d35b3f481a09a9d235386de514526e1267c8fe7178e9e229154f6c0dc9c547927ca61a6f725ca23c33930453fcae7e448dd8407d77dec07a41e8c360a3fafe5e1b50b535814e18ac513528113b2726b6414977096b1a7477d43d0bb319906c8086984f8ae182190b30103e8b4ebacc37438d7fada1c06102f870c85660c52a47d879e57e9643369206ac614a6051fd4eb1a3f4a032b74b59af84b88e1a2620b0f86b8ac59366100a9ef03b7606100f884d25d7fc56ac13c5538ccf985701b64ded1e2ec462a0800861747d2706b3184d1b3a4082b7f1e717d17092c4b70b75e5c14fb69d27dc4bdd0c0a905\"},\"links\":{\"self\":\"http:\\/\\/glue.de.shop-suite.local\\/access-tokens\\/\"}}}"
						}
					]
				},
				{
					"name": "Update customer - valid new data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9cf02c35-e425-49a2-b007-60461e7c30b0",
								"exec": [
									"var responseData = pm.response.json().data;",
									"pm.variables.set(\"customer_update_at\", responseData.attributes.updatedAt);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(responseData.type).to.eql(\"customers\");",
									"    pm.expect(responseData.type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"    pm.expect(responseData.id).to.eql(pm.variables.get(\"customer_reference\"));",
									"});",
									"",
									"pm.test(\"Has correct attributes\", function() {",
									"    pm.expect(responseData.attributes.salutation).to.be.eql(\"Mr\");",
									"    pm.expect(responseData.attributes.firstName).to.be.eql(pm.variables.get(\"firstName\"));",
									"    pm.expect(responseData.attributes.lastName).to.be.eql(pm.variables.get(\"lastName\"));",
									"    pm.expect(responseData.attributes.dateOfBirth).to.be.eql(\"2000-12-31\");",
									"});",
									"",
									"pm.test(\"Has correct attributes\", function() {",
									"    pm.expect(responseData.attributes.createdAt).to.eql(pm.variables.get(\"customer_create_at\"));",
									"    pm.expect(responseData.attributes.updatedAt).to.eql(pm.variables.get(\"customer_update_at\"));",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n    \"attributes\": {\n      \"firstName\":\"{{firstName}}\",\n\t  \"lastName\":\"{{lastName}}\",\n\t  \"gender\":\"Female\",\n      \"salutation\": \"Mr\",\n      \"dateOfBirth\": \"2000-12-31\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update customer -  send own data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9cf02c35-e425-49a2-b007-60461e7c30b0",
								"exec": [
									"var responseData = pm.response.json().data;",
									"pm.variables.set(\"customer_update_at\", responseData.attributes.updatedAt);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(responseData.type).to.eql(\"customers\");",
									"    pm.expect(responseData.type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"    pm.expect(responseData.id).to.eql(pm.variables.get(\"customer_reference\"));",
									"});",
									"",
									"pm.test(\"Has correct attributes\", function() {",
									"    pm.expect(responseData.attributes.salutation).to.be.eql(\"Mr\");",
									"    pm.expect(responseData.attributes.firstName).to.be.eql(pm.variables.get(\"firstName\"));",
									"    pm.expect(responseData.attributes.lastName).to.be.eql(pm.variables.get(\"lastName\"));",
									"    pm.expect(responseData.attributes.dateOfBirth).to.be.eql(\"2000-12-31\");",
									"});",
									"",
									"pm.test(\"Has correct attributes\", function() {",
									"    pm.expect(responseData.attributes.createdAt).to.eql(pm.variables.get(\"customer_create_at\"));",
									"    pm.expect(responseData.attributes.updatedAt).to.eql(pm.variables.get(\"customer_update_at\"));",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n    \"attributes\": {\n      \"firstName\":\"{{firstName}}\",\n\t  \"lastName\":\"{{lastName}}\",\n\t  \"gender\":\"Female\",\n      \"salutation\": \"Mr\",\n      \"dateOfBirth\": \"2000-12-31\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update customer email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9cf02c35-e425-49a2-b007-60461e7c30b0",
								"exec": [
									"var responseData = pm.response.json().data;",
									"pm.variables.set(\"customer_update_at\", responseData.attributes.updatedAt);",
									"pm.variables.set(\"updated_email\", responseData.attributes.email);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(responseData.type).to.eql(\"customers\");",
									"    pm.expect(responseData.type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"    pm.expect(responseData.id).to.eql(pm.variables.get(\"customer_reference\"));",
									"});",
									"",
									"pm.test(\"Has correct attributes\", function() {",
									"    pm.expect(responseData.attributes.salutation).to.be.eql(\"Mr\");",
									"    pm.expect(responseData.attributes.firstName).to.be.eql(pm.variables.get(\"firstName\"));",
									"    pm.expect(responseData.attributes.lastName).to.be.eql(pm.variables.get(\"lastName\"));",
									"    pm.expect(responseData.attributes.dateOfBirth).to.be.eql(\"2000-12-31\");",
									"});",
									"",
									"pm.test(\"Has correct attributes\", function() {",
									"    pm.expect(responseData.attributes.createdAt).to.eql(pm.variables.get(\"customer_create_at\"));",
									"    pm.expect(responseData.attributes.updatedAt).to.eql(pm.variables.get(\"customer_update_at\"));",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n    \"attributes\": {\n      \"firstName\": \"{{firstName}}\",\n      \"lastName\": \"{{lastName}}\",\n\t  \"gender\":\"Female\",\n      \"salutation\": \"Mr\",\n      \"dateOfBirth\": \"2000-12-31\",\n      \"email\": \"{{$timestamp}}newtest@test.com\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update customer request access token with old mail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97c06ce6-b033-4213-8ef9-2a85afaa592f",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Failed to authenticate user.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"003\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"{{email}}\", \"password\": \"{{password}}\"}}}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": [
						{
							"name": "Request access token",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/access-tokens",
									"host": [
										"{{url}}"
									],
									"path": [
										"access-tokens"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache",
									"name": "Cache-Control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"key": "Connection",
									"value": "close",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Thu, 21 Jun 2018 15:09:53 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "X-Server",
									"value": "spryker-vagrant",
									"name": "X-Server",
									"description": "Custom header"
								},
								{
									"key": "content-language",
									"value": "en_US",
									"name": "content-language",
									"description": "The language the content is in"
								}
							],
							"cookie": [],
							"body": "{\"data\":{\"type\":\"access-tokens\",\"id\":null,\"attributes\":{\"token_type\":\"Bearer\",\"expires_in\":28799,\"access_token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjI3NjYxZTJlMTk1Njc2ZDgzNTI3MDYwZDY5ODY2MGU3MjA1ODIzMTJkZTUwMjZmMTNjZDFkY2YxNjk1NmE0MTBiZGVmNzc5MDJjNGE1ZmRjIn0.eyJhdWQiOiJmcm9udGVuZCIsImp0aSI6IjI3NjYxZTJlMTk1Njc2ZDgzNTI3MDYwZDY5ODY2MGU3MjA1ODIzMTJkZTUwMjZmMTNjZDFkY2YxNjk1NmE0MTBiZGVmNzc5MDJjNGE1ZmRjIiwiaWF0IjoxNTI5NTkzNzkyLCJuYmYiOjE1Mjk1OTM3OTIsImV4cCI6MTUyOTYyMjU5Miwic3ViIjoie1wiY3VzdG9tZXJfcmVmZXJlbmNlXCI6XCJERS0tMVwiLFwiaWRfY3VzdG9tZXJcIjoxfSIsInNjb3BlcyI6WyJjdXN0b21lciJdfQ.U1Ij4aDJ7H34E8XFCXfQORCnytk7wUuGRAGkBGhhWQsHDQucgSJs8V5q820E9Z3V8lEGXoY2vpZJZ-wP41HVFMsXJo10LG6NenekOeRNVpSpBVAcys5cSCBT25sv32OqFnn-g18CkemAgKAx9qCqzIRj6hmrkGjXDWhHpphJYBX40s38hR7IDHK2DSODifm-lyivd7wIohASbi4nVTgL57TsNsiSJJaWje4mc8Vs-rcNiuwl4t6pVvHRDMlDskq_S1tNp8GXrj_ESNtesuFf_F_iiUt20tJFgdqYddeMZNIECRX1S1WQjefRVZBgvvqDUAeemVb75CAF1TCILW8S-Q\",\"refresh_token\":\"def5020076edcef1e548965759216bcb4957c4e3623e567bbcb66de2e2fdc4e00fbe539bd5d77837c48d05dfa223aeea9701eb43b808b1b71d5820222500fc4bfc045686a636cf5479c6d437f0c210e73de919b044e56471d44402496ff5253d23b9d0d821bf4925e27eb2817eba1538abb5f861a03dd0290897d97b8902e58fcd995c217309ac661d2db449417eb26fb24fd9832312a26cf065ac5122ba747044ac6eb4898fe2ef8b0ba57642c3989a5ac1dd72785098b3da12ed0d35b3f481a09a9d235386de514526e1267c8fe7178e9e229154f6c0dc9c547927ca61a6f725ca23c33930453fcae7e448dd8407d77dec07a41e8c360a3fafe5e1b50b535814e18ac513528113b2726b6414977096b1a7477d43d0bb319906c8086984f8ae182190b30103e8b4ebacc37438d7fada1c06102f870c85660c52a47d879e57e9643369206ac614a6051fd4eb1a3f4a032b74b59af84b88e1a2620b0f86b8ac59366100a9ef03b7606100f884d25d7fc56ac13c5538ccf985701b64ded1e2ec462a0800861747d2706b3184d1b3a4082b7f1e717d17092c4b70b75e5c14fb69d27dc4bdd0c0a905\"},\"links\":{\"self\":\"http:\\/\\/glue.de.shop-suite.local\\/access-tokens\\/\"}}}"
						}
					]
				},
				{
					"name": "Update customer request access token with new mail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97c06ce6-b033-4213-8ef9-2a85afaa592f",
								"exec": [
									"var response = pm.response.json(), ",
									"    responseData = response.data,",
									"    links = response.data.links;",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"access-tokens\");",
									"});",
									"",
									"pm.test(\"Has id null\", function() {",
									"    pm.expect(responseData.id).to.eql(null);",
									"});",
									"",
									"pm.test(\"Has token type Bearer\", function(){",
									"    pm.expect(responseData.attributes.tokenType).to.eql(\"Bearer\");",
									"});",
									"",
									"pm.test(\"Has expiration time\", function() {",
									"    pm.expect(responseData.attributes.expiresIn).to.eql(28800);",
									"});",
									"",
									"pm.test(\"Has access_token returned\", function() {",
									"    pm.expect(responseData.attributes.accessToken).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has refresh_token returned\", function() {",
									"    pm.expect(responseData.attributes.refreshToken).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(links.self).to.eql(pm.variables.get(\"url\") + \"/access-tokens\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"{{updated_email}}\", \"password\": \"{{password}}\"}}}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": [
						{
							"name": "Request access token",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/access-tokens",
									"host": [
										"{{url}}"
									],
									"path": [
										"access-tokens"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache",
									"name": "Cache-Control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"key": "Connection",
									"value": "close",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Thu, 21 Jun 2018 15:09:53 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "X-Server",
									"value": "spryker-vagrant",
									"name": "X-Server",
									"description": "Custom header"
								},
								{
									"key": "content-language",
									"value": "en_US",
									"name": "content-language",
									"description": "The language the content is in"
								}
							],
							"cookie": [],
							"body": "{\"data\":{\"type\":\"access-tokens\",\"id\":null,\"attributes\":{\"token_type\":\"Bearer\",\"expires_in\":28799,\"access_token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjI3NjYxZTJlMTk1Njc2ZDgzNTI3MDYwZDY5ODY2MGU3MjA1ODIzMTJkZTUwMjZmMTNjZDFkY2YxNjk1NmE0MTBiZGVmNzc5MDJjNGE1ZmRjIn0.eyJhdWQiOiJmcm9udGVuZCIsImp0aSI6IjI3NjYxZTJlMTk1Njc2ZDgzNTI3MDYwZDY5ODY2MGU3MjA1ODIzMTJkZTUwMjZmMTNjZDFkY2YxNjk1NmE0MTBiZGVmNzc5MDJjNGE1ZmRjIiwiaWF0IjoxNTI5NTkzNzkyLCJuYmYiOjE1Mjk1OTM3OTIsImV4cCI6MTUyOTYyMjU5Miwic3ViIjoie1wiY3VzdG9tZXJfcmVmZXJlbmNlXCI6XCJERS0tMVwiLFwiaWRfY3VzdG9tZXJcIjoxfSIsInNjb3BlcyI6WyJjdXN0b21lciJdfQ.U1Ij4aDJ7H34E8XFCXfQORCnytk7wUuGRAGkBGhhWQsHDQucgSJs8V5q820E9Z3V8lEGXoY2vpZJZ-wP41HVFMsXJo10LG6NenekOeRNVpSpBVAcys5cSCBT25sv32OqFnn-g18CkemAgKAx9qCqzIRj6hmrkGjXDWhHpphJYBX40s38hR7IDHK2DSODifm-lyivd7wIohASbi4nVTgL57TsNsiSJJaWje4mc8Vs-rcNiuwl4t6pVvHRDMlDskq_S1tNp8GXrj_ESNtesuFf_F_iiUt20tJFgdqYddeMZNIECRX1S1WQjefRVZBgvvqDUAeemVb75CAF1TCILW8S-Q\",\"refresh_token\":\"def5020076edcef1e548965759216bcb4957c4e3623e567bbcb66de2e2fdc4e00fbe539bd5d77837c48d05dfa223aeea9701eb43b808b1b71d5820222500fc4bfc045686a636cf5479c6d437f0c210e73de919b044e56471d44402496ff5253d23b9d0d821bf4925e27eb2817eba1538abb5f861a03dd0290897d97b8902e58fcd995c217309ac661d2db449417eb26fb24fd9832312a26cf065ac5122ba747044ac6eb4898fe2ef8b0ba57642c3989a5ac1dd72785098b3da12ed0d35b3f481a09a9d235386de514526e1267c8fe7178e9e229154f6c0dc9c547927ca61a6f725ca23c33930453fcae7e448dd8407d77dec07a41e8c360a3fafe5e1b50b535814e18ac513528113b2726b6414977096b1a7477d43d0bb319906c8086984f8ae182190b30103e8b4ebacc37438d7fada1c06102f870c85660c52a47d879e57e9643369206ac614a6051fd4eb1a3f4a032b74b59af84b88e1a2620b0f86b8ac59366100a9ef03b7606100f884d25d7fc56ac13c5538ccf985701b64ded1e2ec462a0800861747d2706b3184d1b3a4082b7f1e717d17092c4b70b75e5c14fb69d27dc4bdd0c0a905\"},\"links\":{\"self\":\"http:\\/\\/glue.de.shop-suite.local\\/access-tokens\\/\"}}}"
						}
					]
				},
				{
					"name": "Negative.Update customer use not unique email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9cf02c35-e425-49a2-b007-60461e7c30b0",
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Customer with this email already exists.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"400\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n    \"attributes\": {\n\t  \"firstName\": \"{{firstName}}\",\n      \"lastName\": \"{{lastName}}\",\n\t  \"gender\":\"Female\",\n      \"salutation\": \"Mr\",\n      \"dateOfBirth\": \"2000-12-31\",\n      \"email\": \"spencor.hopkin@spryker.com\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update customer wrong email format",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9cf02c35-e425-49a2-b007-60461e7c30b0",
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"        pm.response.to.have.status(422);",
									"    });",
									"    ",
									"    pm.test(\"Has correct status in the body\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.errors[0].status).to.eql(422);",
									"    });",
									"    ",
									"     pm.test(\"Has correct code in the body\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"    });",
									"    ",
									"    pm.test(\"Has correct detail in the body\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.errors[0].detail).to.eql(\"email => This value is not a valid email address.\");",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n    \"attributes\": {\n\t  \"firstName\": \"{{firstName}}\",\n      \"lastName\": \"{{lastName}}\",\n\t  \"gender\":\"Female\",\n      \"salutation\": \"Mr\",\n      \"dateOfBirth\": \"2000-12-31\",\n      \"email\": \"new_email_com\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update customer empty email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9cf02c35-e425-49a2-b007-60461e7c30b0",
								"exec": [
									"pm.test(\"Status code is 422\", function() {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct status in the body\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].status).to.eql(422);",
									"});",
									"",
									"pm.test(\"Has correct code in the body\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									"",
									"pm.test(\"Has correct detail in the body\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"email => This value should not be blank.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n    \"attributes\": {\n\t  \"firstName\": \"{{firstName}}\",\n      \"lastName\": \"{{lastName}}\",\n\t  \"gender\":\"Female\",\n      \"salutation\": \"Mr\",\n      \"dateOfBirth\": \"2000-12-31\",\n      \"email\": \"\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update customer email too long value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9cf02c35-e425-49a2-b007-60461e7c30b0",
								"exec": [
									"pm.test(\"Status code is 422\", function() {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct status in the body\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].status).to.eql(422);",
									"});",
									"",
									"pm.test(\"Has correct code in the body\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									"",
									"pm.test(\"Has correct detail in the body\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"email => Email is invalid.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n    \"attributes\": {\n\t  \"firstName\": \"{{firstName}}\",\n      \"lastName\": \"{{lastName}}\",\n\t  \"gender\":\"Female\",\n      \"salutation\": \"Mr\",\n      \"dateOfBirth\": \"2000-12-31\",\n      \"email\": \"Daenerys_of_the_House_Targaryen_the_First_of_Her_Name_The_Unburnt_Queen_of_the_Andals_the_Rhoynar_and_the_First_Men_Queen_of_Meereen_Khaleesi_of_the_Great_Grass_Sea_Protector_of_the_Realm_Lady_Regnant_of_the_Seven_Kingdoms_Breaker_of_Chains_and_Mother_of_Dragons@spryker.com\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update firstName field with null",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e28ee285-b610-4ff0-ac6a-4de0fae50b24",
								"exec": [
									" pm.test(\"Status code is 422\", function () {",
									"        pm.response.to.have.status(422);",
									"    });",
									"    ",
									"    pm.test(\"Has correct status in the body\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.errors[0].status).to.eql(422);",
									"    });",
									"    ",
									"     pm.test(\"Has correct code in the body\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"    });",
									"    ",
									"    pm.test(\"Has correct detail in the body\", function() {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.errors[0].detail).to.eql(\"firstName => This value should not be blank.\");",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n    \"id\": \"string\",\n    \"attributes\": {\n      \"firstName\": null\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update customer data (not existed customer)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "04b6aa86-1e39-4863-b859-6fbba581aed4",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Customer not found.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"402\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n    \"attributes\": {\n        \"salutation\": \"{{salutation}}\",\n        \"firstName\":\"{{firstName}}\",\n        \"lastName\":\"{{lastName}}\",\n        \"email\":\"{{email}}\",\n        \"password\":\"{{password}}\",\n        \"confirmPassword\":\"{{password}}\",\n        \"acceptedTerms\":true\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/DE-3333",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"DE-3333"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update customer data (another customer)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bafcb464-8c5f-4fe5-941c-3297561eeaac",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Unauthorized request.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"411\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n    \"attributes\": {\n        \"salutation\": \"{{salutation}}\",\n        \"firstName\":\"{{firstName}}\",\n        \"lastName\":\"{{lastName}}\",\n        \"email\":\"{{email}}\",\n        \"password\":\"{{password}}\",\n        \"confirmPassword\":\"{{password}}\",\n        \"acceptedTerms\":true\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/DE--1",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"DE--1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update lastName field with null",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "626ebffd-f8bc-4cd3-9eb4-a68f24ed30f6",
								"exec": [
									" pm.test(\"Status code is 422\", function() {",
									"     pm.response.to.have.status(422);",
									" });",
									"",
									" pm.test(\"Has correct status in the body\", function() {",
									"     var jsonData = pm.response.json();",
									"     pm.expect(jsonData.errors[0].status).to.eql(422);",
									" });",
									"",
									" pm.test(\"Has correct code in the body\", function() {",
									"     var jsonData = pm.response.json();",
									"     pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									" });",
									"",
									" pm.test(\"Has correct detail in the body\", function() {",
									"     var jsonData = pm.response.json();",
									"     pm.expect(jsonData.errors[0].detail).to.eql(\"lastName => This value should not be blank.\");",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n    \"attributes\": {\n      \"lastName\": null\n\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update gender field with null",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "316213f0-2964-45dd-96d6-aaca9cb9e7d0",
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Gender is not valid. Possible options are: Male, Female\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"414\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n    \"id\": \"string\",\n    \"attributes\": {\n      \"gender\": null\n\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update customer wrong value for gender",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "316213f0-2964-45dd-96d6-aaca9cb9e7d0",
								"exec": [
									"pm.test(\"Status code is 422\", function() {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json(),",
									"        error = jsonData.errors[0];",
									"",
									"    pm.expect(error.detail).to.eql(\"gender => The value you selected is not a valid choice.\");",
									"",
									"    pm.expect(error.code).to.eql(\"901\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n    \"id\": \"string\",\n    \"attributes\": {\n      \"gender\": \"Test\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update dateOfBirth field with null",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97e4ab0e-f706-4ccc-bbc6-1669e5fbaa83",
								"exec": [
									"pm.test.skip(\"Status code is 422\", function() {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test.skip(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Gender is not valid. Possible options are: Male, Female\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"414\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n    \"id\": \"string\",\n    \"attributes\": {\n      \"dateOfBirth\": null\n\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update salutation field with null",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3af55222-298a-4b56-b243-756bc35734da",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"salutation => This value should not be blank.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n    \"id\": \"string\",\n    \"attributes\": {\n      \"salutation\": null\n\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update firstName field with empty value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e28ee285-b610-4ff0-ac6a-4de0fae50b24",
								"exec": [
									"//Unskip after GLUE-916 release",
									"pm.test.skip(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test.skip(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"firstName => This value should not be blank.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n    \"id\": \"string\",\n    \"attributes\": {\n      \"firstName\": \"\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update firstName too long value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e28ee285-b610-4ff0-ac6a-4de0fae50b24",
								"exec": [
									"//Unskip after GLUE-916 release",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json() , error = jsonData.errors[0];",
									"    ",
									"    pm.expect(error.detail).to.not.be.empty;",
									"    pm.expect(error.code).to.not.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "add11a50-10ed-4bd1-b570-852abb6e9892",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n    \"id\": \"string\",\n    \"attributes\": {\n      \"firstName\": \"Daenerys of the House Targaryen, the First of Her Name, The Unburnt, Queen of the Andals, the Rhoynar and the First Men, Queen of Meereen, Khaleesi of the Great Grass Sea, Protector of the Realm, Lady Regnant of the Seven Kingdoms, Breaker of Chains\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update lastName field with empty value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "626ebffd-f8bc-4cd3-9eb4-a68f24ed30f6",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test.skip(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"lastName => This value should not be blank.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n    \"id\": \"string\",\n    \"attributes\": {\n      \"lastName\": \"\"\n\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update lastName too long value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "626ebffd-f8bc-4cd3-9eb4-a68f24ed30f6",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.not.be.empty;",
									"    pm.expect(jsonData.errors[0].code).to.not.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n    \"id\": \"string\",\n    \"attributes\": {\n      \"lastName\": \"\"\n\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update dateOfBirth field with empty value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f4ccc382-3497-4c15-b94a-0b881768e11e",
								"exec": [
									"pm.test.skip(\"Status code is 422\", function() {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test.skip(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"gender => The value you selected is not a valid choice.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n    \"id\": \"string\",\n    \"attributes\": {\n      \"dateOfBirth\": \"\"\n\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update salutation field with empty value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3af55222-298a-4b56-b243-756bc35734da",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test.skip(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"salutation => This value should not be blank.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"    pm.expect(jsonData.errors[1].code).to.eql(\"901\");",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"salutation => The value you selected is not a valid choice.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n    \"id\": \"string\",\n    \"attributes\": {\n      \"salutation\": \"\"\n\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update gender field with empty value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a374e32e-847f-4dc6-ab70-b00f90be19fb",
								"exec": [
									"pm.test(\"Status code is 422\", function() {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test.skip(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"gender => The value you selected is not a valid choice.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n    \"id\": \"string\",\n    \"attributes\": {\n      \"gender\": \"\"\n\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update customer data post method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "44fb0606-892c-489d-9c17-7eff835c834f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n   \n    \"attributes\": {\n      \"firstName\": \"string\",\n      \"lastName\": \"string\",\n\n      \"salutation\": \"Mr\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update customer gender with valid value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7edf20cc-afc8-44ef-a873-36853dba9b12",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(responseData.type).to.eql(\"customers\");",
									"    pm.expect(responseData.type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"    pm.expect(responseData.id).to.eql(pm.variables.get(\"customer_reference\"));",
									"});",
									"",
									"pm.test(\"Has correct attributes\", function() {",
									"    pm.expect(responseData.attributes.gender).to.be.eql(\"Male\")",
									"});",
									"",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n   \n    \"attributes\": {\n\t\t\"gender\": \"Male\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update customer dateofbirth with valid value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5724ebc9-ae93-4621-9d7a-5a0f11d9b212",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(responseData.type).to.eql(\"customers\");",
									"    pm.expect(responseData.type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"    pm.expect(responseData.id).to.eql(pm.variables.get(\"customer_reference\"));",
									"});",
									"",
									"pm.test(\"Has correct attributes\", function() {",
									"    pm.expect(responseData.attributes.dateOfBirth).to.be.eql(\"1991-05-05\");",
									"});",
									"",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n    \"attributes\": {\n      \"dateOfBirth\": \"1991-05-05\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update customer with wrong value for dateofbirth",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5724ebc9-ae93-4621-9d7a-5a0f11d9b212",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json(), error = jsonData.errors[0];",
									"    ",
									"    pm.expect(error.detail).to.eql(\"dateOfBirth => This value is not a valid date.\");",
									"    pm.expect(error.code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n    \"attributes\": {\n      \"dateOfBirth\": \"test\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update customer wrong formatted data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4519e31a-6f4e-4e55-906c-11c71f370124",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json(), error = jsonData.errors[0];",
									"    ",
									"    pm.expect(error.detail).to.eql(\"Post data is invalid.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n       \"attributes\": {\n       \"salutation\": Mr,\n        \"firstName\":Test FirstName,\n        \"lastName\":Test LastName,\n        \"email\":test@spryker.com,\n        \"password\":change123,\n        \"confirmPassword\":change123,\n        \"acceptedTerms\":true\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update customer wrong request type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7edf20cc-afc8-44ef-a873-36853dba9b12",
								"exec": [
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test.skip(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json(), error = jsonData.errors[0];",
									"",
									"    pm.expect(error.detail).to.not.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"guest-cart-items\",\n   \n    \"attributes\": {\n\t\t\"gender\": \"Male\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update customer wrong value in request type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7edf20cc-afc8-44ef-a873-36853dba9b12",
								"exec": [
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json(), error = jsonData.errors[0];",
									"",
									"    pm.expect(error.detail).to.not.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"TEST\",\n   \n    \"attributes\": {\n\t\t\"gender\": \"Male\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update customer empty request type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7edf20cc-afc8-44ef-a873-36853dba9b12",
								"exec": [
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json(), error = jsonData.errors[0];",
									"",
									"    pm.expect(error.detail).to.not.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"\",\n   \n    \"attributes\": {\n\t\t\"gender\": \"Male\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update customer  wrong reference",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7edf20cc-afc8-44ef-a873-36853dba9b12",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json(), error = jsonData.errors[0];",
									"    ",
									"    pm.expect(error.code).to.be.eql(\"402\");",
									"    pm.expect(error.detail).to.be.eql(\"Customer not found.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n   \n    \"attributes\": {\n\t\t\"gender\": \"Male\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/qwe123",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"qwe123"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update customer  missing token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7edf20cc-afc8-44ef-a873-36853dba9b12",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json(), error = jsonData.errors[0];",
									"    ",
									"    pm.expect(error.code).to.be.eql(\"002\");",
									"    pm.expect(error.detail).to.be.eql(\"Missing access token.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n   \n    \"attributes\": {\n\t\t\"gender\": \"Male\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update customer missing reference",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7edf20cc-afc8-44ef-a873-36853dba9b12",
								"exec": [
									"//Unskip after GLUE-916 release",
									"pm.test.skip(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test.skip(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json(), error = jsonData.errors[0];",
									"    ",
									"    pm.expect(error.code).to.not.be.empty;",
									"    pm.expect(error.detail).to.not.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n   \n    \"attributes\": {\n\t\t\"gender\": \"Male\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "68749e00-c774-4b55-9b9a-ce0462740b61",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b4e77322-2686-4984-806b-d32b21ab994c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						},
						"description": "This test is to verify that request returns valid message and status code if customer does not have any addresses"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "dff4dd0d-29c7-434c-87e3-12feca77ed0d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5b9d7850-f194-4cb2-a20a-a8bf6af9dfca",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Customer - Delete customer",
			"item": [
				{
					"name": "Delete customer/Create a customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c555134c-6a06-4c2a-ae7c-2e4330120614",
								"exec": [
									"if ('errors' in pm.response.json() && pm.response.json().errors[0].code == 400) {",
									"    var email = pm.variables.get(\"email\");",
									"    pm.variables.set(\"email\", new Date().getTime() + '@mail.com');",
									"    postman.setNextRequest(request.name);",
									"} else {",
									"    var responseData = pm.response.json().data;",
									"    ",
									"    pm.variables.set(\"customer_reference\", responseData.id);",
									"    pm.variables.set(\"customer_create_at\", responseData.attributes.createdAt);",
									"    pm.variables.set(\"customer_update_at\", responseData.attributes.updatedAt);",
									"    ",
									"    pm.test(\"Status code is 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"    ",
									"    pm.test(\"Has correct type and id returned\", function () {",
									"        pm.expect(responseData.type).to.eql(\"customers\");",
									"        pm.expect(responseData.id).to.eql(pm.variables.get(\"customer_reference\"));",
									"    });",
									"    ",
									"    pm.test(\"Has correct first, lastname  and salution\", function () {",
									"        pm.expect(responseData.attributes.firstName).to.eql(pm.variables.get(\"firstName\"));",
									"        pm.expect(responseData.attributes.lastName).to.eql(pm.variables.get(\"lastName\"));",
									"        pm.expect(responseData.attributes.salutation).to.eql(pm.variables.get(\"salutation\"));",
									"    });",
									"    ",
									"    pm.test(\"Create_at returned\", function (){",
									"        // need to add the assert to check the null in the field ",
									"        pm.expect(responseData.attributes.createdAt).to.eql(pm.variables.get(\"customer_create_at\"));",
									"    });",
									"    ",
									"    pm.test(\"Create_at returned\", function (){",
									"        // need to add the assert to check the null in the field ",
									"        pm.expect(responseData.attributes.updatedAt).to.eql(pm.variables.get(\"customer_update_at\"));",
									"    });",
									"    ",
									"    ",
									"    pm.test(\"Has self link\", function() {",
									"        pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\"));",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9, en;q=0.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":\n\t{\n\t\t\"type\":\"customers\",\n\t\t\t\"attributes\":{\n\t\t\t\t\"salutation\":\"{{salutation}}\",\n\t\t\t\t\"firstName\":\"{{firstName}}\",\n\t\t\t\t\"lastName\":\"{{lastName}}\",\n\t\t\t\t\"email\":\"{{email}}\",\n\t\t\t\t\"password\":\"{{password}}\",\n\t\t\t\t\"confirmPassword\":\"{{password}}\",\n\t\t\t\t\"acceptedTerms\":true\n\t\t\t\t\n\t\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab0b24ee-89e0-420c-8649-bac8572648c7",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.variables.set(\"token\", responseData.attributes.accessToken);",
									"pm.variables.set(\"refresh-token\", responseData.attributes.refreshToken);",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"access-tokens\");",
									"});",
									"",
									"pm.test(\"Has id null\", function() {",
									"    pm.expect(responseData.id).to.eql(null);",
									"});",
									"",
									"pm.test(\"Has token type Bearer\", function(){",
									"    pm.expect(responseData.attributes.tokenType).to.eql(\"Bearer\");",
									"});",
									"",
									"pm.test(\"Has expiration time\", function() {",
									"    pm.expect(responseData.attributes.expiresIn).to.eql(28800);",
									"});",
									"",
									"pm.test(\"Has access token returned\", function() {",
									"    pm.expect(responseData.attributes.accessToken).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has refresh token returned\", function() {",
									"    pm.expect(responseData.attributes.refreshToken).to.not.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"{{email}}\", \"password\": \"change123\"}}}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": [
						{
							"name": "Request access token",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/access-tokens",
									"host": [
										"{{url}}"
									],
									"path": [
										"access-tokens"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache",
									"name": "Cache-Control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"key": "Connection",
									"value": "close",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Thu, 21 Jun 2018 15:09:53 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "X-Server",
									"value": "spryker-vagrant",
									"name": "X-Server",
									"description": "Custom header"
								},
								{
									"key": "content-language",
									"value": "en_US",
									"name": "content-language",
									"description": "The language the content is in"
								}
							],
							"cookie": [],
							"body": "{\"data\":{\"type\":\"access-tokens\",\"id\":null,\"attributes\":{\"token_type\":\"Bearer\",\"expires_in\":28799,\"access_token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjI3NjYxZTJlMTk1Njc2ZDgzNTI3MDYwZDY5ODY2MGU3MjA1ODIzMTJkZTUwMjZmMTNjZDFkY2YxNjk1NmE0MTBiZGVmNzc5MDJjNGE1ZmRjIn0.eyJhdWQiOiJmcm9udGVuZCIsImp0aSI6IjI3NjYxZTJlMTk1Njc2ZDgzNTI3MDYwZDY5ODY2MGU3MjA1ODIzMTJkZTUwMjZmMTNjZDFkY2YxNjk1NmE0MTBiZGVmNzc5MDJjNGE1ZmRjIiwiaWF0IjoxNTI5NTkzNzkyLCJuYmYiOjE1Mjk1OTM3OTIsImV4cCI6MTUyOTYyMjU5Miwic3ViIjoie1wiY3VzdG9tZXJfcmVmZXJlbmNlXCI6XCJERS0tMVwiLFwiaWRfY3VzdG9tZXJcIjoxfSIsInNjb3BlcyI6WyJjdXN0b21lciJdfQ.U1Ij4aDJ7H34E8XFCXfQORCnytk7wUuGRAGkBGhhWQsHDQucgSJs8V5q820E9Z3V8lEGXoY2vpZJZ-wP41HVFMsXJo10LG6NenekOeRNVpSpBVAcys5cSCBT25sv32OqFnn-g18CkemAgKAx9qCqzIRj6hmrkGjXDWhHpphJYBX40s38hR7IDHK2DSODifm-lyivd7wIohASbi4nVTgL57TsNsiSJJaWje4mc8Vs-rcNiuwl4t6pVvHRDMlDskq_S1tNp8GXrj_ESNtesuFf_F_iiUt20tJFgdqYddeMZNIECRX1S1WQjefRVZBgvvqDUAeemVb75CAF1TCILW8S-Q\",\"refresh_token\":\"def5020076edcef1e548965759216bcb4957c4e3623e567bbcb66de2e2fdc4e00fbe539bd5d77837c48d05dfa223aeea9701eb43b808b1b71d5820222500fc4bfc045686a636cf5479c6d437f0c210e73de919b044e56471d44402496ff5253d23b9d0d821bf4925e27eb2817eba1538abb5f861a03dd0290897d97b8902e58fcd995c217309ac661d2db449417eb26fb24fd9832312a26cf065ac5122ba747044ac6eb4898fe2ef8b0ba57642c3989a5ac1dd72785098b3da12ed0d35b3f481a09a9d235386de514526e1267c8fe7178e9e229154f6c0dc9c547927ca61a6f725ca23c33930453fcae7e448dd8407d77dec07a41e8c360a3fafe5e1b50b535814e18ac513528113b2726b6414977096b1a7477d43d0bb319906c8086984f8ae182190b30103e8b4ebacc37438d7fada1c06102f870c85660c52a47d879e57e9643369206ac614a6051fd4eb1a3f4a032b74b59af84b88e1a2620b0f86b8ac59366100a9ef03b7606100f884d25d7fc56ac13c5538ccf985701b64ded1e2ec462a0800861747d2706b3184d1b3a4082b7f1e717d17092c4b70b75e5c14fb69d27dc4bdd0c0a905\"},\"links\":{\"self\":\"http:\\/\\/glue.de.shop-suite.local\\/access-tokens\\/\"}}}"
						}
					]
				},
				{
					"name": "Delete customer valid request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "68749e00-c774-4b55-9b9a-ce0462740b61",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b4e77322-2686-4984-806b-d32b21ab994c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						},
						"description": "This test is to verify that request returns valid message and status code if customer does not have any addresses"
					},
					"response": []
				},
				{
					"name": "Delete not existing customer reference",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1b7214ee-731a-49b2-9681-95735781fa66",
								"exec": [
									"pm.test(\"Status code is 404\", function() {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData.errors[0].detail).to.eql(\"Customer not found.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/DE888",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"DE888"
							]
						},
						"description": "This test is to verify that request returns valid message and status code if customer does not have any addresses"
					},
					"response": []
				},
				{
					"name": "Delete customer  access token from another customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "68749e00-c774-4b55-9b9a-ce0462740b61",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json(), error = jsonData.errors[0];",
									"    ",
									"    pm.expect(error.code).to.eql(\"411\");",
									"    pm.expect(error.detail).to.eql(\"Unauthorized request.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b4e77322-2686-4984-806b-d32b21ab994c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/DE--2",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"DE--2"
							]
						},
						"description": "This test is to verify that request returns valid message and status code if customer does not have any addresses"
					},
					"response": []
				},
				{
					"name": "Delete customer by invalid url",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8d271aec-555e-4b51-b478-2976d3ac6707",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customrs/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customrs",
								"{{customer_reference}}"
							]
						},
						"description": "This test is to verify that request returns valid message and status code if customer does not have any addresses"
					},
					"response": []
				},
				{
					"name": "Delete customer missing customer reference",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8d271aec-555e-4b51-b478-2976d3ac6707",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    var jsonData = pm.response.json(), error = jsonData.errors[0];",
									"    ",
									"    pm.expect(error.code).to.eql(\"405\");",
									"    pm.expect(error.detail).to.eql(\"Customer reference is missing.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								""
							]
						},
						"description": "This test is to verify that request returns valid message and status code if customer does not have any addresses"
					},
					"response": []
				},
				{
					"name": "Delete list of customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "515d5165-d710-4c97-8b8d-a65bfd13507a",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Customer reference is missing.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers"
							]
						},
						"description": "This test is to verify that request returns valid message and status code if customer does not have any addresses"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4d082685-394e-4566-a65b-019890107e50",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f8ee2ebd-f208-4cde-8bd7-511ea23f5ea0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Customer - Create addresses",
			"item": [
				{
					"name": "Create addresses/Request to create a customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7eafac37-492b-45a6-9983-498c206650bc",
								"exec": [
									"if ('errors' in pm.response.json() && pm.response.json().errors[0].code == 400) {",
									"    var email = pm.variables.get(\"email\");",
									"    pm.variables.set(\"email\", new Date().getTime() + '@mail.com');",
									"    postman.setNextRequest(request.name);",
									"} else {",
									"    var responseData = pm.response.json().data;",
									"",
									"    pm.variables.set(\"customer_reference\", responseData.id);",
									"    pm.variables.set(\"customer_create_at\", responseData.attributes.createdAt);",
									"    pm.variables.set(\"customer_update_at\", responseData.attributes.updatedAt);",
									"    ",
									"    pm.test(\"Status code is 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"    ",
									"    pm.test(\"Has correct type and id returned\", function () {",
									"        pm.expect(responseData.type).to.eql(\"customers\");",
									"        pm.expect(responseData.id).to.eql(pm.variables.get(\"customer_reference\"));",
									"    });",
									"    ",
									"    pm.test(\"Has correct first, lastname  and salution\", function () {",
									"        pm.expect(responseData.attributes.firstName).to.eql(pm.variables.get(\"firstName\"));",
									"        pm.expect(responseData.attributes.lastName).to.eql(pm.variables.get(\"lastName\"));",
									"        pm.expect(responseData.attributes.salutation).to.eql(pm.variables.get(\"salutation\"));",
									"    });",
									"    ",
									"    pm.test(\"Create_at returned\", function (){",
									"        pm.expect(responseData.attributes.createdAt).to.not.be.empty;",
									"    });",
									"    ",
									"    pm.test(\"Updated_at returned\", function (){",
									"              pm.expect(responseData.attributes.updatedAt).to.not.be.empty;",
									"        pm.expect(responseData.attributes.updatedAt).to.eql(pm.variables.get(\"customer_update_at\"));",
									"    });",
									"    ",
									"    pm.test(\"Has self link\", function() {",
									"        pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\"));",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":\n\t{\n\t\t\"type\":\"customers\",\n\t\t\t\"attributes\":{\n\t\t\t\t\"salutation\":\"{{salutation}}\",\n\t\t\t\t\"firstName\":\"{{firstName}}\",\n\t\t\t\t\"lastName\":\"{{lastName}}\",\n\t\t\t\t\"email\":\"{{email}}\",\n\t\t\t\t\"password\":\"{{password}}\",\n\t\t\t\t\"confirmPassword\":\"{{password}}\",\n\t\t\t\t\"acceptedTerms\":true\n\t\t\t\t\n\t\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request to  access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51fbb4d5-1f7e-45ce-83c6-6672d3ea5741",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.variables.set(\"token\", responseData.attributes.accessToken);",
									"pm.variables.set(\"refresh_token\", responseData.attributes.refreshToken);",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"access-tokens\");",
									"});",
									"",
									"pm.test(\"Has id null\", function() {",
									"    pm.expect(responseData.id).to.eql(null);",
									"});",
									"",
									"pm.test(\"Has token type Bearer\", function(){",
									"    pm.expect(responseData.attributes.tokenType).to.eql(\"Bearer\");",
									"});",
									"",
									"pm.test(\"Has expiration time\", function() {",
									"    pm.expect(responseData.attributes.expiresIn).to.eql(28800);",
									"});",
									"",
									"pm.test(\"Has access_token returned\", function() {",
									"    pm.expect(responseData.attributes.accessToken).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has refresh_token returned\", function() {",
									"    pm.expect(responseData.attributes.refreshToken).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/access-tokens\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"{{email}}\", \"password\": \"change123\"}}}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": [
						{
							"name": "Request access token",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/access-tokens",
									"host": [
										"{{url}}"
									],
									"path": [
										"access-tokens"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache",
									"name": "Cache-Control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"key": "Connection",
									"value": "close",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Thu, 21 Jun 2018 15:09:53 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "X-Server",
									"value": "spryker-vagrant",
									"name": "X-Server",
									"description": "Custom header"
								},
								{
									"key": "content-language",
									"value": "en_US",
									"name": "content-language",
									"description": "The language the content is in"
								}
							],
							"cookie": [],
							"body": "{\"data\":{\"type\":\"access-tokens\",\"id\":null,\"attributes\":{\"token_type\":\"Bearer\",\"expires_in\":28799,\"access_token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjI3NjYxZTJlMTk1Njc2ZDgzNTI3MDYwZDY5ODY2MGU3MjA1ODIzMTJkZTUwMjZmMTNjZDFkY2YxNjk1NmE0MTBiZGVmNzc5MDJjNGE1ZmRjIn0.eyJhdWQiOiJmcm9udGVuZCIsImp0aSI6IjI3NjYxZTJlMTk1Njc2ZDgzNTI3MDYwZDY5ODY2MGU3MjA1ODIzMTJkZTUwMjZmMTNjZDFkY2YxNjk1NmE0MTBiZGVmNzc5MDJjNGE1ZmRjIiwiaWF0IjoxNTI5NTkzNzkyLCJuYmYiOjE1Mjk1OTM3OTIsImV4cCI6MTUyOTYyMjU5Miwic3ViIjoie1wiY3VzdG9tZXJfcmVmZXJlbmNlXCI6XCJERS0tMVwiLFwiaWRfY3VzdG9tZXJcIjoxfSIsInNjb3BlcyI6WyJjdXN0b21lciJdfQ.U1Ij4aDJ7H34E8XFCXfQORCnytk7wUuGRAGkBGhhWQsHDQucgSJs8V5q820E9Z3V8lEGXoY2vpZJZ-wP41HVFMsXJo10LG6NenekOeRNVpSpBVAcys5cSCBT25sv32OqFnn-g18CkemAgKAx9qCqzIRj6hmrkGjXDWhHpphJYBX40s38hR7IDHK2DSODifm-lyivd7wIohASbi4nVTgL57TsNsiSJJaWje4mc8Vs-rcNiuwl4t6pVvHRDMlDskq_S1tNp8GXrj_ESNtesuFf_F_iiUt20tJFgdqYddeMZNIECRX1S1WQjefRVZBgvvqDUAeemVb75CAF1TCILW8S-Q\",\"refresh_token\":\"def5020076edcef1e548965759216bcb4957c4e3623e567bbcb66de2e2fdc4e00fbe539bd5d77837c48d05dfa223aeea9701eb43b808b1b71d5820222500fc4bfc045686a636cf5479c6d437f0c210e73de919b044e56471d44402496ff5253d23b9d0d821bf4925e27eb2817eba1538abb5f861a03dd0290897d97b8902e58fcd995c217309ac661d2db449417eb26fb24fd9832312a26cf065ac5122ba747044ac6eb4898fe2ef8b0ba57642c3989a5ac1dd72785098b3da12ed0d35b3f481a09a9d235386de514526e1267c8fe7178e9e229154f6c0dc9c547927ca61a6f725ca23c33930453fcae7e448dd8407d77dec07a41e8c360a3fafe5e1b50b535814e18ac513528113b2726b6414977096b1a7477d43d0bb319906c8086984f8ae182190b30103e8b4ebacc37438d7fada1c06102f870c85660c52a47d879e57e9643369206ac614a6051fd4eb1a3f4a032b74b59af84b88e1a2620b0f86b8ac59366100a9ef03b7606100f884d25d7fc56ac13c5538ccf985701b64ded1e2ec462a0800861747d2706b3184d1b3a4082b7f1e717d17092c4b70b75e5c14fb69d27dc4bdd0c0a905\"},\"links\":{\"self\":\"http:\\/\\/glue.de.shop-suite.local\\/access-tokens\\/\"}}}"
						}
					]
				},
				{
					"name": "Request to create the first address with default values",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7851500-d8d5-46de-b1c8-795ddefd9b69",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(responseData.type).to.eql(\"addresses\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has correct addresses attributes\", function() {",
									"    pm.expect(responseData.attributes.salutation).to.be.eql(\"Mr\");",
									"    pm.expect(responseData.attributes.firstName).to.be.eql(\"John\");",
									"    pm.expect(responseData.attributes.lastName).to.be.eql(\"Doe\");",
									"    pm.expect(responseData.attributes.address1).to.be.eql(\"Default, 33, 11\");",
									"    pm.expect(responseData.attributes.address2).to.be.eql(\"b\");",
									"    pm.expect(responseData.attributes.address3).to.be.eql(\"aaa\");",
									"    pm.expect(responseData.attributes.zipCode).to.be.eql(\"12312\");",
									"    pm.expect(responseData.attributes.city).to.be.eql(\"Berlin\");",
									"    pm.expect(responseData.attributes.country).to.be.eql(\"Germany\");",
									"    pm.expect(responseData.attributes.iso2Code).to.be.eql(\"DE\");",
									"    pm.expect(responseData.attributes.company).to.be.eql(null);",
									"    pm.expect(responseData.attributes.phone).to.be.eql(\"22111-3-4-5\");",
									"    pm.expect(responseData.attributes.isDefaultShipping).to.be.eql(true);",
									"    pm.expect(responseData.attributes.isDefaultBilling).to.be.eql(true);",
									"});  ",
									"",
									"// if this address is first we always have true for Shipping and Billing ",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\") + \"/addresses/\" + responseData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Default, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\" : \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Request to create the address with missing token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7851500-d8d5-46de-b1c8-795ddefd9b69",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.be.eql(\"Missing access token.\");",
									"});",
									"",
									"pm.test(\"Has correct error code returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].code).to.eql('002');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Default, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\" : \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Request to create the address with badly formatted data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7851500-d8d5-46de-b1c8-795ddefd9b69",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.be.eql(\"Post data is invalid.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n           \"salutation\":Mr,\n            \"firstName\":John,\n            \"lastName\":Doe,\n            \"address1\": Street,\n            \"address2\": 12cbs,\n            \"zipCode\": 123,\n            \"city\": Berlin,\n            \"country\": Germany,\n            \"iso2Code\": DE,\n            \"company\": null,\n            \"phone\": 123456,\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false \n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Request to create the address with wrong request type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7851500-d8d5-46de-b1c8-795ddefd9b69",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Has error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"TEST\",\n     \"attributes\": {\n           \"salutation\":Mr,\n            \"firstName\":John,\n            \"lastName\":Doe,\n            \"address1\": Street,\n            \"address2\": 12cbs,\n            \"zipCode\": 123,\n            \"city\": Berlin,\n            \"country\": Germany,\n            \"iso2Code\": DE,\n            \"company\": null,\n            \"phone\": 123456,\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false \n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Request to create the address with empty request type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7851500-d8d5-46de-b1c8-795ddefd9b69",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Has error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"\",\n     \"attributes\": {\n           \"salutation\":Mr,\n            \"firstName\":John,\n            \"lastName\":Doe,\n            \"address1\": Street,\n            \"address2\": 12cbs,\n            \"zipCode\": 123,\n            \"city\": Berlin,\n            \"country\": Germany,\n            \"iso2Code\": DE,\n            \"company\": null,\n            \"phone\": 123456,\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false \n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Request to create address with only mandatory values",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7851500-d8d5-46de-b1c8-795ddefd9b69",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(responseData.type).to.eql(\"addresses\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has correct addresses attributes\", function() {",
									"    pm.expect(responseData.attributes.salutation).to.be.eql(\"Mr\");",
									"    pm.expect(responseData.attributes.firstName).to.be.eql(\"John\");",
									"    pm.expect(responseData.attributes.lastName).to.be.eql(\"Doe\");",
									"    pm.expect(responseData.attributes.address1).to.be.eql(\"Default, 33, 11\");",
									"    pm.expect(responseData.attributes.address2).to.be.eql(\"b\");",
									"    pm.expect(responseData.attributes.address3).to.be.eql(null);",
									"    pm.expect(responseData.attributes.zipCode).to.be.eql(\"12312\");",
									"    pm.expect(responseData.attributes.city).to.be.eql(\"Berlin\");",
									"    pm.expect(responseData.attributes.country).to.be.eql(\"Germany\");",
									"    pm.expect(responseData.attributes.iso2Code).to.be.eql(\"DE\");",
									"    pm.expect(responseData.attributes.company).to.be.eql(null);",
									"    pm.expect(responseData.attributes.phone).to.be.eql(null);",
									"    pm.expect(responseData.attributes.isDefaultShipping).to.be.eql(true);",
									"    pm.expect(responseData.attributes.isDefaultBilling).to.be.eql(false);",
									"});  ",
									"",
									"// if this address is first we always have true for Shipping and Billing ",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\") + \"/addresses/\" + responseData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Default, 33, 11\",\n            \"address2\": \"b\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\" : \"DE\",\n            \"isDefaultShipping\": true,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Request to create shipping address",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0960216-2ce4-45eb-9d10-0139efbe15ef",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(responseData.type).to.eql(\"addresses\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has correct attributes\", function() {",
									"    pm.expect(responseData.attributes.salutation).to.be.eql(\"Mr\");",
									"    pm.expect(responseData.attributes.firstName).to.be.eql(\"John\");",
									"    pm.expect(responseData.attributes.lastName).to.be.eql(\"Doe\");",
									"    pm.expect(responseData.attributes.address1).to.be.eql(\"Shipping, 33, 11\");",
									"    pm.expect(responseData.attributes.address2).to.be.eql(\"b\");",
									"    pm.expect(responseData.attributes.address3).to.be.eql(\"aaa\");",
									"    pm.expect(responseData.attributes.zipCode).to.be.eql(\"12312\");",
									"    pm.expect(responseData.attributes.city).to.be.eql(\"Berlin\");",
									"    pm.expect(responseData.attributes.country).to.be.eql(\"Germany\");",
									"    pm.expect(responseData.attributes.iso2Code).to.be.eql(\"DE\");",
									"    pm.expect(responseData.attributes.company).to.be.eql(null);",
									"    pm.expect(responseData.attributes.phone).to.be.eql(\"22111-3-4-5\");",
									"    pm.expect(responseData.attributes.isDefaultShipping).to.be.eql(true);",
									"    pm.expect(responseData.attributes.isDefaultBilling).to.be.eql(false);",
									"});",
									"",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\") + \"/addresses/\" + responseData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Shipping, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": true,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Negative to create shipping address without isDefaultShipping",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0960216-2ce4-45eb-9d10-0139efbe15ef",
								"exec": [
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Has error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Shipping, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": ,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Negative to create shipping address with wrong isDefaultShipping",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0960216-2ce4-45eb-9d10-0139efbe15ef",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"isDefaultShipping => This value should be of type bool.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Shipping, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": \"test\",\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Negative to create shipping address with wrong type isDefaultShipping",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0960216-2ce4-45eb-9d10-0139efbe15ef",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"isDefaultShipping => This value should be of type bool.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Shipping, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": \"true\",\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Request to create billing address",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9dd274d8-3440-43f1-9177-960f1cf10bb7",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(responseData.type).to.eql(\"addresses\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has correct attributes\", function() {",
									"    pm.expect(responseData.attributes.salutation).to.be.eql(\"Mr\");",
									"    pm.expect(responseData.attributes.firstName).to.be.eql(\"John\");",
									"    pm.expect(responseData.attributes.lastName).to.be.eql(\"Doe\");",
									"    pm.expect(responseData.attributes.address1).to.be.eql(\"billing, 33, 11\");",
									"    pm.expect(responseData.attributes.address2).to.be.eql(\"b\");",
									"    pm.expect(responseData.attributes.address3).to.be.eql(\"aaa\");",
									"    pm.expect(responseData.attributes.zipCode).to.be.eql(\"12312\");",
									"    pm.expect(responseData.attributes.city).to.be.eql(\"Berlin\");",
									"    pm.expect(responseData.attributes.country).to.be.eql(\"Germany\");",
									"    pm.expect(responseData.attributes.iso2Code).to.be.eql(\"DE\");",
									"    pm.expect(responseData.attributes.company).to.be.eql(null);",
									"    pm.expect(responseData.attributes.phone).to.be.eql(\"22111-3-4-5\");",
									"    pm.expect(responseData.attributes.isDefaultShipping).to.be.eql(false);",
									"    pm.expect(responseData.attributes.isDefaultBilling).to.be.eql(true);",
									"});",
									"",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\") + \"/addresses/\" + responseData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"billing, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": true\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Request to create billing address without isDefaultBilling",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9dd274d8-3440-43f1-9177-960f1cf10bb7",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"isDefaultBilling => This field is missing.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"billing, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": true\n\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Request to create billing address with wrong isDefaultBilling",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9dd274d8-3440-43f1-9177-960f1cf10bb7",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"isDefaultBilling => This value should be of type bool.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"billing, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": true,\n            \"isDefaultBilling\": \"test\"\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Request to create billing address with wrong type isDefaultBilling",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9dd274d8-3440-43f1-9177-960f1cf10bb7",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"isDefaultBilling => This value should be of type bool.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"billing, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": true,\n            \"isDefaultBilling\": \"false\"\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Request to create not billing and shipping address",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff0d9efc-372a-422d-b2e7-3b2569631c7f",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(responseData.type).to.eql(\"addresses\");",
									"    pm.expect(responseData.type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has correct attributes\", function() {",
									"    pm.expect(responseData.attributes.salutation).to.be.eql(\"Mr\");",
									"    pm.expect(responseData.attributes.firstName).to.be.eql(\"John\");",
									"    pm.expect(responseData.attributes.lastName).to.be.eql(\"Doe\");",
									"    pm.expect(responseData.attributes.address1).to.be.eql(\"No, 33, 11\");",
									"    pm.expect(responseData.attributes.address2).to.be.eql(\"b\");",
									"    pm.expect(responseData.attributes.address3).to.be.eql(\"aaa\");",
									"    pm.expect(responseData.attributes.zipCode).to.be.eql(\"12312\");",
									"    pm.expect(responseData.attributes.city).to.be.eql(\"Berlin\");",
									"    pm.expect(responseData.attributes.country).to.be.eql(\"Germany\");",
									"    pm.expect(responseData.attributes.iso2Code).to.be.eql(\"DE\");",
									"    pm.expect(responseData.attributes.company).to.be.eql(null);",
									"    pm.expect(responseData.attributes.phone).to.be.eql(\"22111-3-4-5\");",
									"    pm.expect(responseData.attributes.isDefaultShipping).to.be.eql(false);",
									"    pm.expect(responseData.attributes.isDefaultBilling).to.be.eql(false);",
									"});",
									"",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\") + \"/addresses/\" + responseData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"No, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Negative. Create address for another customer (wrong customer reference in the url)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d8d8dafa-302b-4c82-aed4-bbf708d4488a",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status code is 403 \", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Error code is 412\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"411\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Unauthorized request.\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"customer_reference\": \"{{customer_reference}}\",\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\" : \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/DE--1/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"DE--1",
								"addresses"
							]
						},
						"description": "This test is to verify that one customer cannot create address for anothe customer"
					},
					"response": []
				},
				{
					"name": "Negative. Create address without Salutation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f376a67c-4756-4bbd-8a5f-f458f75326f1",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"salutation => This field is missing.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"customer_reference\": \"{{customer_reference}}\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\" : \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Negative. Create address with wrong Salutation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f376a67c-4756-4bbd-8a5f-f458f75326f1",
								"exec": [
									"pm.test(\"Status code is 422\", function() {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"salutation => The value you selected is not a valid choice.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n     \t\t\"customer_reference\": \"{{customer_reference}}\",\n     \t\t\"salutation\": \"Herr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\" : \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Negative. Create address without firstName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "521dc54e-355e-43db-a328-66707e8d33ef",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"firstName => This field is missing.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "da8720d0-cada-4c70-a7e1-b20c69fa56e7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"customer_reference\": \"{{customer_reference}}\",\n            \"salutation\": \"Mr\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\" : \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Negative. Create address with too long firstName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "521dc54e-355e-43db-a328-66707e8d33ef",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"firstName => This value is too long. It should have 100 characters or less.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "da8720d0-cada-4c70-a7e1-b20c69fa56e7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"customer_reference\": \"{{customer_reference}}\",\n            \"salutation\": \"Mr\",\n             \"firstName\": \"Daenerys of the House Targaryen, the First of Her Name, The Unburnt, Queen of the Andals, the Rhoynar and the First Men, Queen of Meereen,Khaleesi of the Great Grass Sea, Protector of the Realm, Lady Regnant of the Seven Kingdoms, Breaker of Chains\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\" : \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Negative. Create address without lastName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f5029ab-5147-430d-a3e1-97d317836999",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"lastName => This field is missing.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"customer_reference\": \"{{customer_reference}}\",\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\" : \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Negative. Create address with too long lastName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f5029ab-5147-430d-a3e1-97d317836999",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"lastName => This value is too long. It should have 100 characters or less.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"customer_reference\": \"{{customer_reference}}\",\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\":\"the First of Her Name, The Unburnt, Queen of the Andals, the Rhoynar and the First MenQueen of Meereen, Khaleesi of the Great Grass Sea, Protector of the Realm, Lady Regnant of the Seven Kingdoms, Breaker of Chains and Mother of Dragons\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\" : \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Negative. Create address without address1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a7030c60-77b5-4c9c-9593-bbf3c90b3f7c",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"address1 => This field is missing.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"customer_reference\": \"{{customer_reference}}\",\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\" : \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Negative. Create address with too long address1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a7030c60-77b5-4c9c-9593-bbf3c90b3f7c",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"address1 => This value is too long. It should have 255 characters or less.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"customer_reference\": \"{{customer_reference}}\",\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test 1234567890 1234567890 Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test 1234567890 1234567890 Test Test Test Test Test Test Test Test Test Test Test\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\" : \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Negative. Create address without address2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53f1a4ab-1b7a-43d4-b2fd-6b4016201f0e",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"address2 => This field is missing.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"customer_reference\": \"{{customer_reference}}\",\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\" : \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Negative. Create address with too long address2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53f1a4ab-1b7a-43d4-b2fd-6b4016201f0e",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"address2 => This value is too long. It should have 255 characters or less.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"customer_reference\": \"{{customer_reference}}\",\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"1234567890 123456789012345678901234567890 123456789012345678901234567890 123456789012345678901234567890 123456789012345678901234567890 123456789012345678901234567890 123456789012345678901234567890 1234567890123456789012345678901234567890123456789012345abcd\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\" : \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Negative. Create address with wrong address2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53f1a4ab-1b7a-43d4-b2fd-6b4016201f0e",
								"exec": [
									"//Unskip after GLUE-916 release",
									"",
									"pm.test.skip(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test.skip(\"Has error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.not.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"customer_reference\": \"{{customer_reference}}\",\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"TEST\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\" : \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Negative. Create address with too long address3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "70dac81e-2254-4a48-999a-067eefe6c478",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"address3 => This value is too long. It should have 255 characters or less.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"customer_reference\": \"{{customer_reference}}\",\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n             \"address3\": \"Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test 1234567890 1234567890 Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test 1234567890 1234567890 Test Test Test Test Test Test Test Test Test Test Test\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\" : \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Negative. Create address without zipCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28713d22-06d3-455c-9845-5d3ef2748003",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"zipCode => This field is missing.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"customer_reference\": \"{{customer_reference}}\",\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\" : \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Negative. Create address with too long zipCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28713d22-06d3-455c-9845-5d3ef2748003",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"zipCode => This value is too long. It should have 15 characters or less.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"customer_reference\": \"{{customer_reference}}\",\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"1234567890123456\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\" : \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Negative. Create address with wrong zipCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28713d22-06d3-455c-9845-5d3ef2748003",
								"exec": [
									"//Unskip after GLUE-916 release",
									"",
									"pm.test.skip(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test.skip(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.not.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"customer_reference\": \"{{customer_reference}}\",\n            \"zipCode\": \"TEST\",\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\" : \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Negative. Create address without city",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f740d53b-64b2-4653-8d3e-ec5bad294378",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"city => This field is missing.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"customer_reference\": \"{{customer_reference}}\",\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"country\": \"Germany\",\n            \"iso2Code\" : \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Negative. Create address with too long city",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f740d53b-64b2-4653-8d3e-ec5bad294378",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"city => This value is too long. It should have 255 characters or less.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"customer_reference\": \"{{customer_reference}}\",\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test 1234567890 1234567890 Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test 1234567890 1234567890 Test Test Test Test Test Test Test Test Test Test Test\",\n            \"country\": \"Germany\",\n            \"iso2Code\" : \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Negative. Create address with wrong url",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58984668-0b0b-4de0-b6ed-7d502a64275e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"customer_reference\": \"{{customer_reference}}\",\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\" : \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addressess",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addressess"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Negative. Create address without isoCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58984668-0b0b-4de0-b6ed-7d502a64275e",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"iso2Code => This value should not be blank.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"customer_reference\": \"{{customer_reference}}\",\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\" : \"\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Negative. Create address with wrong isoCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58984668-0b0b-4de0-b6ed-7d502a64275e",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"iso2Code => This value is too long. It should have 2 characters or less.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"customer_reference\": \"{{customer_reference}}\",\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\" : \"qweqwe\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Negative. Create address with wrong phone",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58984668-0b0b-4de0-b6ed-7d502a64275e",
								"exec": [
									"//Unskip after GLUE-916 release",
									"pm.test.skip(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test.skip(\"Has error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.not.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"customer_reference\": \"{{customer_reference}}\",\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\" : \"DE\",\n            \"phone\": \"test-test-test-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Negative. Create address with to long phone",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58984668-0b0b-4de0-b6ed-7d502a64275e",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"phone => This value is too long. It should have 255 characters or less.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"customer_reference\": \"{{customer_reference}}\",\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\" : \"DE\",\n            \"phone\": \"1234567890-123456789012345678901234567890-123456789012345678901234567890-123456789012345678901234567890-123456789012345678901234567890-123456789012345678901234567890 -123456789012345678901234567890-123456789012345678901234567890123456789012345678901234512345\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Delete customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "68749e00-c774-4b55-9b9a-ce0462740b61",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b4e77322-2686-4984-806b-d32b21ab994c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						},
						"description": "This test is to verify that request returns valid message and status code if customer does not have any addresses"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3df29be5-760d-44ad-bc22-306ae9728b69",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "821a9e66-6b6e-499d-a245-1e7862ab6dc0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Customer - Retrieve customer addresses",
			"item": [
				{
					"name": "Retrieve customer addresses/Create a customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9353ad3a-27b5-4486-bff5-249e8190ce49",
								"exec": [
									"if ('errors' in pm.response.json() && pm.response.json().errors[0].code == 400) {",
									"    var email = pm.variables.get(\"email\");",
									"    pm.variables.set(\"email\", new Date().getTime() + '@mail.com');",
									"    postman.setNextRequest(request.name);",
									"} else {",
									"    var responseData = pm.response.json().data; ",
									"    ",
									"    pm.variables.set(\"customer_reference\", responseData.id);",
									"    ",
									"    pm.test(\"Status code is 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"    ",
									"    pm.test(\"Has correct type and id returned\", function () {",
									"        pm.expect(responseData.type).to.eql(\"customers\");",
									"    });",
									"    ",
									"    pm.test(\"Has correct first, lastname  and salution\", function () {",
									"        pm.expect(responseData.attributes.firstName).to.eql(pm.variables.get(\"firstName\"));",
									"        pm.expect(responseData.attributes.lastName).to.eql(pm.variables.get(\"lastName\"));",
									"        pm.expect(responseData.attributes.salutation).to.eql(pm.variables.get(\"salutation\"));",
									"    });",
									"    ",
									"    pm.test(\"Create_at returned\", function (){",
									"        pm.expect(responseData.attributes.createdAt).to.not.be.empty;",
									"    });",
									"    ",
									"    pm.test(\"Create_at returned\", function (){",
									"        pm.expect(responseData.attributes.updatedAt).to.not.be.empty;",
									"    });",
									"    ",
									"    ",
									"    pm.test(\"Has self link\", function() {",
									"        pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + responseData.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9, en;q=0.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":\n\t{\n\t\t\"type\":\"customers\",\n\t\t\t\"attributes\":{\n\t\t\t\t\"salutation\":\"{{salutation}}\",\n\t\t\t\t\"firstName\":\"{{firstName}}\",\n\t\t\t\t\"lastName\":\"{{lastName}}\",\n\t\t\t\t\"email\":\"{{email}}\",\n\t\t\t\t\"password\":\"{{password}}\",\n\t\t\t\t\"confirmPassword\":\"{{password}}\",\n\t\t\t\t\"acceptedTerms\":true\n\t\t\t\t\n\t\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ac815a5b-e592-494e-98c4-639d66c28d8f",
								"exec": [
									"var responseData = pm.response.json().data; ",
									"",
									"pm.variables.set(\"token\", responseData.attributes.accessToken);",
									"pm.variables.set(\"refresh-token\", responseData.attributes.refreshToken);",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"access-tokens\");",
									"});",
									"",
									"pm.test(\"Has id null\", function() {",
									"    pm.expect(responseData.id).to.eql(null);",
									"});",
									"",
									"pm.test(\"Has token type Bearer\", function(){",
									"    pm.expect(responseData.attributes.tokenType).to.eql(\"Bearer\");",
									"});",
									"",
									"pm.test(\"Has expiration time\", function() {",
									"    pm.expect(responseData.attributes.expiresIn).to.eql(28800);",
									"});",
									"",
									"pm.test(\"Has access_token returned\", function() {",
									"    pm.expect(responseData.attributes.accessToken).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has refresh_token returned\", function() {",
									"    pm.expect(responseData.attributes.refreshToken).to.not.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"{{email}}\", \"password\": \"change123\"}}}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": [
						{
							"name": "Request access token",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/access-tokens",
									"host": [
										"{{url}}"
									],
									"path": [
										"access-tokens"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache",
									"name": "Cache-Control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"key": "Connection",
									"value": "close",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Thu, 21 Jun 2018 15:09:53 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "X-Server",
									"value": "spryker-vagrant",
									"name": "X-Server",
									"description": "Custom header"
								},
								{
									"key": "content-language",
									"value": "en_US",
									"name": "content-language",
									"description": "The language the content is in"
								}
							],
							"cookie": [],
							"body": "{\"data\":{\"type\":\"access-tokens\",\"id\":null,\"attributes\":{\"token_type\":\"Bearer\",\"expires_in\":28799,\"access_token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjI3NjYxZTJlMTk1Njc2ZDgzNTI3MDYwZDY5ODY2MGU3MjA1ODIzMTJkZTUwMjZmMTNjZDFkY2YxNjk1NmE0MTBiZGVmNzc5MDJjNGE1ZmRjIn0.eyJhdWQiOiJmcm9udGVuZCIsImp0aSI6IjI3NjYxZTJlMTk1Njc2ZDgzNTI3MDYwZDY5ODY2MGU3MjA1ODIzMTJkZTUwMjZmMTNjZDFkY2YxNjk1NmE0MTBiZGVmNzc5MDJjNGE1ZmRjIiwiaWF0IjoxNTI5NTkzNzkyLCJuYmYiOjE1Mjk1OTM3OTIsImV4cCI6MTUyOTYyMjU5Miwic3ViIjoie1wiY3VzdG9tZXJfcmVmZXJlbmNlXCI6XCJERS0tMVwiLFwiaWRfY3VzdG9tZXJcIjoxfSIsInNjb3BlcyI6WyJjdXN0b21lciJdfQ.U1Ij4aDJ7H34E8XFCXfQORCnytk7wUuGRAGkBGhhWQsHDQucgSJs8V5q820E9Z3V8lEGXoY2vpZJZ-wP41HVFMsXJo10LG6NenekOeRNVpSpBVAcys5cSCBT25sv32OqFnn-g18CkemAgKAx9qCqzIRj6hmrkGjXDWhHpphJYBX40s38hR7IDHK2DSODifm-lyivd7wIohASbi4nVTgL57TsNsiSJJaWje4mc8Vs-rcNiuwl4t6pVvHRDMlDskq_S1tNp8GXrj_ESNtesuFf_F_iiUt20tJFgdqYddeMZNIECRX1S1WQjefRVZBgvvqDUAeemVb75CAF1TCILW8S-Q\",\"refresh_token\":\"def5020076edcef1e548965759216bcb4957c4e3623e567bbcb66de2e2fdc4e00fbe539bd5d77837c48d05dfa223aeea9701eb43b808b1b71d5820222500fc4bfc045686a636cf5479c6d437f0c210e73de919b044e56471d44402496ff5253d23b9d0d821bf4925e27eb2817eba1538abb5f861a03dd0290897d97b8902e58fcd995c217309ac661d2db449417eb26fb24fd9832312a26cf065ac5122ba747044ac6eb4898fe2ef8b0ba57642c3989a5ac1dd72785098b3da12ed0d35b3f481a09a9d235386de514526e1267c8fe7178e9e229154f6c0dc9c547927ca61a6f725ca23c33930453fcae7e448dd8407d77dec07a41e8c360a3fafe5e1b50b535814e18ac513528113b2726b6414977096b1a7477d43d0bb319906c8086984f8ae182190b30103e8b4ebacc37438d7fada1c06102f870c85660c52a47d879e57e9643369206ac614a6051fd4eb1a3f4a032b74b59af84b88e1a2620b0f86b8ac59366100a9ef03b7606100f884d25d7fc56ac13c5538ccf985701b64ded1e2ec462a0800861747d2706b3184d1b3a4082b7f1e717d17092c4b70b75e5c14fb69d27dc4bdd0c0a905\"},\"links\":{\"self\":\"http:\\/\\/glue.de.shop-suite.local\\/access-tokens\\/\"}}}"
						}
					]
				},
				{
					"name": "Get empty list of customer addresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f929a66-ed0a-4ce6-bec2-c6e02055701d",
								"exec": [
									"var responseData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has array returned\", function() {",
									"    pm.expect(responseData.data).to.eql([]);",
									"});",
									"",
									"pm.test(\"Has self link returned\", function() {",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\") + \"/addresses\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create first address with default values",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1d719543-1b1b-49a7-82f3-5f9b6802bbbc",
								"exec": [
									"var responseData = pm.response.json().data; ",
									"",
									"pm.variables.set(\"customer_address_uuid_1\", responseData.id);",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(responseData.type).to.eql(\"addresses\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\") + \"/addresses/\" + responseData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"First, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\" : \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get list of customer addresses with one element",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c78e5c0-a205-4f5d-a72f-f31489f77ec1",
								"exec": [
									"var response = pm.response.json();",
									"var responseData = response.data;",
									"var links = response.links;",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(responseData[0].type).to.eql(\"addresses\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData[0].id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has correct attributes\", function() {",
									"    pm.expect(responseData[0].attributes.salutation).to.be.eql(\"Mr\");",
									"    pm.expect(responseData[0].attributes.firstName).to.be.eql(\"John\");",
									"    pm.expect(responseData[0].attributes.lastName).to.be.eql(\"Doe\");",
									"    pm.expect(responseData[0].attributes.address1).to.be.eql(\"First, 33, 11\");",
									"    pm.expect(responseData[0].attributes.address2).to.be.eql(\"b\");",
									"    pm.expect(responseData[0].attributes.address3).to.be.eql(\"aaa\");",
									"    pm.expect(responseData[0].attributes.zipCode).to.be.eql(\"12312\");",
									"    pm.expect(responseData[0].attributes.city).to.be.eql(\"Berlin\");",
									"    pm.expect(responseData[0].attributes.country).to.be.eql(\"Germany\");",
									"    pm.expect(responseData[0].attributes.iso2Code).to.be.eql(\"DE\");",
									"    pm.expect(responseData[0].attributes.company).to.be.eql(null);",
									"    pm.expect(responseData[0].attributes.phone).to.be.eql(\"22111-3-4-5\");",
									"    pm.expect(responseData[0].attributes.isDefaultShipping).to.be.eql(true);",
									"    pm.expect(responseData[0].attributes.isDefaultBilling).to.be.eql(true);",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    var expectedLink = pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\") + \"/addresses\";",
									"    pm.expect(links.self).to.eql(expectedLink);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create second address",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "338e8c4e-0225-4a45-bc0c-586ff1a36f2a",
								"exec": [
									"var responseData = pm.response.json().data; ",
									"",
									"pm.variables.set(\"customer_address_uuid_2\", responseData.id);",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(responseData.type).to.eql(\"addresses\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\") + \"/addresses/\" + responseData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Second, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": true\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get list of customer addresses with two elements",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "851711cb-1b51-40d3-95d7-2230bbdcdbaa",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(responseData[0].type).to.eql(\"addresses\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData[0].id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData[0].links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\") + \"/addresses/\" + responseData[0].id);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(responseData[1].type).to.eql(\"addresses\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData[1].id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData[1].links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\") + \"/addresses/\" + responseData[1].id);",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\") + \"/addresses\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request the first address",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6e7209c1-07a8-4ab6-ac6e-9dad5f51843c",
								"exec": [
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.json; ",
									"    pm.response.to.be.ok; ",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.type).to.eql(\"addresses\");",
									"    pm.expect(jsonData.data.type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.id).to.be.a(\"string\");",
									"    pm.expect(jsonData.data.id).to.eql(pm.variables.get(\"customer_address_uuid_1\"));",
									"});",
									"",
									"pm.test(\"Has correct attributes\", function() {",
									"     var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.salutation).to.be.eql(\"Mr\");",
									"    pm.expect(jsonData.data.attributes.firstName).to.be.eql(\"John\");",
									"    pm.expect(jsonData.data.attributes.lastName).to.be.eql(\"Doe\");",
									"    pm.expect(jsonData.data.attributes.address1).to.be.eql(\"First, 33, 11\");",
									"    pm.expect(jsonData.data.attributes.address2).to.be.eql(\"b\");",
									"    pm.expect(jsonData.data.attributes.address3).to.be.eql(\"aaa\");",
									"    pm.expect(jsonData.data.attributes.zipCode).to.be.eql(\"12312\");",
									"    pm.expect(jsonData.data.attributes.city).to.be.eql(\"Berlin\");",
									"    pm.expect(jsonData.data.attributes.country).to.be.eql(\"Germany\");",
									"    pm.expect(jsonData.data.attributes.iso2Code).to.be.eql(\"DE\");",
									"    pm.expect(jsonData.data.attributes.company).to.be.eql(null);",
									"    pm.expect(jsonData.data.attributes.phone).to.be.eql(\"22111-3-4-5\");",
									"    pm.expect(jsonData.data.attributes.isDefaultShipping).to.be.eql(true);",
									"    pm.expect(jsonData.data.attributes.isDefaultBilling).to.be.eql(false);",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.links.self).to.eql(pm.environment.get(\"url\") + \"/customers/\" +pm.variables.get(\"customer_reference\")+\"/addresses/\"+pm.variables.get(\"customer_address_uuid_1\") );",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Get not existed customer address",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a6807a7-fe38-4630-a2f1-cb94419d1b1e",
								"exec": [
									"",
									"pm.test(\"Status code is 404 \", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Error code is 404\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"404\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Address was not found.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/343k343453g",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"343k343453g"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Get customer address missing token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a6807a7-fe38-4630-a2f1-cb94419d1b1e",
								"exec": [
									"",
									"pm.test(\"Status code is 403 \", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Error code is 403\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"002\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Missing access token.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Get customer address wrong token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a6807a7-fe38-4630-a2f1-cb94419d1b1e",
								"exec": [
									"",
									"pm.test(\"Status code is 401 \", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test(\"Error code is 401\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"001\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Invalid access token.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6ImM1OTc0OTM4ZWFmMzBjNWE3ZjM0YzhkNDExZWQ1MGJiYzZmNTdjOTQ2ZWRiZGJjY2UyODYzZTBiM2M0ZjNmMjhhYWU3MTI5Mjc5OGM0YjU3In0.eyJhdWQiOiJmcm9udGVuZCIsImp0aSI6ImM1OTc0OTM4ZWFmMzBjNWE3ZjM0YzhkNDExZWQ1MGJiYzZmNTdjOTQ2ZWRiZGJjY2UyODYzZTBiM2M0ZjNmMjhhYWU3MTI5Mjc5OGM0YjU3IiwiaWF0IjoxNTQyMzYzODI3LCJuYmYiOjE1NDIzNjM4MjcsImV4cCI6MTU0MjM5MjYyNywic3ViIjoie1wiY3VzdG9tZXJfcmVmZXJlbmNlXCI6XCJERS0tNjRcIixcImlkX2N1c3RvbWVyXCI6NjR9Iiwic2NvcGVzIjpbImN1c3RvbWVyIl19.rBYuZ3YCbgw6alIknOkD4PQsth_3losJHciH6hgLL1edFA-SBk9T4wMgv0twjn5TDTAYQ7bjZOuWqROc89B4EoBHUMpetLNmx1cWWpbJixH1c8A4K0NcJEboNlGg9jiWtLbtoH61MAeHJPysw8tdkmSrL7CQAO_SsANUr8OX0wN1nkMhXRWMzpkOoIFCiKjbs2SlZHBwjalKWcxXUL-oDi9WQ0hEoTGbN_Hh_VX0MgZ3VUaVJvimBJiesOTOG1JiFEMKQduwIw6w7XHoxdzgPt_OKhI5mvAYk0aTXKhWS37RRluDOIrdHg8EIeWbSzwAm5V3RnABTNicJUlosnigYA1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Get list of customer addresses for another customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5d530075-7f53-4ac7-bd71-e28b6da2fa62",
								"exec": [
									"",
									"pm.test(\"Status code is 403 \", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Error code is 411\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"411\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Unauthorized request.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/DE--1/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"DE--1",
								"addresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Get a customer address for another customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ba2a588-d176-4cd7-9c49-5c614fad1bc8",
								"exec": [
									"",
									"pm.test(\"Status code is 403 \", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Error code is 411\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"411\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Unauthorized request.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/DE--1/addresses/{{addressId_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"DE--1",
								"addresses",
								"{{addressId_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Get a customer address for not existed customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8b76a63-6df9-4ed0-9cb8-33ca35bd6cc4",
								"exec": [
									"",
									"pm.test(\"Status code is 404 \", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Error code is 402\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"402\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Customer not found.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/DE--1111111/addresses/{{addressId_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"DE--1111111",
								"addresses",
								"{{addressId_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Get a customer address by wrong url",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f996cc4-5076-4115-a9e5-80b6b7979cfe",
								"exec": [
									"pm.test(\"Status code is 404\", function() {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customrs/DE--1/addresses/{{addressId_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customrs",
								"DE--1",
								"addresses",
								"{{addressId_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "68749e00-c774-4b55-9b9a-ce0462740b61",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b4e77322-2686-4984-806b-d32b21ab994c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						},
						"description": "This test is to verify that request returns valid message and status code if customer does not have any addresses"
					},
					"response": []
				}
			]
		},
		{
			"name": "Customer - Get particular customer's addresses",
			"item": [
				{
					"name": "Retrieve customer addresses/Create a customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9353ad3a-27b5-4486-bff5-249e8190ce49",
								"exec": [
									"if ('errors' in pm.response.json() && pm.response.json().errors[0].code == 400) {",
									"    var email = pm.variables.get(\"email\");",
									"    pm.variables.set(\"email\", new Date().getTime() + '@mail.com');",
									"    postman.setNextRequest(request.name);",
									"} else {",
									"    var responseData = pm.response.json().data; ",
									"    ",
									"    pm.variables.set(\"customer_reference\", responseData.id);",
									"    ",
									"    pm.test(\"Status code is 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"    ",
									"    pm.test(\"Has correct type and id returned\", function () {",
									"        pm.expect(responseData.type).to.eql(\"customers\");",
									"    });",
									"    ",
									"    pm.test(\"Has correct first, lastname  and salution\", function () {",
									"        pm.expect(responseData.attributes.firstName).to.eql(pm.variables.get(\"firstName\"));",
									"        pm.expect(responseData.attributes.lastName).to.eql(pm.variables.get(\"lastName\"));",
									"        pm.expect(responseData.attributes.salutation).to.eql(pm.variables.get(\"salutation\"));",
									"    });",
									"    ",
									"    pm.test(\"Create_at returned\", function (){",
									"        pm.expect(responseData.attributes.createdAt).to.not.be.empty;",
									"    });",
									"    ",
									"    pm.test(\"Create_at returned\", function (){",
									"        pm.expect(responseData.attributes.updatedAt).to.not.be.empty;",
									"    });",
									"    ",
									"    ",
									"    pm.test(\"Has self link\", function() {",
									"        pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + responseData.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9, en;q=0.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":\n\t{\n\t\t\"type\":\"customers\",\n\t\t\t\"attributes\":{\n\t\t\t\t\"salutation\":\"{{salutation}}\",\n\t\t\t\t\"firstName\":\"{{firstName}}\",\n\t\t\t\t\"lastName\":\"{{lastName}}\",\n\t\t\t\t\"email\":\"{{email}}\",\n\t\t\t\t\"password\":\"{{password}}\",\n\t\t\t\t\"confirmPassword\":\"{{password}}\",\n\t\t\t\t\"acceptedTerms\":true\n\t\t\t\t\n\t\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ac815a5b-e592-494e-98c4-639d66c28d8f",
								"exec": [
									"var responseData = pm.response.json().data; ",
									"",
									"pm.variables.set(\"token\", responseData.attributes.accessToken);",
									"pm.variables.set(\"refresh-token\", responseData.attributes.refreshToken);",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"access-tokens\");",
									"});",
									"",
									"pm.test(\"Has id null\", function() {",
									"    pm.expect(responseData.id).to.eql(null);",
									"});",
									"",
									"pm.test(\"Has token type Bearer\", function(){",
									"    pm.expect(responseData.attributes.tokenType).to.eql(\"Bearer\");",
									"});",
									"",
									"pm.test(\"Has expiration time\", function() {",
									"    pm.expect(responseData.attributes.expiresIn).to.eql(28800);",
									"});",
									"",
									"pm.test(\"Has access_token returned\", function() {",
									"    pm.expect(responseData.attributes.accessToken).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has refresh_token returned\", function() {",
									"    pm.expect(responseData.attributes.refreshToken).to.not.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"{{email}}\", \"password\": \"change123\"}}}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": [
						{
							"name": "Request access token",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/access-tokens",
									"host": [
										"{{url}}"
									],
									"path": [
										"access-tokens"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache",
									"name": "Cache-Control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"key": "Connection",
									"value": "close",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Thu, 21 Jun 2018 15:09:53 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "X-Server",
									"value": "spryker-vagrant",
									"name": "X-Server",
									"description": "Custom header"
								},
								{
									"key": "content-language",
									"value": "en_US",
									"name": "content-language",
									"description": "The language the content is in"
								}
							],
							"cookie": [],
							"body": "{\"data\":{\"type\":\"access-tokens\",\"id\":null,\"attributes\":{\"token_type\":\"Bearer\",\"expires_in\":28799,\"access_token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjI3NjYxZTJlMTk1Njc2ZDgzNTI3MDYwZDY5ODY2MGU3MjA1ODIzMTJkZTUwMjZmMTNjZDFkY2YxNjk1NmE0MTBiZGVmNzc5MDJjNGE1ZmRjIn0.eyJhdWQiOiJmcm9udGVuZCIsImp0aSI6IjI3NjYxZTJlMTk1Njc2ZDgzNTI3MDYwZDY5ODY2MGU3MjA1ODIzMTJkZTUwMjZmMTNjZDFkY2YxNjk1NmE0MTBiZGVmNzc5MDJjNGE1ZmRjIiwiaWF0IjoxNTI5NTkzNzkyLCJuYmYiOjE1Mjk1OTM3OTIsImV4cCI6MTUyOTYyMjU5Miwic3ViIjoie1wiY3VzdG9tZXJfcmVmZXJlbmNlXCI6XCJERS0tMVwiLFwiaWRfY3VzdG9tZXJcIjoxfSIsInNjb3BlcyI6WyJjdXN0b21lciJdfQ.U1Ij4aDJ7H34E8XFCXfQORCnytk7wUuGRAGkBGhhWQsHDQucgSJs8V5q820E9Z3V8lEGXoY2vpZJZ-wP41HVFMsXJo10LG6NenekOeRNVpSpBVAcys5cSCBT25sv32OqFnn-g18CkemAgKAx9qCqzIRj6hmrkGjXDWhHpphJYBX40s38hR7IDHK2DSODifm-lyivd7wIohASbi4nVTgL57TsNsiSJJaWje4mc8Vs-rcNiuwl4t6pVvHRDMlDskq_S1tNp8GXrj_ESNtesuFf_F_iiUt20tJFgdqYddeMZNIECRX1S1WQjefRVZBgvvqDUAeemVb75CAF1TCILW8S-Q\",\"refresh_token\":\"def5020076edcef1e548965759216bcb4957c4e3623e567bbcb66de2e2fdc4e00fbe539bd5d77837c48d05dfa223aeea9701eb43b808b1b71d5820222500fc4bfc045686a636cf5479c6d437f0c210e73de919b044e56471d44402496ff5253d23b9d0d821bf4925e27eb2817eba1538abb5f861a03dd0290897d97b8902e58fcd995c217309ac661d2db449417eb26fb24fd9832312a26cf065ac5122ba747044ac6eb4898fe2ef8b0ba57642c3989a5ac1dd72785098b3da12ed0d35b3f481a09a9d235386de514526e1267c8fe7178e9e229154f6c0dc9c547927ca61a6f725ca23c33930453fcae7e448dd8407d77dec07a41e8c360a3fafe5e1b50b535814e18ac513528113b2726b6414977096b1a7477d43d0bb319906c8086984f8ae182190b30103e8b4ebacc37438d7fada1c06102f870c85660c52a47d879e57e9643369206ac614a6051fd4eb1a3f4a032b74b59af84b88e1a2620b0f86b8ac59366100a9ef03b7606100f884d25d7fc56ac13c5538ccf985701b64ded1e2ec462a0800861747d2706b3184d1b3a4082b7f1e717d17092c4b70b75e5c14fb69d27dc4bdd0c0a905\"},\"links\":{\"self\":\"http:\\/\\/glue.de.shop-suite.local\\/access-tokens\\/\"}}}"
						}
					]
				},
				{
					"name": "Create first address with default values",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1d719543-1b1b-49a7-82f3-5f9b6802bbbc",
								"exec": [
									"var responseData = pm.response.json().data; ",
									"",
									"pm.variables.set(\"customer_address_uuid_1\", responseData.id);",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(responseData.type).to.eql(\"addresses\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\") + \"/addresses/\" + responseData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"First, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\" : \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get customer address - address exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f929a66-ed0a-4ce6-bec2-c6e02055701d",
								"exec": [
									"var responseData = pm.response.json().data; ",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(responseData.type).to.eql(\"addresses\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has self link returned\", function (){",
									"  pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") +\"/customers/\" + pm.variables.get(\"customer_reference\") + \"/addresses/\" + pm.variables.get(\"customer_address_uuid_1\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_1}}/",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_1}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Get customer addresses - invalid address id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f929a66-ed0a-4ce6-bec2-c6e02055701d",
								"exec": [
									"pm.test(\"Status code is 404 \", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Error code is 404\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"404\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Address was not found.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/asdAsdjg78a/",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"asdAsdjg78a",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Get customer addresses - invalid reference",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f929a66-ed0a-4ce6-bec2-c6e02055701d",
								"exec": [
									"pm.test(\"Status code is 404 \", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Error code is 402\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"402\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Customer not found.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/qwe123/addresses/{{customer_address_uuid_1}}/",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"qwe123",
								"addresses",
								"{{customer_address_uuid_1}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Get customer addresses - missing token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f929a66-ed0a-4ce6-bec2-c6e02055701d",
								"exec": [
									"pm.test(\"Status code is 403 \", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Error code is 002\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"002\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Missing access token.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_1}}/",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_1}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve second customer addresses/Create a customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9353ad3a-27b5-4486-bff5-249e8190ce49",
								"exec": [
									"if ('errors' in pm.response.json() && pm.response.json().errors[0].code == 400) {",
									"    var email = pm.variables.get(\"email2\");",
									"    pm.variables.set(\"email2\", new Date().getTime() + '@mail.com');",
									"    postman.setNextRequest(request.name);",
									"} else {",
									"    var responseData = pm.response.json().data; ",
									"    ",
									"    pm.variables.set(\"customer_reference2\", responseData.id);",
									"    ",
									"    pm.test(\"Status code is 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"    ",
									"    pm.test(\"Has correct type and id returned\", function () {",
									"        pm.expect(responseData.type).to.eql(\"customers\");",
									"    });",
									"    ",
									"    pm.test(\"Has correct first, lastname  and salution\", function () {",
									"        pm.expect(responseData.attributes.firstName).to.eql(pm.variables.get(\"firstName\"));",
									"        pm.expect(responseData.attributes.lastName).to.eql(pm.variables.get(\"lastName\"));",
									"        pm.expect(responseData.attributes.salutation).to.eql(pm.variables.get(\"salutation\"));",
									"    });",
									"    ",
									"    pm.test(\"Create_at returned\", function (){",
									"        pm.expect(responseData.attributes.createdAt).to.not.be.empty;",
									"    });",
									"    ",
									"    pm.test(\"Create_at returned\", function (){",
									"        pm.expect(responseData.attributes.updatedAt).to.not.be.empty;",
									"    });",
									"    ",
									"    ",
									"    pm.test(\"Has self link\", function() {",
									"        pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + responseData.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9, en;q=0.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":\n\t{\n\t\t\"type\":\"customers\",\n\t\t\t\"attributes\":{\n\t\t\t\t\"salutation\":\"{{salutation}}\",\n\t\t\t\t\"firstName\":\"{{firstName}}\",\n\t\t\t\t\"lastName\":\"{{lastName}}\",\n\t\t\t\t\"email\":\"{{email2}}\",\n\t\t\t\t\"password\":\"{{password}}\",\n\t\t\t\t\"confirmPassword\":\"{{password}}\",\n\t\t\t\t\"acceptedTerms\":true\n\t\t\t\t\n\t\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request access token second customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ac815a5b-e592-494e-98c4-639d66c28d8f",
								"exec": [
									"var responseData = pm.response.json().data; ",
									"",
									"pm.variables.set(\"token2\", responseData.attributes.accessToken);",
									"pm.variables.set(\"refresh-token2\", responseData.attributes.refreshToken);",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"access-tokens\");",
									"});",
									"",
									"pm.test(\"Has id null\", function() {",
									"    pm.expect(responseData.id).to.eql(null);",
									"});",
									"",
									"pm.test(\"Has token type Bearer\", function(){",
									"    pm.expect(responseData.attributes.tokenType).to.eql(\"Bearer\");",
									"});",
									"",
									"pm.test(\"Has expiration time\", function() {",
									"    pm.expect(responseData.attributes.expiresIn).to.eql(28800);",
									"});",
									"",
									"pm.test(\"Has access_token returned\", function() {",
									"    pm.expect(responseData.attributes.accessToken).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has refresh_token returned\", function() {",
									"    pm.expect(responseData.attributes.refreshToken).to.not.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"{{email2}}\", \"password\": \"change123\"}}}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": [
						{
							"name": "Request access token",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/access-tokens",
									"host": [
										"{{url}}"
									],
									"path": [
										"access-tokens"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache",
									"name": "Cache-Control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"key": "Connection",
									"value": "close",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Thu, 21 Jun 2018 15:09:53 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "X-Server",
									"value": "spryker-vagrant",
									"name": "X-Server",
									"description": "Custom header"
								},
								{
									"key": "content-language",
									"value": "en_US",
									"name": "content-language",
									"description": "The language the content is in"
								}
							],
							"cookie": [],
							"body": "{\"data\":{\"type\":\"access-tokens\",\"id\":null,\"attributes\":{\"token_type\":\"Bearer\",\"expires_in\":28799,\"access_token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjI3NjYxZTJlMTk1Njc2ZDgzNTI3MDYwZDY5ODY2MGU3MjA1ODIzMTJkZTUwMjZmMTNjZDFkY2YxNjk1NmE0MTBiZGVmNzc5MDJjNGE1ZmRjIn0.eyJhdWQiOiJmcm9udGVuZCIsImp0aSI6IjI3NjYxZTJlMTk1Njc2ZDgzNTI3MDYwZDY5ODY2MGU3MjA1ODIzMTJkZTUwMjZmMTNjZDFkY2YxNjk1NmE0MTBiZGVmNzc5MDJjNGE1ZmRjIiwiaWF0IjoxNTI5NTkzNzkyLCJuYmYiOjE1Mjk1OTM3OTIsImV4cCI6MTUyOTYyMjU5Miwic3ViIjoie1wiY3VzdG9tZXJfcmVmZXJlbmNlXCI6XCJERS0tMVwiLFwiaWRfY3VzdG9tZXJcIjoxfSIsInNjb3BlcyI6WyJjdXN0b21lciJdfQ.U1Ij4aDJ7H34E8XFCXfQORCnytk7wUuGRAGkBGhhWQsHDQucgSJs8V5q820E9Z3V8lEGXoY2vpZJZ-wP41HVFMsXJo10LG6NenekOeRNVpSpBVAcys5cSCBT25sv32OqFnn-g18CkemAgKAx9qCqzIRj6hmrkGjXDWhHpphJYBX40s38hR7IDHK2DSODifm-lyivd7wIohASbi4nVTgL57TsNsiSJJaWje4mc8Vs-rcNiuwl4t6pVvHRDMlDskq_S1tNp8GXrj_ESNtesuFf_F_iiUt20tJFgdqYddeMZNIECRX1S1WQjefRVZBgvvqDUAeemVb75CAF1TCILW8S-Q\",\"refresh_token\":\"def5020076edcef1e548965759216bcb4957c4e3623e567bbcb66de2e2fdc4e00fbe539bd5d77837c48d05dfa223aeea9701eb43b808b1b71d5820222500fc4bfc045686a636cf5479c6d437f0c210e73de919b044e56471d44402496ff5253d23b9d0d821bf4925e27eb2817eba1538abb5f861a03dd0290897d97b8902e58fcd995c217309ac661d2db449417eb26fb24fd9832312a26cf065ac5122ba747044ac6eb4898fe2ef8b0ba57642c3989a5ac1dd72785098b3da12ed0d35b3f481a09a9d235386de514526e1267c8fe7178e9e229154f6c0dc9c547927ca61a6f725ca23c33930453fcae7e448dd8407d77dec07a41e8c360a3fafe5e1b50b535814e18ac513528113b2726b6414977096b1a7477d43d0bb319906c8086984f8ae182190b30103e8b4ebacc37438d7fada1c06102f870c85660c52a47d879e57e9643369206ac614a6051fd4eb1a3f4a032b74b59af84b88e1a2620b0f86b8ac59366100a9ef03b7606100f884d25d7fc56ac13c5538ccf985701b64ded1e2ec462a0800861747d2706b3184d1b3a4082b7f1e717d17092c4b70b75e5c14fb69d27dc4bdd0c0a905\"},\"links\":{\"self\":\"http:\\/\\/glue.de.shop-suite.local\\/access-tokens\\/\"}}}"
						}
					]
				},
				{
					"name": "Negative. Get customer address - address doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f929a66-ed0a-4ce6-bec2-c6e02055701d",
								"exec": [
									"pm.test(\"Status code is 404 \", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Error code is 404\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"404\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Address was not found.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference2}}/addresses/{{customer_address_uuid_1}}/",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference2}}",
								"addresses",
								"{{customer_address_uuid_1}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Get customer addresses - invalid address id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f929a66-ed0a-4ce6-bec2-c6e02055701d",
								"exec": [
									"pm.test(\"Status code is 404 \", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Error code is 404\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"404\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Address was not found.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/asdasdasdacdsawwde/",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"asdasdasdacdsawwde",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Get customer addresses - invalid reference",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f929a66-ed0a-4ce6-bec2-c6e02055701d",
								"exec": [
									"pm.test(\"Status code is 403 \", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Error code is 411\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"411\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Unauthorized request.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/DE--1/addresses/{{customer_address_uuid_1}}/",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"DE--1",
								"addresses",
								"{{customer_address_uuid_1}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Get customer addresses - missing token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f929a66-ed0a-4ce6-bec2-c6e02055701d",
								"exec": [
									"pm.test(\"Status code is 403 \", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Error code is 002\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"002\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Missing access token.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_1}}/",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_1}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Customer - Update addresses",
			"item": [
				{
					"name": "Update addresses/Request to create a customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9296ed9-e0e6-4fad-a20f-021c3235c9c0",
								"exec": [
									"if ('errors' in pm.response.json() && pm.response.json().errors[0].code == 400) {",
									"    var email = pm.variables.get(\"email\");",
									"    pm.variables.set(\"email\", new Date().getTime() + '@mail.com');",
									"    postman.setNextRequest(request.name);",
									"} else {",
									"    var responseData = pm.response.json().data; ",
									"    ",
									"    pm.variables.set(\"customer_reference\", responseData.id);",
									"    pm.variables.set(\"customer_create_at\", responseData.attributes.createdAt);",
									"    pm.variables.set(\"customer_update_at\", responseData.attributes.updatedAt);",
									"    ",
									"    pm.test(\"Status code is 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"    ",
									"    pm.test(\"Has correct type and id returned\", function () {",
									"        pm.expect(responseData.type).to.eql(\"customers\");",
									"    });",
									"    ",
									"    pm.test(\"Has correct first, lastname  and salution\", function () {",
									"        pm.expect(responseData.attributes.firstName).to.eql(pm.variables.get(\"firstName\"));",
									"        pm.expect(responseData.attributes.lastName).to.eql(pm.variables.get(\"lastName\"));",
									"        pm.expect(responseData.attributes.salutation).to.eql(pm.variables.get(\"salutation\"));",
									"    });",
									"    ",
									"    pm.test(\"Create_at returned\", function (){",
									"        pm.expect(responseData.attributes.createdAt).to.not.be.empty;",
									"    });",
									"    ",
									"    pm.test(\"Create_at returned\", function (){",
									"        pm.expect(responseData.attributes.updatedAt).to.not.be.empty;",
									"    });",
									"    ",
									"    ",
									"    pm.test(\"Has self link\", function() {",
									"        pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\"));",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9, en;q=0.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":\n\t{\n\t\t\"type\":\"customers\",\n\t\t\t\"attributes\":{\n\t\t\t\t\"salutation\":\"{{salutation}}\",\n\t\t\t\t\"firstName\":\"{{firstName}}\",\n\t\t\t\t\"lastName\":\"{{lastName}}\",\n\t\t\t\t\"email\":\"{{email}}\",\n\t\t\t\t\"password\":\"{{password}}\",\n\t\t\t\t\"confirmPassword\":\"{{password}}\",\n\t\t\t\t\"acceptedTerms\":true\n\t\t\t\t\n\t\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dd06a52a-a0b3-4e5c-81c3-9d35286f15c1",
								"exec": [
									"var responseData = pm.response.json().data; ",
									"",
									"pm.variables.set(\"token\", responseData.attributes.accessToken);",
									"pm.variables.set(\"refresh_token\", responseData.attributes.refreshToken);",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"access-tokens\");",
									"});",
									"",
									"pm.test(\"Has id null\", function() {",
									"    pm.expect(responseData.id).to.eql(null);",
									"});",
									"",
									"pm.test(\"Has token type Bearer\", function(){",
									"    pm.expect(responseData.attributes.tokenType).to.eql(\"Bearer\");",
									"});",
									"",
									"pm.test(\"Has expiration time\", function() {",
									"    pm.expect(responseData.attributes.expiresIn).to.eql(28800);",
									"});",
									"",
									"pm.test(\"Has access_token returned\", function() {",
									"    pm.expect(responseData.attributes.accessToken).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has refresh_token returned\", function() {",
									"    pm.expect(responseData.attributes.refreshToken).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/access-tokens\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"{{email}}\", \"password\": \"change123\"}}}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": [
						{
							"name": "Request access token",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/access-tokens",
									"host": [
										"{{url}}"
									],
									"path": [
										"access-tokens"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache",
									"name": "Cache-Control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"key": "Connection",
									"value": "close",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Thu, 21 Jun 2018 15:09:53 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "X-Server",
									"value": "spryker-vagrant",
									"name": "X-Server",
									"description": "Custom header"
								},
								{
									"key": "content-language",
									"value": "en_US",
									"name": "content-language",
									"description": "The language the content is in"
								}
							],
							"cookie": [],
							"body": "{\"data\":{\"type\":\"access-tokens\",\"id\":null,\"attributes\":{\"token_type\":\"Bearer\",\"expires_in\":28799,\"access_token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjI3NjYxZTJlMTk1Njc2ZDgzNTI3MDYwZDY5ODY2MGU3MjA1ODIzMTJkZTUwMjZmMTNjZDFkY2YxNjk1NmE0MTBiZGVmNzc5MDJjNGE1ZmRjIn0.eyJhdWQiOiJmcm9udGVuZCIsImp0aSI6IjI3NjYxZTJlMTk1Njc2ZDgzNTI3MDYwZDY5ODY2MGU3MjA1ODIzMTJkZTUwMjZmMTNjZDFkY2YxNjk1NmE0MTBiZGVmNzc5MDJjNGE1ZmRjIiwiaWF0IjoxNTI5NTkzNzkyLCJuYmYiOjE1Mjk1OTM3OTIsImV4cCI6MTUyOTYyMjU5Miwic3ViIjoie1wiY3VzdG9tZXJfcmVmZXJlbmNlXCI6XCJERS0tMVwiLFwiaWRfY3VzdG9tZXJcIjoxfSIsInNjb3BlcyI6WyJjdXN0b21lciJdfQ.U1Ij4aDJ7H34E8XFCXfQORCnytk7wUuGRAGkBGhhWQsHDQucgSJs8V5q820E9Z3V8lEGXoY2vpZJZ-wP41HVFMsXJo10LG6NenekOeRNVpSpBVAcys5cSCBT25sv32OqFnn-g18CkemAgKAx9qCqzIRj6hmrkGjXDWhHpphJYBX40s38hR7IDHK2DSODifm-lyivd7wIohASbi4nVTgL57TsNsiSJJaWje4mc8Vs-rcNiuwl4t6pVvHRDMlDskq_S1tNp8GXrj_ESNtesuFf_F_iiUt20tJFgdqYddeMZNIECRX1S1WQjefRVZBgvvqDUAeemVb75CAF1TCILW8S-Q\",\"refresh_token\":\"def5020076edcef1e548965759216bcb4957c4e3623e567bbcb66de2e2fdc4e00fbe539bd5d77837c48d05dfa223aeea9701eb43b808b1b71d5820222500fc4bfc045686a636cf5479c6d437f0c210e73de919b044e56471d44402496ff5253d23b9d0d821bf4925e27eb2817eba1538abb5f861a03dd0290897d97b8902e58fcd995c217309ac661d2db449417eb26fb24fd9832312a26cf065ac5122ba747044ac6eb4898fe2ef8b0ba57642c3989a5ac1dd72785098b3da12ed0d35b3f481a09a9d235386de514526e1267c8fe7178e9e229154f6c0dc9c547927ca61a6f725ca23c33930453fcae7e448dd8407d77dec07a41e8c360a3fafe5e1b50b535814e18ac513528113b2726b6414977096b1a7477d43d0bb319906c8086984f8ae182190b30103e8b4ebacc37438d7fada1c06102f870c85660c52a47d879e57e9643369206ac614a6051fd4eb1a3f4a032b74b59af84b88e1a2620b0f86b8ac59366100a9ef03b7606100f884d25d7fc56ac13c5538ccf985701b64ded1e2ec462a0800861747d2706b3184d1b3a4082b7f1e717d17092c4b70b75e5c14fb69d27dc4bdd0c0a905\"},\"links\":{\"self\":\"http:\\/\\/glue.de.shop-suite.local\\/access-tokens\\/\"}}}"
						}
					]
				},
				{
					"name": "Request to create the first address with default values",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "934c7461-400e-4d24-b500-162be6c39e90",
								"exec": [
									"var responseData = pm.response.json().data; ",
									"",
									"pm.variables.set(\"customer_address_uuid_1\", responseData.id);",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(responseData.type).to.eql(\"addresses\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\") + \"/addresses/\" + responseData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"First, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\" : \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Request to create second address",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b6f9ce8-ebee-4801-bfa4-f85cfaf5bbac",
								"exec": [
									"var responseData = pm.response.json().data; ",
									"",
									"pm.variables.set(\"customer_address_uuid_2\", responseData.id);",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(responseData.type).to.eql(\"addresses\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\") + \"/addresses/\" + responseData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Second, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully first address is set as shipping and billing address by default"
					},
					"response": []
				},
				{
					"name": "Request to update the second address to \"isDefaultShipping\": True,",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b524f0aa-dcc1-4483-bb6c-83da7892a693",
								"exec": [
									"var responseData = pm.response.json().data; ",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(responseData.type).to.eql(\"addresses\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has correct attributes\", function() {",
									"    pm.expect(responseData.attributes.salutation).to.be.eql(\"Mr\");",
									"    pm.expect(responseData.attributes.firstName).to.be.eql(\"John\");",
									"    pm.expect(responseData.attributes.lastName).to.be.eql(\"Doe\");",
									"    pm.expect(responseData.attributes.address1).to.be.eql(\"Second, 33, 11\");",
									"    pm.expect(responseData.attributes.address2).to.be.eql(\"b\");",
									"    pm.expect(responseData.attributes.address3).to.be.eql(\"aaa\");",
									"    pm.expect(responseData.attributes.zipCode).to.be.eql(\"12312\");",
									"    pm.expect(responseData.attributes.city).to.be.eql(\"Berlin\");",
									"    pm.expect(responseData.attributes.country).to.be.eql(\"Germany\");",
									"    pm.expect(responseData.attributes.iso2Code).to.be.eql(\"DE\");",
									"    pm.expect(responseData.attributes.company).to.be.eql(null);",
									"    pm.expect(responseData.attributes.phone).to.be.eql(\"22111-3-4-5\");",
									"    pm.expect(responseData.attributes.isDefaultShipping).to.be.eql(true);",
									"    pm.expect(responseData.attributes.isDefaultBilling).to.be.eql(false);",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\") + \"/addresses/\" + pm.variables.get(\"customer_address_uuid_2\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n        \"id\": \"{{customer_address_uuid_2}}\",\n        \"attributes\": {\n            \"isDefaultShipping\": true\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_2}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update the second address empty \"isDefaultShipping\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b524f0aa-dcc1-4483-bb6c-83da7892a693",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"isDefaultShipping => This value should be of type bool.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n        \"id\": \"{{customer_address_uuid_2}}\",\n        \"attributes\": {\n            \"isDefaultShipping\": \"\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_2}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update the second address wrong value \"isDefaultShipping\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b524f0aa-dcc1-4483-bb6c-83da7892a693",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"isDefaultShipping => This value should be of type bool.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n        \"id\": \"{{customer_address_uuid_2}}\",\n        \"attributes\": {\n            \"isDefaultShipping\": \"test\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_2}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update the second address wrong type \"isDefaultShipping\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b524f0aa-dcc1-4483-bb6c-83da7892a693",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"isDefaultShipping => This value should be of type bool.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n        \"id\": \"{{customer_address_uuid_2}}\",\n        \"attributes\": {\n            \"isDefaultShipping\": \"true\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_2}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request to update the second address to \"isDefaultBilling\": True",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fce43ef8-df7b-4ed6-92d2-b0624fa53b45",
								"exec": [
									"var responseData = pm.response.json().data; ",
									"",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(responseData.type).to.eql(\"addresses\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has correct attributes\", function() {",
									"    pm.expect(responseData.attributes.salutation).to.be.eql(\"Mr\");",
									"    pm.expect(responseData.attributes.firstName).to.be.eql(\"John\");",
									"    pm.expect(responseData.attributes.lastName).to.be.eql(\"Doe\");",
									"    pm.expect(responseData.attributes.address1).to.be.eql(\"Second, 33, 11\");",
									"    pm.expect(responseData.attributes.address2).to.be.eql(\"b\");",
									"    pm.expect(responseData.attributes.address3).to.be.eql(\"aaa\");",
									"    pm.expect(responseData.attributes.zipCode).to.be.eql(\"12312\");",
									"    pm.expect(responseData.attributes.city).to.be.eql(\"Berlin\");",
									"    pm.expect(responseData.attributes.country).to.be.eql(\"Germany\");",
									"    pm.expect(responseData.attributes.iso2Code).to.be.eql(\"DE\");",
									"    pm.expect(responseData.attributes.company).to.be.eql(null);",
									"    pm.expect(responseData.attributes.phone).to.be.eql(\"22111-3-4-5\");",
									"    pm.expect(responseData.attributes.isDefaultShipping).to.be.eql(true);",
									"    pm.expect(responseData.attributes.isDefaultBilling).to.be.eql(true);",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\")+\"/addresses/\"+ pm.variables.get(\"customer_address_uuid_2\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n       \"id\": \"{{customer_address_uuid_2}}\",\n        \"attributes\": {\n            \"isDefaultBilling\": true\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_2}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update the second address empty \"isDefaultBilling\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fce43ef8-df7b-4ed6-92d2-b0624fa53b45",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"isDefaultBilling => This value should be of type bool.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n       \"id\": \"{{customer_address_uuid_2}}\",\n        \"attributes\": {\n            \"isDefaultBilling\": \"\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_2}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Update the second address wrong type \"isDefaultBilling\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fce43ef8-df7b-4ed6-92d2-b0624fa53b45",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"isDefaultBilling => This value should be of type bool.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n       \"id\": \"{{customer_address_uuid_2}}\",\n        \"attributes\": {\n            \"isDefaultBilling\": \"false\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_2}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request the list of address",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c2f9a955-35e7-4822-9127-34e746cbd6d8",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.test(\"Status is ok, response is json\", function() {",
									"    pm.response.to.be.json;",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(responseData[0].type).to.eql(\"addresses\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData[0].id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has correct attributes\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(responseData[0].attributes.salutation).to.be.eql(\"Mr\");",
									"    pm.expect(responseData[0].attributes.firstName).to.be.eql(\"John\");",
									"    pm.expect(responseData[0].attributes.lastName).to.be.eql(\"Doe\");",
									"    pm.expect(responseData[0].attributes.address1).to.be.a(\"string\");",
									"    pm.expect(responseData[0].attributes.address2).to.be.eql(\"b\");",
									"    pm.expect(responseData[0].attributes.address3).to.be.eql(\"aaa\");",
									"    pm.expect(responseData[0].attributes.zipCode).to.be.eql(\"12312\");",
									"    pm.expect(responseData[0].attributes.city).to.be.eql(\"Berlin\");",
									"    pm.expect(responseData[0].attributes.country).to.be.eql(\"Germany\");",
									"    pm.expect(responseData[0].attributes.iso2Code).to.be.eql(\"DE\");",
									"    pm.expect(responseData[0].attributes.company).to.be.eql(null);",
									"    pm.expect(responseData[0].attributes.phone).to.be.eql(\"22111-3-4-5\");",
									"    // pm.expect(responseData[0].attributes.isDefaultShipping).to.be.eql(true);",
									"    // pm.expect(responseData[0].attributes.isDefaultBilling).to.be.eql(true);",
									"});",
									"",
									"",
									"pm.test(\"Has self link\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\") + \"/addresses\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Update customer  address with wrong url",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c182119-ecd4-4867-9a53-e4b6b0419b2a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n       \"id\": \"{{addressId_1}}\",\n        \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"company\": null,\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addressses/{{customer_address_uuid_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addressses",
								"{{customer_address_uuid_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Update not existed customer address",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cfbf3703-5670-43ba-b2b2-00ad45c727f8",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status code is 404 \", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Error code is 404\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"404\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Address was not found.\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n        \"id\": \"{{addressId_1}}\",\n        \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"company\": \"123\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/666d66b6-66fb-6d6-b666-b6e66ae6c666",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"666d66b6-66fb-6d6-b666-b6e66ae6c666"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Update customer address of another user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8a4a756-6a39-4c1d-a69e-90091f6b2d02",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status code is 403 \", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Error code is 411\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"411\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Unauthorized request.\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n       \"id\": \"{{addressId_1}}\",\n        \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"company\": null,\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/DE--1/addresses/{{customer_address_uuid_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"DE--1",
								"addresses",
								"{{customer_address_uuid_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Update customer address of not existed customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c98646c-c90a-451b-a234-ec9de42893be",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status code is 403 \", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Error code is 411\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"411\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Unauthorized request.\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n       \"id\": \"{{addressId_1}}\",\n        \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"company\": null,\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/DE--111111/addresses/{{customer_address_uuid_2}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"DE--111111",
								"addresses",
								"{{customer_address_uuid_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Update customer address with POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a0c8cac-dbbe-4a2f-8122-424d3774e94b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n       \"id\": \"{{addressId_1}}\",\n        \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 22\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"company\": null,\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Update customer address with Salutation = Null",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45826356-14af-443a-8779-82ff1a3d387a",
								"exec": [
									"pm.test(\"Status code is 422\", function() {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"salutation => This value should not be blank.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n       \"id\": \"{{addressId_1}}\",\n        \"attributes\": {\n            \"salutation\": null,\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"company\": null,\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Update customer address with Invalid Salutation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45826356-14af-443a-8779-82ff1a3d387a",
								"exec": [
									"pm.test(\"Status code is 422\", function() {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"salutation => The value you selected is not a valid choice.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n       \"id\": \"{{addressId_1}}\",\n        \"attributes\": {\n            \"salutation\": \"Herr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"company\": null,\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Update customer address with firstName = Null",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "22b57776-7a58-4988-b3ec-6ee04bb2ce8a",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"firstName => This value should not be blank.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n       \"id\": \"{{addressId_1}}\",\n        \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": null,\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"company\": null,\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Update customer address with too long  firstName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "22b57776-7a58-4988-b3ec-6ee04bb2ce8a",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"firstName => This value is too long. It should have 100 characters or less.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n       \"id\": \"{{addressId_1}}\",\n        \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"Daenerys of the House Targaryen, the First of Her Name, The Unburnt, Queen of the Andals, the Rhoynar and the First Men, Queen of Meereen, Khaleesi of the Great Grass Sea, Protector of the Realm, Lady Regnant of the Seven Kingdoms, Breaker of Chains\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"company\": null,\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Update customer address with lastName = Null",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15ef1390-3c92-4870-9ac0-e1dab0defcf3",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"lastName => This value should not be blank.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n       \"id\": \"{{addressId_1}}\",\n        \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": null,\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"company\": null,\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Update customer address with too long lastName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15ef1390-3c92-4870-9ac0-e1dab0defcf3",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"lastName => This value is too long. It should have 100 characters or less.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n       \"id\": \"{{addressId_1}}\",\n        \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"the First of Her Name, The Unburnt, Queen of the Andals, the Rhoynar and the First MenQueen of Meereen, Khaleesi of the Great Grass Sea, Protector of the Realm, Lady Regnant of the Seven Kingdoms, Breaker of Chains and Mother of Dragons\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"company\": null,\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Update customer address with address1 = Null",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "10649bec-8779-43f2-a896-906ef1d5069a",
								"exec": [
									"pm.test(\"Status code is 422\", function() {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"address1 => This value should not be blank.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n       \"id\": \"{{addressId_1}}\",\n        \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": null,\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"company\": null,\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Update customer address with too long address1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "10649bec-8779-43f2-a896-906ef1d5069a",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"address1 => This value is too long. It should have 255 characters or less.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n       \"id\": \"{{addressId_1}}\",\n        \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test 1234567890 1234567890 Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test 1234567890 1234567890 Test Test Test Test Test Test Test Test Test Test Test\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"company\": null,\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Update customer address with address2 = Null",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a77c8fb-b3ba-4e58-a142-f7c682cfa8c2",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"address2 => This value should not be blank.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n       \"id\": \"{{addressId_1}}\",\n        \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": null,\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"company\": null,\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Update customer address with too long address2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a77c8fb-b3ba-4e58-a142-f7c682cfa8c2",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"address2 => This value is too long. It should have 255 characters or less.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n       \"id\": \"{{addressId_1}}\",\n        \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"nulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltnulltltnullt\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"company\": null,\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Nagative. Update customer address with too long address3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ff90d7b-9e13-4842-9413-2ce28e5a1a99",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"address3 => This value is too long. It should have 255 characters or less.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n       \"id\": \"{{addressId_1}}\",\n        \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test 1234567890 1234567890 Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test 1234567890 1234567890 Test Test Test Test Test Test Test Test Test Test Test\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"company\": null,\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Update customer address with zipCode = Null",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c92ba06-7740-44e5-a8e4-7a8ccb1416de",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"zipCode => This value should not be blank.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n       \"id\": \"{{addressId_1}}\",\n        \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": null,\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"company\": null,\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Update customer address with too long  zip code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c92ba06-7740-44e5-a8e4-7a8ccb1416de",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"zipCode => This value is too long. It should have 15 characters or less.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n       \"id\": \"{{addressId_1}}\",\n        \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"1234567890123456\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"company\": null,\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Update customer address with invalid zipCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c92ba06-7740-44e5-a8e4-7a8ccb1416de",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"zipCode => This value is too long. It should have 15 characters or less.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n       \"id\": \"{{addressId_1}}\",\n        \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"TEST234234242343\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"company\": null,\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Update customer address with city = Null",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "39df3809-6086-4644-a661-ac20b1590475",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"city => This value should not be blank.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n       \"id\": \"{{addressId_1}}\",\n        \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": null,\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"company\": null,\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Update customer address with too long city",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "39df3809-6086-4644-a661-ac20b1590475",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"city => This value is too long. It should have 255 characters or less.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n       \"id\": \"{{addressId_1}}\",\n        \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test 1234567890 1234567890 Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test 1234567890 1234567890 Test Test Test Test Test Test Test Test Test Test Test\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"company\": null,\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Update customer address invalid and country do not match",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "496c56ca-86d6-4b0c-b1a1-5c64af1c0b00",
								"exec": [
									"pm.test(\"Status code is 400\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json(),",
									"        error = jsonData.errors[0];",
									"",
									"    pm.expect(error.code).to.not.be.empty;",
									"    pm.expect(error.detail).to.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n        \"id\": \"{{addressId_1}}\",\n        \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"SD!\",\n            \"iso2Code\": \"AT\",\n            \"company\": null,\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_1}}"
							]
						},
						"description": "valid request to with invalid data in request. Iso2code should be a non existing country iso value"
					},
					"response": []
				},
				{
					"name": "Negative. Update customer address with iso2Code = Null",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "07acd536-68d2-4f87-98e6-9806cf186106",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"iso2Code => This value should not be blank.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n        \"id\": \"{{addressId_1}}\",\n        \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": null,\n            \"company\": null,\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Update customer address with invalid iso2Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "07acd536-68d2-4f87-98e6-9806cf186106",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"iso2Code => This value is too long. It should have 2 characters or less.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n        \"id\": \"{{addressId_1}}\",\n        \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"EUR\",\n            \"company\": null,\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Update customer address with too long  phone",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89a2b026-fcda-4867-b0bf-fdfc49dcb37f",
								"exec": [
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"phone => This value is too long. It should have 255 characters or less.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n        \"id\": \"{{addressId_1}}\",\n        \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"company\": null,\n            \"phone\": \"1234567890-123456789012345678901234567890-123456789012345678901234567890-123456789012345678901234567890-123456789012345678901234567890-123456789012345678901234567890 -123456789012345678901234567890-123456789012345678901234567890123456789012345678901234512345\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Update customer address with wrong formatted data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89a2b026-fcda-4867-b0bf-fdfc49dcb37f",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json(), error = jsonData.errors[0];",
									"    ",
									"    pm.expect(error.detail).to.be.eql(\"Post data is invalid.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n        \"id\": \"{{addressId_1}}\",\n        \"attributes\": {\n            \"salutation\": Mr,\n            \"firstName\": John,\n            \"lastName\": Doe,\n            \"address1\": Third, 33, 11,\n            \"address2\": b,\n            \"address3\": aaa,\n            \"zipCode\": 12312,\n            \"city\": Berlin,\n            \"country\": Germany,\n            \"iso2Code\": DE,\n            \"company\": null,\n            \"phone\": test-test-test-5,\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Update customer address with wrong request type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89a2b026-fcda-4867-b0bf-fdfc49dcb37f",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json(), error = jsonData.errors[0];",
									"    ",
									"    pm.expect(error.detail).to.not.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"customers\",\n        \"id\": \"{{addressId_1}}\",\n        \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"company\": null,\n            \"phone\": \"test-test-test-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Update customer address with wrong value in request type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89a2b026-fcda-4867-b0bf-fdfc49dcb37f",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json(), error = jsonData.errors[0];",
									"    ",
									"    pm.expect(error.detail).to.not.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"TEST\",\n        \"id\": \"{{addressId_1}}\",\n        \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"company\": null,\n            \"phone\": \"test-test-test-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Update customer address with empty value in request type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89a2b026-fcda-4867-b0bf-fdfc49dcb37f",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json(), error = jsonData.errors[0];",
									"    ",
									"    pm.expect(error.detail).to.not.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"\",\n        \"id\": \"{{addressId_1}}\",\n        \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"company\": null,\n            \"phone\": \"test-test-test-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Update customer address with invalid customer reference",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89a2b026-fcda-4867-b0bf-fdfc49dcb37f",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json(), error = jsonData.errors[0];",
									"    ",
									"    pm.expect(error.code).to.be.eql(\"411\");",
									"    pm.expect(error.detail).to.be.eql(\"Unauthorized request.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n        \"id\": \"{{addressId_1}}\",\n        \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"company\": null,\n            \"phone\": \"test-test-test-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/qwe123/addresses/{{customer_address_uuid_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"qwe123",
								"addresses",
								"{{customer_address_uuid_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Update customer address with invalid address reference",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89a2b026-fcda-4867-b0bf-fdfc49dcb37f",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json(), error = jsonData.errors[0];",
									"    ",
									"    pm.expect(error.code).to.be.eql(\"404\");",
									"    pm.expect(error.detail).to.be.eql(\"Address was not found.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n        \"id\": \"{{addressId_1}}\",\n        \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"company\": null,\n            \"phone\": \"test-test-test-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/qwe123",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"qwe123"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Update customer address with  missing token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89a2b026-fcda-4867-b0bf-fdfc49dcb37f",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json(), error = jsonData.errors[0];",
									"    ",
									"    pm.expect(error.code).to.be.eql(\"002\");",
									"    pm.expect(error.detail).to.be.eql(\"Missing access token.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n        \"id\": \"{{addressId_1}}\",\n        \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"company\": null,\n            \"phone\": \"test-test-test-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "68749e00-c774-4b55-9b9a-ce0462740b61",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b4e77322-2686-4984-806b-d32b21ab994c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						},
						"description": "This test is to verify that request returns valid message and status code if customer does not have any addresses"
					},
					"response": []
				}
			]
		},
		{
			"name": "Customer - Delete customer addresses",
			"item": [
				{
					"name": "Delete customer address/Create a customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "38253789-33ea-4604-8ead-703ba75bd2b9",
								"exec": [
									"if ('errors' in pm.response.json() && pm.response.json().errors[0].code == 400) {",
									"    var email = pm.variables.get(\"email\");",
									"    pm.variables.set(\"email\", new Date().getTime() + '@mail.com');",
									"    postman.setNextRequest(request.name);",
									"} else {",
									"    var responseData = pm.response.json().data; ",
									"    ",
									"    pm.variables.set(\"customer_reference\", responseData.id);",
									"    pm.variables.set(\"customer_create_at\", responseData.attributes.createdAt);",
									"    pm.variables.set(\"customer_update_at\", responseData.attributes.updatedAt);",
									"    ",
									"    pm.test(\"Status code is 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"    ",
									"    pm.test(\"Has correct type returned\", function () {",
									"        pm.expect(responseData.type).to.eql(\"customers\");",
									"    });",
									"    ",
									"    pm.test(\"Has correct first, lastname  and salution\", function () {",
									"        pm.expect(responseData.attributes.firstName).to.eql(pm.variables.get(\"firstName\"));",
									"        pm.expect(responseData.attributes.lastName).to.eql(pm.variables.get(\"lastName\"));",
									"        pm.expect(responseData.attributes.salutation).to.eql(pm.variables.get(\"salutation\"));",
									"    });",
									"    ",
									"    pm.test(\"Create_at returned\", function (){",
									"        pm.expect(responseData.attributes.createdAt).to.eql(pm.variables.get(\"customer_create_at\"));",
									"    });",
									"    ",
									"    pm.test(\"Create_at returned\", function (){",
									"        pm.expect(responseData.attributes.updatedAt).to.eql(pm.variables.get(\"customer_update_at\"));",
									"    });",
									"    ",
									"    pm.test(\"Has self link\", function() {",
									"        pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\"));",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9, en;q=0.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"customers\",\"attributes\":{\"salutation\":\"{{salutation}}\",\"firstName\":\"{{firstName}}\",\"lastName\":\"{{lastName}}\",\"email\":\"{{email}}\",\"password\":\"{{password}}\",\"confirmPassword\":\"{{password}}\",\"acceptedTerms\":true}}}"
						},
						"url": {
							"raw": "{{url}}/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7ec4ad10-7fb0-4a3c-9229-7c009dba61d6",
								"exec": [
									"var responseData = pm.response.json().data; ",
									"",
									"pm.variables.set(\"token\", responseData.attributes.accessToken);",
									"pm.variables.set(\"refresh-token\", responseData.attributes.refreshToken);",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"access-tokens\");",
									"});",
									"",
									"pm.test(\"Has id null\", function() {",
									"    pm.expect(responseData.id).to.eql(null);",
									"});",
									"",
									"pm.test(\"Has token type Bearer\", function(){",
									"    pm.expect(responseData.attributes.tokenType).to.eql(\"Bearer\");",
									"});",
									"",
									"pm.test(\"Has expiration time\", function() {",
									"    pm.expect(responseData.attributes.expiresIn).to.eql(28800);",
									"});",
									"",
									"pm.test(\"Has access_token returned\", function() {",
									"    pm.expect(responseData.attributes.accessToken).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has refresh_token returned\", function() {",
									"    pm.expect(responseData.attributes.refreshToken).to.not.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"{{email}}\", \"password\": \"change123\"}}}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": [
						{
							"name": "Request access token",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/access-tokens",
									"host": [
										"{{url}}"
									],
									"path": [
										"access-tokens"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache",
									"name": "Cache-Control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"key": "Connection",
									"value": "close",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Thu, 21 Jun 2018 15:09:53 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "X-Server",
									"value": "spryker-vagrant",
									"name": "X-Server",
									"description": "Custom header"
								},
								{
									"key": "content-language",
									"value": "en_US",
									"name": "content-language",
									"description": "The language the content is in"
								}
							],
							"cookie": [],
							"body": "{\"data\":{\"type\":\"access-tokens\",\"id\":null,\"attributes\":{\"token_type\":\"Bearer\",\"expires_in\":28799,\"access_token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjI3NjYxZTJlMTk1Njc2ZDgzNTI3MDYwZDY5ODY2MGU3MjA1ODIzMTJkZTUwMjZmMTNjZDFkY2YxNjk1NmE0MTBiZGVmNzc5MDJjNGE1ZmRjIn0.eyJhdWQiOiJmcm9udGVuZCIsImp0aSI6IjI3NjYxZTJlMTk1Njc2ZDgzNTI3MDYwZDY5ODY2MGU3MjA1ODIzMTJkZTUwMjZmMTNjZDFkY2YxNjk1NmE0MTBiZGVmNzc5MDJjNGE1ZmRjIiwiaWF0IjoxNTI5NTkzNzkyLCJuYmYiOjE1Mjk1OTM3OTIsImV4cCI6MTUyOTYyMjU5Miwic3ViIjoie1wiY3VzdG9tZXJfcmVmZXJlbmNlXCI6XCJERS0tMVwiLFwiaWRfY3VzdG9tZXJcIjoxfSIsInNjb3BlcyI6WyJjdXN0b21lciJdfQ.U1Ij4aDJ7H34E8XFCXfQORCnytk7wUuGRAGkBGhhWQsHDQucgSJs8V5q820E9Z3V8lEGXoY2vpZJZ-wP41HVFMsXJo10LG6NenekOeRNVpSpBVAcys5cSCBT25sv32OqFnn-g18CkemAgKAx9qCqzIRj6hmrkGjXDWhHpphJYBX40s38hR7IDHK2DSODifm-lyivd7wIohASbi4nVTgL57TsNsiSJJaWje4mc8Vs-rcNiuwl4t6pVvHRDMlDskq_S1tNp8GXrj_ESNtesuFf_F_iiUt20tJFgdqYddeMZNIECRX1S1WQjefRVZBgvvqDUAeemVb75CAF1TCILW8S-Q\",\"refresh_token\":\"def5020076edcef1e548965759216bcb4957c4e3623e567bbcb66de2e2fdc4e00fbe539bd5d77837c48d05dfa223aeea9701eb43b808b1b71d5820222500fc4bfc045686a636cf5479c6d437f0c210e73de919b044e56471d44402496ff5253d23b9d0d821bf4925e27eb2817eba1538abb5f861a03dd0290897d97b8902e58fcd995c217309ac661d2db449417eb26fb24fd9832312a26cf065ac5122ba747044ac6eb4898fe2ef8b0ba57642c3989a5ac1dd72785098b3da12ed0d35b3f481a09a9d235386de514526e1267c8fe7178e9e229154f6c0dc9c547927ca61a6f725ca23c33930453fcae7e448dd8407d77dec07a41e8c360a3fafe5e1b50b535814e18ac513528113b2726b6414977096b1a7477d43d0bb319906c8086984f8ae182190b30103e8b4ebacc37438d7fada1c06102f870c85660c52a47d879e57e9643369206ac614a6051fd4eb1a3f4a032b74b59af84b88e1a2620b0f86b8ac59366100a9ef03b7606100f884d25d7fc56ac13c5538ccf985701b64ded1e2ec462a0800861747d2706b3184d1b3a4082b7f1e717d17092c4b70b75e5c14fb69d27dc4bdd0c0a905\"},\"links\":{\"self\":\"http:\\/\\/glue.de.shop-suite.local\\/access-tokens\\/\"}}}"
						}
					]
				},
				{
					"name": "Request to create  the first address",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4db395fb-168b-4c82-9e81-d89fc4599776",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(responseData.type).to.eql(\"addresses\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has correct addresses attributes\", function() {",
									"    pm.expect(responseData.attributes.salutation).to.be.eql(\"Mr\");",
									"    pm.expect(responseData.attributes.firstName).to.be.eql(\"John\");",
									"    pm.expect(responseData.attributes.lastName).to.be.eql(\"Doe\");",
									"    pm.expect(responseData.attributes.address1).to.be.eql(\"First, 33, 11\");",
									"    pm.expect(responseData.attributes.address2).to.be.eql(\"b\");",
									"    pm.expect(responseData.attributes.address3).to.be.eql(\"aaa\");",
									"    pm.expect(responseData.attributes.zipCode).to.be.eql(\"12312\");",
									"    pm.expect(responseData.attributes.city).to.be.eql(\"Berlin\");",
									"    pm.expect(responseData.attributes.country).to.be.eql(\"Germany\");",
									"    pm.expect(responseData.attributes.iso2Code).to.be.eql(\"DE\");",
									"    pm.expect(responseData.attributes.company).to.be.eql(null);",
									"    pm.expect(responseData.attributes.phone).to.be.eql(\"22111-3-4-5\");",
									"    pm.expect(responseData.attributes.isDefaultShipping).to.be.eql(true);",
									"    pm.expect(responseData.attributes.isDefaultBilling).to.be.eql(true);",
									"});  ",
									"",
									"// if this address is first we always have true for Shipping and Billing ",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\") + \"/addresses/\" + responseData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"First, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\" : \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully"
					},
					"response": []
				},
				{
					"name": "Request to create the second address",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "22a3d8cc-4b23-4c06-9e9b-edba00ec2596",
								"exec": [
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"try {",
									"    pm.environment.set(\"customer_address_uuid_2\", pm.response.json().data.id);",
									"} catch(e) {",
									"    console.log(e);",
									"}",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.type).to.eql(\"addresses\");",
									"    pm.expect(jsonData.data.type).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.id).to.be.a(\"string\");",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"customer_address_uuid_2\"));",
									"});",
									"",
									"pm.test(\"Has correct addresses attributes\", function() {",
									"     var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.attributes.salutation).to.be.eql(\"Mr\");",
									"    pm.expect(jsonData.data.attributes.firstName).to.be.eql(\"John\");",
									"    pm.expect(jsonData.data.attributes.lastName).to.be.eql(\"Doe\");",
									"    pm.expect(jsonData.data.attributes.address1).to.be.eql(\"Second, 33, 11\");",
									"    pm.expect(jsonData.data.attributes.address2).to.be.eql(\"b\");",
									"    pm.expect(jsonData.data.attributes.address3).to.be.eql(\"aaa\");",
									"    pm.expect(jsonData.data.attributes.zipCode).to.be.eql(\"12312\");",
									"    pm.expect(jsonData.data.attributes.city).to.be.eql(\"Berlin\");",
									"    pm.expect(jsonData.data.attributes.country).to.be.eql(\"Germany\");",
									"    pm.expect(jsonData.data.attributes.iso2Code).to.be.eql(\"DE\");",
									"    pm.expect(jsonData.data.attributes.company).to.be.eql(null);",
									"    pm.expect(jsonData.data.attributes.phone).to.be.eql(\"22111-3-4-5\");",
									"    pm.expect(jsonData.data.attributes.isDefaultShipping).to.be.eql(false);",
									"    pm.expect(jsonData.data.attributes.isDefaultBilling).to.be.eql(true);",
									"});  ",
									"",
									"// if this address is first we always have true for Shipping and Billing ",
									"",
									"pm.test(\"Has self link\", function() {",
									"    var jsonData = pm.response.json(),",
									"        expectedLink = pm.environment.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\") +\"/addresses/\"",
									"        + pm.environment.get(\"customer_address_uuid_2\");",
									"   ",
									"    pm.expect(jsonData.data.links.self).to.eql(expectedLink);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Second, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\" : \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": true\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that first address is created successfully"
					},
					"response": []
				},
				{
					"name": "Request list of customer's address",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c4d09ea-c38a-4d5a-9dd7-1f0e722d8570",
								"exec": [
									"var responseData = pm.response.json().data; ",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(responseData[0].type).to.eql(\"addresses\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData[0].id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData[0].links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\") + \"/addresses/\" + responseData[0].id);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(responseData[1].type).to.eql(\"addresses\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData[1].id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData[1].links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\") + \"/addresses/\" + responseData[1].id);",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\") + \"/addresses\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative.Delete customer not valid addresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b3309245-8769-4267-b55e-0b090e616669",
								"exec": [
									"pm.test(\"Status code is 404 \", function() {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Error code is 404\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"404\");",
									"});",
									"pm.test(\"Correct details message\", function() {",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Address was not found.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/0eaef226-cdb6-59bc-974a-2d2e0d0edad1",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"0eaef226-cdb6-59bc-974a-2d2e0d0edad1"
							]
						},
						"description": "This test is to verify that request returns valid message and status code if customer does not have any addresses"
					},
					"response": []
				},
				{
					"name": "Negative.Delete customer addresses by another customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "36171ab3-e019-4b1e-b76c-dd4f3f63e234",
								"exec": [
									"pm.test(\"Status code is 403\", function() {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Error code is 411\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"411\");",
									"});",
									"pm.test(\"Correct details message\", function() {",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Unauthorized request.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/DE--1/addresses/0eaef226-cdb6-59bc-974a-2d2e0d0edad1",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"DE--1",
								"addresses",
								"0eaef226-cdb6-59bc-974a-2d2e0d0edad1"
							]
						},
						"description": "This test is to verify that request returns valid message and status code if customer does not have any addresses"
					},
					"response": []
				},
				{
					"name": "Negative.Delete list of customer addresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "95c27920-c85a-4ecd-ad48-76a17bdc3f77",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status code is 400 \", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Error code is 412\", function() {",
									"    pm.expect(pm.response.json().errors[0].code).to.eql(\"412\");",
									"});",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(pm.response.json().errors[0].detail).to.eql(\"Address UUID is missing.\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\" : {\n     \"type\": \"addresses\",\n     \"id\" : \"35125125135\",\n     \"attributes\": {\n            \"customer_reference\": \"{{customer_reference}}\",\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Third, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n    \t}   \n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses"
							]
						},
						"description": "This test is to verify that request returns valid message and status code if customer does not have any addresses"
					},
					"response": []
				},
				{
					"name": "Negative.Delete customer address  invalid reference",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7801fa0-7763-4cdd-9c73-10d736c2aebb",
								"exec": [
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json(), error = jsonData.errors[0];",
									"    ",
									"    pm.expect(error.code).to.be.eql(\"411\");",
									"    pm.expect(error.detail).to.be.eql(\"Unauthorized request.\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c624003-f89a-46fa-aa92-6185e69826fd",
								"exec": [
									"// //text here",
									"// pm.sendRequest(",
									"//     {",
									"//         url: pm.environment.get(\"url\")+\"/customers/\"+pm.environment.get(\"customer_reference\")+\"/addresses\",  ",
									"//         method: 'GET',",
									"//         header: {",
									"//             \"authorization\": \"Bearer \"+ pm.environment.get(\"token\")",
									"//         },",
									"//     },function (err, response){",
									"//         console.log(response);",
									"//         var jsonData = response.json();",
									"//         console.log(jsonData);",
									"//         pm.environment.set(\"addressId_1\", jsonData.data[0].id);",
									"    ",
									"//     }",
									"// );"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/qwe123/addresses/{{customer_address_uuid_2}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"qwe123",
								"addresses",
								"{{customer_address_uuid_2}}"
							]
						},
						"description": "This test is to verify that request returns valid message and status code if customer does not have any addresses"
					},
					"response": []
				},
				{
					"name": "Negative.Delete customer address missing token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7801fa0-7763-4cdd-9c73-10d736c2aebb",
								"exec": [
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Has correct error message returned\", function() {",
									"    var jsonData = pm.response.json(), error = jsonData.errors[0];",
									"    ",
									"    pm.expect(error.code).to.be.eql(\"002\");",
									"    pm.expect(error.detail).to.be.eql(\"Missing access token.\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c624003-f89a-46fa-aa92-6185e69826fd",
								"exec": [
									"// //text here",
									"// pm.sendRequest(",
									"//     {",
									"//         url: pm.environment.get(\"url\")+\"/customers/\"+pm.environment.get(\"customer_reference\")+\"/addresses\",  ",
									"//         method: 'GET',",
									"//         header: {",
									"//             \"authorization\": \"Bearer \"+ pm.environment.get(\"token\")",
									"//         },",
									"//     },function (err, response){",
									"//         console.log(response);",
									"//         var jsonData = response.json();",
									"//         console.log(jsonData);",
									"//         pm.environment.set(\"addressId_1\", jsonData.data[0].id);",
									"    ",
									"//     }",
									"// );"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_2}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_2}}"
							]
						},
						"description": "This test is to verify that request returns valid message and status code if customer does not have any addresses"
					},
					"response": []
				},
				{
					"name": "Delete customer addresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7801fa0-7763-4cdd-9c73-10d736c2aebb",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c624003-f89a-46fa-aa92-6185e69826fd",
								"exec": [
									"// //text here",
									"// pm.sendRequest(",
									"//     {",
									"//         url: pm.environment.get(\"url\")+\"/customers/\"+pm.environment.get(\"customer_reference\")+\"/addresses\",  ",
									"//         method: 'GET',",
									"//         header: {",
									"//             \"authorization\": \"Bearer \"+ pm.environment.get(\"token\")",
									"//         },",
									"//     },function (err, response){",
									"//         console.log(response);",
									"//         var jsonData = response.json();",
									"//         console.log(jsonData);",
									"//         pm.environment.set(\"addressId_1\", jsonData.data[0].id);",
									"    ",
									"//     }",
									"// );"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}/addresses/{{customer_address_uuid_2}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}",
								"addresses",
								"{{customer_address_uuid_2}}"
							]
						},
						"description": "This test is to verify that request returns valid message and status code if customer does not have any addresses"
					},
					"response": []
				},
				{
					"name": "Delete customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "68749e00-c774-4b55-9b9a-ce0462740b61",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b4e77322-2686-4984-806b-d32b21ab994c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						},
						"description": "This test is to verify that request returns valid message and status code if customer does not have any addresses"
					},
					"response": []
				}
			]
		},
		{
			"name": "Customer - Change customer password",
			"item": [
				{
					"name": "Change customer password/Create a customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f56d9a8d-847d-413c-b1a5-dd4fb5b74d3a",
								"exec": [
									"if ('errors' in pm.response.json() && pm.response.json().errors[0].code == 400) {",
									"    var email = pm.variables.get(\"email\");",
									"    pm.variables.set(\"email\", new Date().getTime() + '@mail.com');",
									"    postman.setNextRequest(request.name);",
									"} else {",
									"    var responseData = pm.response.json().data; ",
									"    ",
									"    pm.variables.set(\"customer_reference\", responseData.id);",
									"    pm.variables.set(\"customer_create_at\", responseData.attributes.createdAt);",
									"    pm.variables.set(\"customer_update_at\", responseData.attributes.updatedAt);",
									"    ",
									"    pm.test(\"Status code is 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"    ",
									"    pm.test(\"Has correct type returned\", function () {",
									"        pm.expect(responseData.type).to.eql(\"customers\");",
									"    });",
									"    ",
									"    pm.test(\"Has correct first, lastname  and salution\", function () {",
									"        pm.expect(responseData.attributes.firstName).to.eql(pm.variables.get(\"firstName\"));",
									"        pm.expect(responseData.attributes.lastName).to.eql(pm.variables.get(\"lastName\"));",
									"        pm.expect(responseData.attributes.salutation).to.eql(pm.variables.get(\"salutation\"));",
									"    });",
									"    ",
									"    pm.test(\"Create_at returned\", function (){",
									"        pm.expect(responseData.attributes.createdAt).to.eql(pm.variables.get(\"customer_create_at\"));",
									"    });",
									"    ",
									"    pm.test(\"Create_at returned\", function (){",
									"        pm.expect(responseData.attributes.updatedAt).to.eql(pm.variables.get(\"customer_update_at\"));",
									"    });",
									"    ",
									"    pm.test(\"Has self link\", function() {",
									"        pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\"));",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9, en;q=0.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":\n\t{\n\t\t\"type\":\"customers\",\n\t\t\t\"attributes\":{\n\t\t\t\t\"salutation\":\"{{salutation}}\",\n\t\t\t\t\"firstName\":\"{{firstName}}\",\n\t\t\t\t\"lastName\":\"{{lastName}}\",\n\t\t\t\t\"email\":\"{{email}}\",\n\t\t\t\t\"password\":\"{{password}}\",\n\t\t\t\t\"confirmPassword\":\"{{password}}\",\n\t\t\t\t\"acceptedTerms\":true\n\t\t\t\t\n\t\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "275893bc-324a-428c-a22d-bb89d1bcdfb0",
								"exec": [
									"var responseData = pm.response.json().data; ",
									"",
									"pm.variables.set(\"token\", responseData.attributes.accessToken);",
									"pm.variables.set(\"refresh-token\", responseData.attributes.refreshToken);",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"access-tokens\");",
									"});",
									"",
									"pm.test(\"Has id null\", function() {",
									"    pm.expect(responseData.id).to.eql(null);",
									"});",
									"",
									"pm.test(\"Has token type Bearer\", function(){",
									"    pm.expect(responseData.attributes.tokenType).to.eql(\"Bearer\");",
									"});",
									"",
									"pm.test(\"Has expiration time\", function() {",
									"    pm.expect(responseData.attributes.expiresIn).to.eql(28800);",
									"});",
									"",
									"pm.test(\"Has access_token returned\", function() {",
									"    pm.expect(responseData.attributes.accessToken).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Has refresh_token returned\", function() {",
									"    pm.expect(responseData.attributes.refreshToken).to.not.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"{{email}}\", \"password\": \"change123\"}}}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": [
						{
							"name": "Request access token",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{\"type\":\"access-tokens\",\"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/access-tokens",
									"host": [
										"{{url}}"
									],
									"path": [
										"access-tokens"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache",
									"name": "Cache-Control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"key": "Connection",
									"value": "close",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Thu, 21 Jun 2018 15:09:53 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "X-Server",
									"value": "spryker-vagrant",
									"name": "X-Server",
									"description": "Custom header"
								},
								{
									"key": "content-language",
									"value": "en_US",
									"name": "content-language",
									"description": "The language the content is in"
								}
							],
							"cookie": [],
							"body": "{\"data\":{\"type\":\"access-tokens\",\"id\":null,\"attributes\":{\"token_type\":\"Bearer\",\"expires_in\":28799,\"access_token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjI3NjYxZTJlMTk1Njc2ZDgzNTI3MDYwZDY5ODY2MGU3MjA1ODIzMTJkZTUwMjZmMTNjZDFkY2YxNjk1NmE0MTBiZGVmNzc5MDJjNGE1ZmRjIn0.eyJhdWQiOiJmcm9udGVuZCIsImp0aSI6IjI3NjYxZTJlMTk1Njc2ZDgzNTI3MDYwZDY5ODY2MGU3MjA1ODIzMTJkZTUwMjZmMTNjZDFkY2YxNjk1NmE0MTBiZGVmNzc5MDJjNGE1ZmRjIiwiaWF0IjoxNTI5NTkzNzkyLCJuYmYiOjE1Mjk1OTM3OTIsImV4cCI6MTUyOTYyMjU5Miwic3ViIjoie1wiY3VzdG9tZXJfcmVmZXJlbmNlXCI6XCJERS0tMVwiLFwiaWRfY3VzdG9tZXJcIjoxfSIsInNjb3BlcyI6WyJjdXN0b21lciJdfQ.U1Ij4aDJ7H34E8XFCXfQORCnytk7wUuGRAGkBGhhWQsHDQucgSJs8V5q820E9Z3V8lEGXoY2vpZJZ-wP41HVFMsXJo10LG6NenekOeRNVpSpBVAcys5cSCBT25sv32OqFnn-g18CkemAgKAx9qCqzIRj6hmrkGjXDWhHpphJYBX40s38hR7IDHK2DSODifm-lyivd7wIohASbi4nVTgL57TsNsiSJJaWje4mc8Vs-rcNiuwl4t6pVvHRDMlDskq_S1tNp8GXrj_ESNtesuFf_F_iiUt20tJFgdqYddeMZNIECRX1S1WQjefRVZBgvvqDUAeemVb75CAF1TCILW8S-Q\",\"refresh_token\":\"def5020076edcef1e548965759216bcb4957c4e3623e567bbcb66de2e2fdc4e00fbe539bd5d77837c48d05dfa223aeea9701eb43b808b1b71d5820222500fc4bfc045686a636cf5479c6d437f0c210e73de919b044e56471d44402496ff5253d23b9d0d821bf4925e27eb2817eba1538abb5f861a03dd0290897d97b8902e58fcd995c217309ac661d2db449417eb26fb24fd9832312a26cf065ac5122ba747044ac6eb4898fe2ef8b0ba57642c3989a5ac1dd72785098b3da12ed0d35b3f481a09a9d235386de514526e1267c8fe7178e9e229154f6c0dc9c547927ca61a6f725ca23c33930453fcae7e448dd8407d77dec07a41e8c360a3fafe5e1b50b535814e18ac513528113b2726b6414977096b1a7477d43d0bb319906c8086984f8ae182190b30103e8b4ebacc37438d7fada1c06102f870c85660c52a47d879e57e9643369206ac614a6051fd4eb1a3f4a032b74b59af84b88e1a2620b0f86b8ac59366100a9ef03b7606100f884d25d7fc56ac13c5538ccf985701b64ded1e2ec462a0800861747d2706b3184d1b3a4082b7f1e717d17092c4b70b75e5c14fb69d27dc4bdd0c0a905\"},\"links\":{\"self\":\"http:\\/\\/glue.de.shop-suite.local\\/access-tokens\\/\"}}}"
						}
					]
				},
				{
					"name": "Change password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5bde9ad8-ce9a-409c-9d82-110adb116326",
								"exec": [
									"pm.test(\"Status code is 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Status code name has string\", function() {",
									"    pm.response.to.have.status(\"No Content\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customer-password\",\n    \"attributes\": {\n      \"password\": \"change123\",\n      \"newPassword\": \"change1234\",\n      \"confirmPassword\": \"change1234\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customer-password",
							"host": [
								"{{url}}"
							],
							"path": [
								"customer-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password. Wrong confirmation password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "44d2b75e-20b7-4dd1-a163-20287d06315a",
								"exec": [
									"pm.test(\"Status code is 422\", function() {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"confirmPassword => This value is too short. It should have 7 characters or more.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customer-password\",\n    \"attributes\": {\n      \"password\": \"change123\",\n      \"newPassword\": \"change1234\",\n      \"confirmPassword\": \"chan\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customer-password",
							"host": [
								"{{url}}"
							],
							"path": [
								"customer-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password. Wrong old password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1b404002-07d8-480e-a81a-890ac5b8a761",
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"password => This value is too short. It should have 7 characters or more.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customer-password\",\n    \"attributes\": {\n      \"password\": \"chan3\",\n      \"newPassword\": \"change1234\",\n      \"confirmPassword\": \"change1234\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customer-password",
							"host": [
								"{{url}}"
							],
							"path": [
								"customer-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password. New password is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3f052ed-5e81-457f-8e17-ef669cc848af",
								"exec": [
									"pm.test(\"Status code is 400\", function() {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"901\");",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"password => This value should not be blank.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customer-password\",\n    \"attributes\": {\n      \"password\": \"\",\n      \"newPassword\": \"change1234\",\n      \"confirmPassword\": \"change1234\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customer-password",
							"host": [
								"{{url}}"
							],
							"path": [
								"customer-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password. Passwords don't match",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08adfd8a-4fb9-4892-b913-a2a2fff3a884",
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Value in field newPassword should be identical to value in the confirmPassword field.\");",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"406\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customer-password\",\n    \"attributes\": {\n      \"password\": \"change123\",\n      \"newPassword\": \"change123466\",\n      \"confirmPassword\": \"change1234\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customer-password",
							"host": [
								"{{url}}"
							],
							"path": [
								"customer-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password. Valid data with POST method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6f1bdce5-65d5-4b19-9de1-47530164ddce",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customer-password\",\n    \"attributes\": {\n      \"password\": \"change123\",\n      \"newPassword\": \"change123466\",\n      \"confirmPassword\": \"change1234\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customer-password",
							"host": [
								"{{url}}"
							],
							"path": [
								"customer-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password. Valid data with DELETE method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "65c1e0a1-5074-482f-9455-6e2c9237a6bd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customer-password\",\n    \"attributes\": {\n      \"password\": \"change123\",\n      \"newPassword\": \"change1234\",\n      \"confirmPassword\": \"change1234\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customer-password",
							"host": [
								"{{url}}"
							],
							"path": [
								"customer-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password. Valid data with PUT method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c470d5b-653c-4038-8815-e1d9df43c697",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customer-password\",\n    \"attributes\": {\n      \"password\": \"change123\",\n      \"newPassword\": \"change1234\",\n      \"confirmPassword\": \"change1234\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customer-password",
							"host": [
								"{{url}}"
							],
							"path": [
								"customer-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password. Not authorized customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3b651004-5c24-421b-93e5-d2d155f7f596",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Invalid access token.\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "qewtqetqwetqewtqwtqwt",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customer-password\",\n    \"attributes\": {\n      \"password\": \"change123\",\n      \"newPassword\": \"change1234\",\n      \"confirmPassword\": \"change1234\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customer-password",
							"host": [
								"{{url}}"
							],
							"path": [
								"customer-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password. Wrong url",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "831a747b-d627-4eee-9493-49cbe3dc68a5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customer-password\",\n    \"attributes\": {\n      \"password\": \"chan3\",\n      \"newPassword\": \"change1234\",\n      \"confirmPassword\": \"change1234\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/sss/customer-password",
							"host": [
								"{{url}}"
							],
							"path": [
								"sss",
								"customer-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "68749e00-c774-4b55-9b9a-ce0462740b61",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b4e77322-2686-4984-806b-d32b21ab994c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						},
						"description": "This test is to verify that request returns valid message and status code if customer does not have any addresses"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "b07c07a0-af99-4b64-b5fe-d0178d4851ef",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f9076afc-a5aa-4c4b-8901-cb335851f622",
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Response is json\", function () {",
					"    if (pm.request.method !== \"DELETE\") {",
					"        pm.response.to.be.json;",
					"    }",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"id": "ad684b8a-91cc-41d3-8851-acde5dec680e",
			"key": "salutation",
			"value": "Mr",
			"type": "string"
		},
		{
			"id": "2bd3d697-7d9e-4e9d-8288-08d1e3bec35e",
			"key": "firstName",
			"value": "Max",
			"type": "string"
		},
		{
			"id": "7ea1313e-d1fc-4ae5-8ec7-fe61890f7b65",
			"key": "lastName",
			"value": "Musterman",
			"type": "string"
		},
		{
			"id": "660632ac-43df-47fa-89be-109093333049",
			"key": "email",
			"value": "max.musterman@email.com",
			"type": "string"
		},
		{
			"id": "ccfca378-47f8-4211-a3bd-273f34922b98",
			"key": "password",
			"value": "change123",
			"type": "string"
		},
		{
			"id": "a0d2a5bd-797c-49e6-8484-fd4402387ee9",
			"key": "customer_reference",
			"value": "DE--00",
			"type": "string"
		},
		{
			"id": "79e5eb4b-4319-43d7-bfc8-6f5847bb69fd",
			"key": "wrong_email",
			"value": "ivan.mustermanemail.com",
			"type": "string"
		},
		{
			"id": "8fefec49-889b-4cc0-bdd9-e994d35a3921",
			"key": "refresh-token",
			"value": "string",
			"type": "string"
		},
		{
			"id": "fd9c620a-a4cd-4d5b-a175-350170bbbaaf",
			"key": "wishlist1_uuid",
			"value": "string",
			"type": "string"
		},
		{
			"id": "03f5b925-b267-4d1a-85df-e85581c4883e",
			"key": "token",
			"value": "string",
			"type": "string"
		},
		{
			"id": "fd895b23-6787-49c2-a146-00238a36a13a",
			"key": "customer_reference2",
			"value": "string",
			"type": "string"
		},
		{
			"id": "6304b7ec-4061-450b-9025-3bcc0245f949",
			"key": "email2",
			"value": "max.musterman21@email.com",
			"type": "string"
		},
		{
			"id": "44f4d630-596e-4bc8-b435-5bb6373ffec2",
			"key": "token_2",
			"value": "string",
			"type": "string"
		},
		{
			"id": "c7837314-4301-4f87-834a-44d603eec546",
			"key": "refresh-token_2",
			"value": "string",
			"type": "string"
		},
		{
			"id": "ed2bfa87-8d01-4182-b8ff-c94b938ed46e",
			"key": "updated_email",
			"value": "string",
			"type": "string"
		},
		{
			"id": "cf15f6df-26f7-492d-bd0a-54f740517aab",
			"key": "restorePasswordKey",
			"value": "string",
			"type": "string"
		},
		{
			"id": "c662d84b-c28d-4653-9a94-2ed1ba647b0e",
			"key": "new_password",
			"value": "change98",
			"type": "string"
		}
	]
}