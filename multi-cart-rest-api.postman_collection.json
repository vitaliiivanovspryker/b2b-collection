{
	"info": {
		"_postman_id": "e8d22253-ed3d-4233-a66b-aff79c160bbf",
		"name": "multi-cart-rest-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create a Regular cart",
			"item": [
				{
					"name": "Create new customer (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ad8c317-2a5a-46a7-afee-92b8b26b9d20",
								"exec": [
									"if ('errors' in pm.response.json() && pm.response.json().errors[0].code == 400) {",
									"    var email = pm.variables.get(\"username\");",
									"    pm.variables.set(\"username\", new Date().getTime() + '@mail.com');",
									"    postman.setNextRequest(request.name);",
									"} else {",
									"    var responseData = pm.response.json().data;",
									"",
									"    pm.variables.set(\"customer_reference\", responseData.id);",
									"    pm.variables.set(\"customer_create_at\", responseData.attributes.createdAt);",
									"    pm.variables.set(\"customer_update_at\", responseData.attributes.updatedAt);",
									"    ",
									"    pm.test(\"Status code is 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"    ",
									"    pm.test(\"Has correct type and id returned\", function () {",
									"        pm.expect(responseData.type).to.eql(\"customers\");",
									"        pm.expect(responseData.id).to.eql(pm.variables.get(\"customer_reference\"));",
									"    });",
									"    ",
									"    pm.test(\"Create_at returned\", function (){",
									"        // need to add the assert to check the null in the field ",
									"        pm.expect(responseData.attributes.createdAt).to.eql(pm.variables.get(\"customer_create_at\"));",
									"    });",
									"    ",
									"    pm.test(\"Create_at returned\", function (){",
									"        // need to add the assert to check the null in the field ",
									"        pm.expect(responseData.attributes.updatedAt).to.eql(pm.variables.get(\"customer_update_at\"));",
									"    });",
									"    ",
									"    pm.test(\"Has self link\", function() {",
									"        pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\"));",
									"    });",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "51ba2b17-58f0-4abe-b0d8-d6e0f93ead8c",
								"exec": [
									"setTimeout(function() {}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Anonymous-Customer-Unique-Id",
								"value": "{{anonymous_customer_id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n    \"attributes\": {\n        \"salutation\": \"Mr\",\n        \"gender\": \"Male\",\n        \"firstName\":\"First Name\",\n        \"lastName\":\"test\",\n        \"email\":\"{{username}}\",\n        \"password\":\"{{password}}\",\n        \"confirmPassword\":\"{{password}}\",\n        \"acceptedTerms\":true\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request access token (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09587067-e655-4e6c-9698-87148832d432",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.variables.set(\"token\", responseData.attributes.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"access-tokens\",\n        \"attributes\": {\n            \"username\": \"{{username}}\",\n            \"password\": \"{{password}}\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request for creating a regular cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"carts\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).not.eql(null);",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has priceMode returned\", function() {",
									"    pm.expect(responseData.attributes.priceMode).to.eql(pm.variables.get(\"price_mode\"));",
									"});",
									"",
									"pm.test(\"Has currency returned\", function() {",
									"    pm.expect(responseData.attributes.currency).to.eql(pm.variables.get(\"currency\"));",
									"});",
									"",
									"pm.test(\"Has store returned\", function() {",
									"    pm.expect(responseData.attributes.store).to.eql(pm.variables.get(\"store\"));",
									"});",
									"",
									"pm.test(\"Has name returned\", function() {",
									"    pm.expect(responseData.attributes.name).to.eql(pm.variables.get(\"name\"));",
									"});",
									"",
									"pm.test(\"Has isDefault returned\", function() {",
									"    pm.expect(responseData.attributes.isDefault).to.eql(true);",
									"});",
									"",
									"pm.test(\"Has discounts returned\", function() {",
									"    pm.expect(responseData.attributes.discounts.length).not.eql(null);",
									"});",
									"",
									"pm.test(\"Has totals returned\", function() {",
									"    pm.expect(responseData.attributes.totals.length).not.eql(null);",
									"});",
									"",
									"pm.test.skip(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.not.be.empty;",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/carts/\" + pm.variables.get(\"cart_id\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"carts\",\n        \"attributes\": {\n        \t\"name\": \"{{name}}\",\n            \"priceMode\": \"{{price_mode}}\",\n            \"currency\": \"{{currency}}\",\n            \"store\": \"{{store}}\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request for creating a regular cart with Price_Mode = Net currency = EUR store = DE  and name = test cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"carts\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).not.eql(null);",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has priceMode returned\", function() {",
									"    pm.expect(responseData.attributes.priceMode).to.eql(\"Gross\");",
									"});",
									"",
									"pm.test(\"Has currency returned\", function() {",
									"    pm.expect(responseData.attributes.currency).to.eql(\"EUR\");",
									"});",
									"",
									"pm.test(\"Has store returned\", function() {",
									"    pm.expect(responseData.attributes.store).to.eql(\"DE\");",
									"});",
									"",
									"pm.test(\"Has name returned\", function() {",
									"    pm.expect(responseData.attributes.name).to.eql(\"test cart\");",
									"});",
									"",
									"pm.test(\"Has isDefault returned\", function() {",
									"    pm.expect(responseData.attributes.isDefault).to.eql(true);",
									"});",
									"",
									"pm.test(\"Has discounts returned\", function() {",
									"    pm.expect(responseData.attributes.discounts.length).not.eql(null);",
									"});",
									"",
									"pm.test.skip(\"Has totals returned\", function() {",
									"    pm.expect(responseData.attributes.totals.length).not.eql(null);",
									"});",
									"",
									"pm.test.skip(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.not.be.empty;",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/carts/\" + pm.variables.get(\"cart_id\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"carts\",\n        \"attributes\": {\n        \t\"name\": \"test cart\",\n            \"priceMode\": \"Gross\",\n            \"currency\": \"EUR\",\n            \"store\": \"DE\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request for creating a regular cart with Price_Mode = Net currency = CHF store = DE  and name = new test cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"carts\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).not.eql(null);",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has priceMode returned\", function() {",
									"    pm.expect(responseData.attributes.priceMode).to.eql(\"Net\");",
									"});",
									"",
									"pm.test(\"Has currency returned\", function() {",
									"    pm.expect(responseData.attributes.currency).to.eql(\"CHF\");",
									"});",
									"",
									"pm.test(\"Has store returned\", function() {",
									"    pm.expect(responseData.attributes.store).to.eql(\"DE\");",
									"});",
									"",
									"pm.test(\"Has name returned\", function() {",
									"    pm.expect(responseData.attributes.name).to.eql(\"new test cart\");",
									"});",
									"",
									"pm.test(\"Has isDefault returned\", function() {",
									"    pm.expect(responseData.attributes.isDefault).to.eql(true);",
									"});",
									"",
									"pm.test(\"Has discounts returned\", function() {",
									"    pm.expect(responseData.attributes.discounts.length).not.eql(null);",
									"});",
									"",
									"pm.test.skip(\"Has totals returned\", function() {",
									"    pm.expect(responseData.attributes.totals.length).not.eql(null);",
									"});",
									"",
									"pm.test.skip(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.not.be.empty;",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/carts/\" + pm.variables.get(\"cart_id\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"carts\",\n        \"attributes\": {\n        \t\"name\": \"new test cart\",\n            \"priceMode\": \"Net\",\n            \"currency\": \"CHF\",\n            \"store\": \"DE\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Request for creating a regular cart with the same name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"carts\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).not.eql(null);",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has priceMode returned\", function() {",
									"    pm.expect(responseData.attributes.priceMode).to.eql(pm.variables.get(\"price_mode\"));",
									"});",
									"",
									"pm.test(\"Has currency returned\", function() {",
									"    pm.expect(responseData.attributes.currency).to.eql(pm.variables.get(\"currency\"));",
									"});",
									"",
									"pm.test(\"Has store returned\", function() {",
									"    pm.expect(responseData.attributes.store).to.eql(pm.variables.get(\"store\"));",
									"});",
									"",
									"pm.test(\"Has name returned\", function() {",
									"    pm.expect(responseData.attributes.name).to.eql(pm.variables.get(\"name\") + ' 1');",
									"});",
									"",
									"pm.test(\"Has isDefault returned\", function() {",
									"    pm.expect(responseData.attributes.isDefault).to.eql(true);",
									"});",
									"",
									"pm.test(\"Has discounts returned\", function() {",
									"    pm.expect(responseData.attributes.discounts.length).not.eql(null);",
									"});",
									"",
									"pm.test(\"Has totals returned\", function() {",
									"    pm.expect(responseData.attributes.totals.length).not.eql(null);",
									"});",
									"",
									"pm.test.skip(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.not.be.empty;",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/carts/\" + pm.variables.get(\"cart_id\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"carts\",\n        \"attributes\": {\n        \t\"name\": \"{{name}}\",\n            \"priceMode\": \"{{price_mode}}\",\n            \"currency\": \"{{currency}}\",\n            \"store\": \"{{store}}\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Request for creating a regular cart without price mode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(422);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[0].code).to.eql(\"901\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"priceMode => This field is missing.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"carts\",\n        \"attributes\": {\n        \t\"name\": \"{{name}}\",\n            \"currency\": \"{{currency}}\",\n            \"store\": \"{{store}}\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Send the request with an empty body",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Post data is invalid.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Request for creating a regular cart without name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(422);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[0].code).to.eql(\"901\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"name => This field is missing.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"carts\",\n        \"attributes\": {\n            \"priceMode\": \"{{price_mode}}\",\n            \"currency\": \"{{currency}}\",\n            \"store\": \"{{store}}\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Request for creating a regular cart without currency",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(422);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[0].code).to.eql(\"901\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"currency => This field is missing.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"carts\",\n        \"attributes\": {\n            \"name\": \"{{name}}\",\n            \"priceMode\": \"{{price_mode}}\",\n            \"store\": \"{{store}}\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Request for creating a regular cart with with name field length 31",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(422);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[0].code).to.eql(\"901\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"name => This value is too long. It should have 30 characters or less.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"carts\",\n        \"attributes\": {\n        \t\"name\": \"{{long_name}}\",\n            \"priceMode\": \"{{price_mode}}\",\n            \"currency\": \"{{currency}}\",\n            \"store\": \"{{store}}\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Request for creating a regular cart with invalid type value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Invalid type.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"cartssss\",\n        \"attributes\": {\n            \"name\": \"{{name}}\",\n            \"priceMode\": \"{{priceMode}}\",\n            \"currency\": \"{{currency}}\",\n            \"store\": \"{{store}}\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Request for creating a regular cart without type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Invalid type.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Anonymous-Customer-Unique-Id",
								"type": "text",
								"value": "{{anonymous_customer_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"\",\n        \"attributes\": {\n            \"priceMode\": \"{{price_mode}}\",\n            \"currency\": \"{{currency}}\",\n            \"store\": \"{{store}}\",\n            \"name\": \"{{name}}\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Send the request with empty attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(422);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[0].code).to.eql(\"901\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"priceMode => This field is missing.\");",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[1].status).to.eql(422);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[1].code).to.eql(\"901\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[1].detail).to.eql(\"currency => This field is missing.\");",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[2].status).to.eql(422);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[2].code).to.eql(\"901\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[2].detail).to.eql(\"store => This field is missing.\");",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[3].status).to.eql(422);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[3].code).to.eql(\"901\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[3].detail).to.eql(\"name => This field is missing.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Anonymous-Customer-Unique-Id",
								"type": "text",
								"value": "{{anonymous_customer_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"carts\",\n        \"attributes\": {\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request delete customer (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "392dab97-c0fa-42bf-9de4-2f3fe7136abc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Retrieve the regular cart by uuid or list of cart",
			"item": [
				{
					"name": "Create new customer (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ad8c317-2a5a-46a7-afee-92b8b26b9d20",
								"exec": [
									"if ('errors' in pm.response.json() && pm.response.json().errors[0].code == 400) {",
									"    var email = pm.variables.get(\"username\");",
									"    pm.variables.set(\"username\", new Date().getTime() + '@mail.com');",
									"    postman.setNextRequest(request.name);",
									"} else {",
									"    var responseData = pm.response.json().data;",
									"",
									"    pm.variables.set(\"customer_reference\", responseData.id);",
									"    pm.variables.set(\"customer_create_at\", responseData.attributes.createdAt);",
									"    pm.variables.set(\"customer_update_at\", responseData.attributes.updatedAt);",
									"    ",
									"    pm.test(\"Status code is 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"    ",
									"    pm.test(\"Has correct type and id returned\", function () {",
									"        pm.expect(responseData.type).to.eql(\"customers\");",
									"        pm.expect(responseData.id).to.eql(pm.variables.get(\"customer_reference\"));",
									"    });",
									"    ",
									"    pm.test(\"Create_at returned\", function (){",
									"        // need to add the assert to check the null in the field ",
									"        pm.expect(responseData.attributes.createdAt).to.eql(pm.variables.get(\"customer_create_at\"));",
									"    });",
									"    ",
									"    pm.test(\"Create_at returned\", function (){",
									"        // need to add the assert to check the null in the field ",
									"        pm.expect(responseData.attributes.updatedAt).to.eql(pm.variables.get(\"customer_update_at\"));",
									"    });",
									"    ",
									"    pm.test(\"Has self link\", function() {",
									"        pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\"));",
									"    });",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "51ba2b17-58f0-4abe-b0d8-d6e0f93ead8c",
								"exec": [
									"setTimeout(function() {}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Anonymous-Customer-Unique-Id",
								"value": "{{anonymous_customer_id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n    \"attributes\": {\n        \"salutation\": \"Mr\",\n        \"gender\": \"Male\",\n        \"firstName\":\"First Name\",\n        \"lastName\":\"test\",\n        \"email\":\"{{username}}\",\n        \"password\":\"{{password}}\",\n        \"confirmPassword\":\"{{password}}\",\n        \"acceptedTerms\":true\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request access token (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09587067-e655-4e6c-9698-87148832d432",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.variables.set(\"token\", responseData.attributes.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"access-tokens\",\n        \"attributes\": {\n            \"username\": \"{{username}}\",\n            \"password\": \"{{password}}\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request for getting the list of cart (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseData = pm.response.json().data[0];",
									"",
									"pm.variables.set(\"cart_id\", responseData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request for adding an item into the regular cart (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"sku\": \"{{sku}}\",\n            \"quantity\": 1\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request for getting the list of regular cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseData = pm.response.json().data[0];",
									"",
									"pm.variables.set(\"cart_id\", responseData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"carts\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).not.eql(null);",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has priceMode returned\", function() {",
									"    pm.expect(responseData.attributes.priceMode).not.eql(null);",
									"    pm.expect(responseData.attributes.priceMode).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has currency returned\", function() {",
									"    pm.expect(responseData.attributes.currency).not.eql(null);",
									"    pm.expect(responseData.attributes.currency).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has store returned\", function() {",
									"    pm.expect(responseData.attributes.store).not.eql(null);",
									"    pm.expect(responseData.attributes.store).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has discounts returned\", function() {",
									"    pm.expect(responseData.attributes.discounts.length).not.eql(null);",
									"});",
									"",
									"pm.test(\"Has totals returned\", function() {",
									"    pm.expect(responseData.attributes.totals.length).not.eql(null);",
									"",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.not.be.empty;",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/carts/\" + pm.variables.get(\"cart_id\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request for getting the regular cart by UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"carts\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).to.eql(pm.variables.get(\"cart_id\"));",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has priceMode returned\", function() {",
									"    pm.expect(responseData.attributes.priceMode).not.eql(null);",
									"    pm.expect(responseData.attributes.priceMode).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has currency returned\", function() {",
									"    pm.expect(responseData.attributes.currency).not.eql(null);",
									"    pm.expect(responseData.attributes.currency).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has store returned\", function() {",
									"    pm.expect(responseData.attributes.store).not.eql(null);",
									"    pm.expect(responseData.attributes.store).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has discounts returned\", function() {",
									"    pm.expect(responseData.attributes.discounts.length).not.eql(null);",
									"});",
									"",
									"pm.test(\"Has totals returned\", function() {",
									"    pm.expect(responseData.attributes.totals.length).not.eql(null);",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.not.be.empty;",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/carts/\" + pm.variables.get(\"cart_id\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request with broken URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/cart/{{cart_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"cart",
								"{{cart_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request with no existing UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[0].code).to.eql(\"101\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Cart with given uuid not found.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts/{{wrong_cart_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{wrong_cart_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request with the wrong method DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(422);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[0].code).to.eql(\"105\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Cart could not be deleted.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request with the wrong method POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request access token (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09587067-e655-4e6c-9698-87148832d432",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.variables.set(\"token\", responseData.attributes.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"access-tokens\",\n        \"attributes\": {\n            \"username\": \"spencor.hopkin@spryker.com\",\n            \"password\": \"change123\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request with UUID of cart another customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[0].code).to.eql(\"101\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Cart with given uuid not found.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request access token (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09587067-e655-4e6c-9698-87148832d432",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.variables.set(\"token\", responseData.attributes.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"access-tokens\",\n        \"attributes\": {\n            \"username\": \"{{username}}\",\n            \"password\": \"{{password}}\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request delete customer (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "392dab97-c0fa-42bf-9de4-2f3fe7136abc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Remove an item from the regular cart ",
			"item": [
				{
					"name": "Send the request without uuid of cart in URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts/items/{{sku}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"items",
								"{{sku}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request for getting the list of cart (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseData = pm.response.json().data[0];",
									"",
									"pm.variables.set(\"cart_id\", responseData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request with the wrong method GET",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items/{{sku}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items",
								"{{sku}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request with the wrong method PATCH",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Post data is invalid.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items/{{sku}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items",
								"{{sku}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request access token (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09587067-e655-4e6c-9698-87148832d432",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.variables.set(\"token\", responseData.attributes.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"access-tokens\",\n        \"attributes\": {\n            \"username\": \"{{email}}\",\n            \"password\": \"{{password}}\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request for removing an item from the regular cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items/{{sku}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items",
								"{{sku}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request with uuid of the cart anther a customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[0].code).to.eql(\"101\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Cart with given uuid not found.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items/{{sku}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items",
								"{{sku}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request with the wrong method POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items/{{sku}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items",
								"{{sku}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request delete customer (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "392dab97-c0fa-42bf-9de4-2f3fe7136abc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new customer (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ad8c317-2a5a-46a7-afee-92b8b26b9d20",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.variables.set(\"customer_reference\", responseData.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "51ba2b17-58f0-4abe-b0d8-d6e0f93ead8c",
								"exec": [
									"setTimeout(function() {}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Anonymous-Customer-Unique-Id",
								"value": "{{anonymous_customer_id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n    \"attributes\": {\n        \"salutation\": \"Mr\",\n        \"gender\": \"Male\",\n        \"firstName\":\"First Name\",\n        \"lastName\":\"test\",\n        \"email\":\"{{username}}\",\n        \"password\":\"{{password}}\",\n        \"confirmPassword\":\"{{password}}\",\n        \"acceptedTerms\":true\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request access token (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09587067-e655-4e6c-9698-87148832d432",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.variables.set(\"token\", responseData.attributes.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"access-tokens\",\n        \"attributes\": {\n            \"username\": \"spencor.hopkin@spryker.com\",\n            \"password\": \"change123\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request without sku in URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[0].code).to.eql(\"108\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Cart uuid or item group key is not specified.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request with non-existent SKU in a cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[0].code).to.eql(\"103\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Item with the given group key not found in the cart.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items/{{wrong_sku}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items",
								"{{wrong_sku}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request access token (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09587067-e655-4e6c-9698-87148832d432",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.variables.set(\"token\", responseData.attributes.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"access-tokens\",\n        \"attributes\": {\n            \"username\": \"{{username}}\",\n            \"password\": \"{{password}}\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request for adding an item into the regular cart (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"sku\": \"{{sku}}\",\n            \"quantity\": 1\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request with broken URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/cart/{{cart_id}}/items/{{sku}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"cart",
								"{{cart_id}}",
								"items",
								"{{sku}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Add an item into existing regular cart ",
			"item": [
				{
					"name": "Send the request with empty sku",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[0].code).to.eql(\"901\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"[sku] => This value should not be blank.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"sku\": \"\",\n            \"quantity\": 1\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request delete customer (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "392dab97-c0fa-42bf-9de4-2f3fe7136abc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request without type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Post data is invalid.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"\",\n        \"attributes\": {\n            \"sku\": \"{{sku}}\",\n            \"quantity\": 1\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request for adding a new item into the cart with the wrong method ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request with quantity 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(422);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[0].code).to.eql(\"102\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Wrong quantity for product SKU '\" + pm.variables.get(\"sku\") + \"'.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"sku\": \"{{sku}}\",\n            \"quantity\": 0\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request without quantity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[0].code).to.eql(\"901\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"[quantity] => This field is missing.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"sku\": \"{{sku}}\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request with empty attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[0].code).to.eql(\"901\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"[sku] => This field is missing.\");",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[1].status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[1].code).to.eql(\"901\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[1].detail).to.eql(\"[quantity] => This field is missing.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request with no existing sku",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(422);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[0].code).to.eql(\"102\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Product \\\"228\\\" not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"sku\": \"228\",\n            \"quantity\": 1\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request with abstract sku",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(422);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[0].code).to.eql(\"102\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Product \\\"\" + pm.variables.get(\"abstract_sku\") + \"\\\" not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"sku\": \"{{abstract_sku}}\",\n            \"quantity\": 1\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request access token (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09587067-e655-4e6c-9698-87148832d432",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.variables.set(\"token\", responseData.attributes.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"access-tokens\",\n        \"attributes\": {\n            \"username\": \"{{email}}\",\n            \"password\": \"{{password}}\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new customer (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ad8c317-2a5a-46a7-afee-92b8b26b9d20",
								"exec": [
									"if ('errors' in pm.response.json() && pm.response.json().errors[0].code == 400) {",
									"    var email = pm.variables.get(\"email\");",
									"    pm.variables.set(\"email\", new Date().getTime() + '@mail.com');",
									"    postman.setNextRequest(request.name);",
									"} else {",
									"    var responseData = pm.response.json().data;",
									"",
									"    pm.variables.set(\"customer_reference\", responseData.id);",
									"    pm.variables.set(\"customer_create_at\", responseData.attributes.createdAt);",
									"    pm.variables.set(\"customer_update_at\", responseData.attributes.updatedAt);",
									"    ",
									"    pm.test(\"Status code is 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "51ba2b17-58f0-4abe-b0d8-d6e0f93ead8c",
								"exec": [
									"setTimeout(function() {}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Anonymous-Customer-Unique-Id",
								"value": "{{anonymous_customer_id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n    \"attributes\": {\n        \"salutation\": \"Mr\",\n        \"gender\": \"Male\",\n        \"firstName\":\"First Name\",\n        \"lastName\":\"test\",\n        \"email\":\"{{email}}\",\n        \"password\":\"{{password}}\",\n        \"confirmPassword\":\"{{password}}\",\n        \"acceptedTerms\":true\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request with empty quantity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[0].code).to.eql(\"901\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"[quantity] => This value should not be blank.\");",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[1].status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[1].code).to.eql(\"901\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[1].detail).to.eql(\"[quantity] => This value should be of type numeric.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"sku\": \"{{sku}}\",\n            \"quantity\": \"\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request without sku",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[0].code).to.eql(\"901\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"[sku] => This field is missing.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"quantity\": 1\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request for adding a new item into the cart with the wrong method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[0].code).to.eql(\"108\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Cart uuid or item group key is not specified.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"sku\": \"{{sku}}\",\n            \"quantity\": 1\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request with a wrong type \"customer\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Post data is invalid.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Anonymous-Customer-Unique-Id",
								"type": "text",
								"value": "{{anonymous_customer_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"customer\",\n        \"attributes\": {\n            \"sku\": \"{{sku}}\",\n            \"quantity\": 1\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request for adding a new item into the cart with the wrong method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[0].code).to.eql(\"108\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Cart uuid or item group key is not specified.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"sku\": \"{{sku}}\",\n            \"quantity\": 1\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request for getting the list of cart (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseData = pm.response.json().data[0];",
									"",
									"pm.variables.set(\"cart_id\", responseData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request for adding an item into the regular cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.variables.set(\"cart_id\", responseData.id);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"carts\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).not.eql(null);",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has priceMode returned\", function() {",
									"    pm.expect(responseData.attributes.priceMode).not.eql(null);",
									"    pm.expect(responseData.attributes.priceMode).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has currency returned\", function() {",
									"    pm.expect(responseData.attributes.currency).not.eql(null);",
									"    pm.expect(responseData.attributes.currency).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has store returned\", function() {",
									"    pm.expect(responseData.attributes.store).not.eql(null);",
									"    pm.expect(responseData.attributes.store).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has discounts returned\", function() {",
									"    pm.expect(responseData.attributes.discounts.length).not.eql(null);",
									"});",
									"",
									"pm.test(\"Has totals returned\", function() {",
									"    pm.expect(responseData.attributes.totals.length).not.eql(null);",
									"    ",
									"    pm.expect(responseData.attributes.totals.expenseTotal).not.eql(null);",
									"    pm.expect(responseData.attributes.totals.discountTotal).not.eql(null);",
									"    pm.expect(responseData.attributes.totals.taxTotal).not.eql(null);",
									"    pm.expect(responseData.attributes.totals.subtotal).not.eql(null);",
									"    pm.expect(responseData.attributes.totals.grandTotal).not.eql(null);",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.not.be.empty;",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/carts/\" + pm.variables.get(\"cart_id\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"sku\": \"{{sku}}\",\n            \"quantity\": 1\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Retrieve the regular cart by uuid or list of cart",
			"item": [
				{
					"name": "Send the request with no existing UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[0].code).to.eql(\"101\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Cart with given uuid not found.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts/{{wrong_cart_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{wrong_cart_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request for getting the list of cart (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseData = pm.response.json().data[0];",
									"",
									"pm.variables.set(\"cart_id\", responseData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request with the wrong method DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(422);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[0].code).to.eql(\"105\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Cart could not be deleted.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request access token (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09587067-e655-4e6c-9698-87148832d432",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.variables.set(\"token\", responseData.attributes.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"access-tokens\",\n        \"attributes\": {\n            \"username\": \"{{email}}\",\n            \"password\": \"{{password}}\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request access token (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09587067-e655-4e6c-9698-87148832d432",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.variables.set(\"token\", responseData.attributes.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"access-tokens\",\n        \"attributes\": {\n            \"username\": \"{{username}}\",\n            \"password\": \"{{password}}\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request with the wrong method PATCH",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request with the wrong method POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request for getting the regular cart by UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"carts\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).to.eql(pm.variables.get(\"cart_id\"));",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has priceMode returned\", function() {",
									"    pm.expect(responseData.attributes.priceMode).not.eql(null);",
									"    pm.expect(responseData.attributes.priceMode).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has currency returned\", function() {",
									"    pm.expect(responseData.attributes.currency).not.eql(null);",
									"    pm.expect(responseData.attributes.currency).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has store returned\", function() {",
									"    pm.expect(responseData.attributes.store).not.eql(null);",
									"    pm.expect(responseData.attributes.store).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has discounts returned\", function() {",
									"    pm.expect(responseData.attributes.discounts.length).not.eql(null);",
									"});",
									"",
									"pm.test(\"Has totals returned\", function() {",
									"    pm.expect(responseData.attributes.totals.length).not.eql(null);",
									"    ",
									"    pm.expect(responseData.attributes.totals.expenseTotal).not.eql(null);",
									"    pm.expect(responseData.attributes.totals.discountTotal).not.eql(null);",
									"    pm.expect(responseData.attributes.totals.taxTotal).not.eql(null);",
									"    pm.expect(responseData.attributes.totals.subtotal).not.eql(null);",
									"    pm.expect(responseData.attributes.totals.grandTotal).not.eql(null);",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.not.be.empty;",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/carts/\" + pm.variables.get(\"cart_id\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request access token (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09587067-e655-4e6c-9698-87148832d432",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.variables.set(\"token\", responseData.attributes.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"access-tokens\",\n        \"attributes\": {\n            \"username\": \"spencor.hopkin@spryker.com\",\n            \"password\": \"change123\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request with UUID of cart another customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[0].code).to.eql(\"101\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Cart with given uuid not found.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request for getting the list of regular cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseData = pm.response.json().data[0];",
									"",
									"pm.variables.set(\"cart_id\", responseData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"carts\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).not.eql(null);",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has priceMode returned\", function() {",
									"    pm.expect(responseData.attributes.priceMode).not.eql(null);",
									"    pm.expect(responseData.attributes.priceMode).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has currency returned\", function() {",
									"    pm.expect(responseData.attributes.currency).not.eql(null);",
									"    pm.expect(responseData.attributes.currency).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has store returned\", function() {",
									"    pm.expect(responseData.attributes.store).not.eql(null);",
									"    pm.expect(responseData.attributes.store).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has discounts returned\", function() {",
									"    pm.expect(responseData.attributes.discounts.length).not.eql(null);",
									"});",
									"",
									"pm.test(\"Has totals returned\", function() {",
									"    pm.expect(responseData.attributes.totals.length).not.eql(null);",
									"    ",
									"    pm.expect(responseData.attributes.totals.expenseTotal).not.eql(null);",
									"    pm.expect(responseData.attributes.totals.discountTotal).not.eql(null);",
									"    pm.expect(responseData.attributes.totals.taxTotal).not.eql(null);",
									"    pm.expect(responseData.attributes.totals.subtotal).not.eql(null);",
									"    pm.expect(responseData.attributes.totals.grandTotal).not.eql(null);",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.not.be.empty;",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/carts/\" + pm.variables.get(\"cart_id\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new customer (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ad8c317-2a5a-46a7-afee-92b8b26b9d20",
								"exec": [
									"if ('errors' in pm.response.json() && pm.response.json().errors[0].code == 400) {",
									"    var email = pm.variables.get(\"email\");",
									"    pm.variables.set(\"email\", new Date().getTime() + '@mail.com');",
									"    postman.setNextRequest(request.name);",
									"} else {",
									"    var responseData = pm.response.json().data;",
									"",
									"    pm.variables.set(\"customer_reference\", responseData.id);",
									"    pm.variables.set(\"customer_create_at\", responseData.attributes.createdAt);",
									"    pm.variables.set(\"customer_update_at\", responseData.attributes.updatedAt);",
									"    ",
									"    pm.test(\"Status code is 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "51ba2b17-58f0-4abe-b0d8-d6e0f93ead8c",
								"exec": [
									"setTimeout(function() {}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Anonymous-Customer-Unique-Id",
								"value": "{{anonymous_customer_id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n    \"attributes\": {\n        \"salutation\": \"Mr\",\n        \"gender\": \"Male\",\n        \"firstName\":\"First Name\",\n        \"lastName\":\"test\",\n        \"email\":\"{{email}}\",\n        \"password\":\"{{password}}\",\n        \"confirmPassword\":\"{{password}}\",\n        \"acceptedTerms\":true\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request delete customer (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "392dab97-c0fa-42bf-9de4-2f3fe7136abc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request for adding an item into the regular cart (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"sku\": \"{{sku}}\",\n            \"quantity\": 1\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request with broken URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/cart/{{cart_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"cart",
								"{{cart_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Patching an item into the cart ",
			"item": [
				{
					"name": "Request for increasing qty of an item into the guest cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseData = pm.response.json().data;",
									"var includedData = pm.response.json().included;",
									"",
									"pm.variables.set(\"guest_cart_id\", responseData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"carts\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).not.eql(null);",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has product with updated quantity\", function() {",
									"    pm.expect(includedData[4].attributes.sku).to.eql(pm.variables.get(\"sku\"));",
									"    pm.expect(includedData[4].attributes.quantity).to.eql(Number(pm.variables.get(\"quantity\")));",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.not.be.empty;",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/carts/\" + pm.variables.get(\"cart_id\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"quantity\": {{quantity}}\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items/{{sku}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items",
								"{{sku}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request with POST method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"quantity\": 1\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items/{{sku}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items",
								"{{sku}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request with a large number \"1000+\" in the field qty",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(422);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[0].code).to.eql(\"102\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Item 182_30345097 only has availability of 20.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"quantity\": 999999999\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items/182_30345097",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items",
								"182_30345097"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request with invalid SKU in URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"quantity\": 3\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items/{{sku}}/228_228",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items",
								"{{sku}}",
								"228_228"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request for adding an item into the regular cart (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"sku\": \"182_30345097\",\n            \"quantity\": 1\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request for decreasing qty of an item into the cart ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseData = pm.response.json().data;",
									"var includedData = pm.response.json().included;",
									"",
									"pm.variables.set(\"guest_cart_id\", responseData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"carts\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).not.eql(null);",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has product with updated quantity\", function() {",
									"    pm.expect(includedData[4].attributes.sku).to.eql(pm.variables.get(\"sku\"));",
									"    pm.expect(includedData[4].attributes.quantity).to.eql(1);",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.not.be.empty;",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/carts/\" + pm.variables.get(\"cart_id\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"quantity\": 1\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items/{{sku}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items",
								"{{sku}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request with DELETE method Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[0].code).to.eql(\"103\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Item with the given group key not found in the cart.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"quantity\": 1\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items/{{sku}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items",
								"{{sku}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new customer (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ad8c317-2a5a-46a7-afee-92b8b26b9d20",
								"exec": [
									"if ('errors' in pm.response.json() && pm.response.json().errors[0].code == 400) {",
									"    var email = pm.variables.get(\"email\");",
									"    pm.variables.set(\"email\", new Date().getTime() + '@mail.com');",
									"    postman.setNextRequest(request.name);",
									"} else {",
									"    var responseData = pm.response.json().data;",
									"",
									"    pm.variables.set(\"customer_reference\", responseData.id);",
									"    pm.variables.set(\"customer_create_at\", responseData.attributes.createdAt);",
									"    pm.variables.set(\"customer_update_at\", responseData.attributes.updatedAt);",
									"    ",
									"    pm.test(\"Status code is 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "51ba2b17-58f0-4abe-b0d8-d6e0f93ead8c",
								"exec": [
									"setTimeout(function() {}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Anonymous-Customer-Unique-Id",
								"value": "{{anonymous_customer_id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n    \"attributes\": {\n        \"salutation\": \"Mr\",\n        \"gender\": \"Male\",\n        \"firstName\":\"First Name\",\n        \"lastName\":\"test\",\n        \"email\":\"{{email}}\",\n        \"password\":\"{{password}}\",\n        \"confirmPassword\":\"{{password}}\",\n        \"acceptedTerms\":true\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request delete customer (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "392dab97-c0fa-42bf-9de4-2f3fe7136abc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request with GET method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items/{{sku}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items",
								"{{sku}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request without qty field in the body",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[0].code).to.eql(\"901\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"[quantity] => This field is missing.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items/{{sku}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items",
								"{{sku}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send the request without sku in URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[0].code).to.eql(\"108\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Cart uuid or item group key is not specified.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"quantity\": 3\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request for adding an item into the regular cart (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"sku\": \"{{sku}}\",\n            \"quantity\": 1\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request for updating an item quantity with qty=0 in the body",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseData = pm.response.json().data;",
									"var includedData = pm.response.json().included;",
									"",
									"pm.variables.set(\"guest_cart_id\", responseData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"carts\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).not.eql(null);",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.not.be.empty;",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/carts/\" + pm.variables.get(\"cart_id\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"quantity\": 0\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items/{{sku}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items",
								"{{sku}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request access token (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09587067-e655-4e6c-9698-87148832d432",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.variables.set(\"token\", responseData.attributes.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"access-tokens\",\n        \"attributes\": {\n            \"username\": \"{{email}}\",\n            \"password\": \"{{password}}\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request for getting the list of cart (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseData = pm.response.json().data[0];",
									"",
									"pm.variables.set(\"cart_id\", responseData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Patching a cart by uuid",
			"item": [
				{
					"name": "Create new customer (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ad8c317-2a5a-46a7-afee-92b8b26b9d20",
								"exec": [
									"if ('errors' in pm.response.json() && pm.response.json().errors[0].code == 400) {",
									"    var email = pm.variables.get(\"username\");",
									"    pm.variables.set(\"username\", new Date().getTime() + '@mail.com');",
									"    postman.setNextRequest(request.name);",
									"} else {",
									"    var responseData = pm.response.json().data;",
									"",
									"    pm.variables.set(\"customer_reference\", responseData.id);",
									"    pm.variables.set(\"customer_create_at\", responseData.attributes.createdAt);",
									"    pm.variables.set(\"customer_update_at\", responseData.attributes.updatedAt);",
									"    ",
									"    pm.test(\"Status code is 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"    ",
									"    pm.test(\"Has correct type and id returned\", function () {",
									"        pm.expect(responseData.type).to.eql(\"customers\");",
									"        pm.expect(responseData.id).to.eql(pm.variables.get(\"customer_reference\"));",
									"    });",
									"    ",
									"    pm.test(\"Create_at returned\", function (){",
									"        // need to add the assert to check the null in the field ",
									"        pm.expect(responseData.attributes.createdAt).to.eql(pm.variables.get(\"customer_create_at\"));",
									"    });",
									"    ",
									"    pm.test(\"Create_at returned\", function (){",
									"        // need to add the assert to check the null in the field ",
									"        pm.expect(responseData.attributes.updatedAt).to.eql(pm.variables.get(\"customer_update_at\"));",
									"    });",
									"    ",
									"    pm.test(\"Has self link\", function() {",
									"        pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\"));",
									"    });",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "51ba2b17-58f0-4abe-b0d8-d6e0f93ead8c",
								"exec": [
									"setTimeout(function() {}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Anonymous-Customer-Unique-Id",
								"value": "{{anonymous_customer_id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"customers\",\n    \"attributes\": {\n        \"salutation\": \"Mr\",\n        \"gender\": \"Male\",\n        \"firstName\":\"First Name\",\n        \"lastName\":\"test\",\n        \"email\":\"{{username}}\",\n        \"password\":\"{{password}}\",\n        \"confirmPassword\":\"{{password}}\",\n        \"acceptedTerms\":true\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request access token (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09587067-e655-4e6c-9698-87148832d432",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.variables.set(\"token\", responseData.attributes.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"access-tokens\",\n        \"attributes\": {\n            \"username\": \"{{username}}\",\n            \"password\": \"{{password}}\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request for creating a regular cart Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"carts\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).not.eql(null);",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has priceMode returned\", function() {",
									"    pm.expect(responseData.attributes.priceMode).to.eql(pm.variables.get(\"price_mode\"));",
									"});",
									"",
									"pm.test(\"Has currency returned\", function() {",
									"    pm.expect(responseData.attributes.currency).to.eql(pm.variables.get(\"currency\"));",
									"});",
									"",
									"pm.test(\"Has store returned\", function() {",
									"    pm.expect(responseData.attributes.store).to.eql(pm.variables.get(\"store\"));",
									"});",
									"",
									"pm.test(\"Has discounts returned\", function() {",
									"    pm.expect(responseData.attributes.discounts.length).not.eql(null);",
									"});",
									"",
									"pm.test(\"Has totals returned\", function() {",
									"    pm.expect(responseData.attributes.totals.length).not.eql(null);",
									"});",
									"",
									"pm.test.skip(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.not.be.empty;",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/carts/\" + pm.variables.get(\"cart_id\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"carts\",\n        \"attributes\": {\n        \t\"name\": \"{{name}}\",\n            \"priceMode\": \"{{price_mode}}\",\n            \"currency\": \"{{currency}}\",\n            \"store\": \"{{store}}\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request for getting the list of cart (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseData = pm.response.json().data[0];",
									"",
									"pm.variables.set(\"cart_id\", responseData.id);",
									"pm.variables.set(\"cart_name\", responseData.attributes.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request for update price mode of empty cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.variables.set(\"cart_id\", responseData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"carts\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).not.eql(null);",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has updated priceMode\", function() {",
									"    pm.expect(responseData.attributes.priceMode).to.eql(\"NET\");",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.not.be.empty;",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/carts/\" + pm.variables.get(\"cart_id\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"carts\",\n        \"attributes\": {\n            \"priceMode\": \"NET\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request for update currency of empty cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.variables.set(\"cart_id\", responseData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"carts\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).not.eql(null);",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has updated currency\", function() {",
									"    pm.expect(responseData.attributes.currency).to.eql(\"EUR\");",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.not.be.empty;",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/carts/\" + pm.variables.get(\"cart_id\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"carts\",\n        \"attributes\": {\n            \"currency\": \"EUR\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Request for updating a regular cart with the same name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.variables.set(\"cart_id\", responseData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"carts\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).not.eql(null);",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has updated name\", function() {",
									"    pm.expect(responseData.attributes.name).to.eql(pm.variables.get(\"cart_name\"));",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.not.be.empty;",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/carts/\" + pm.variables.get(\"cart_id\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"carts\",\n        \"attributes\": {\n            \"name\": \"{{cart_name}}\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Request for updating a regular cart without priceMode field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.variables.set(\"cart_id\", responseData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"carts\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).not.eql(null);",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has priceMode not changed\", function() {",
									"    pm.expect(responseData.attributes.priceMode).to.eql(pm.variables.get(\"price_mode\"));",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.not.be.empty;",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/carts/\" + pm.variables.get(\"cart_id\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"carts\",\n        \"attributes\": {\n            \"name\": \"{{name}}\",\n            \"currency\": \"{{currency}}\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Request for updating a regular cart without currency field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.variables.set(\"cart_id\", responseData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"carts\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).not.eql(null);",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has currency not changed\", function() {",
									"    pm.expect(responseData.attributes.currency).to.eql(pm.variables.get(\"currency\"));",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.not.be.empty;",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/carts/\" + pm.variables.get(\"cart_id\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"carts\",\n        \"attributes\": {\n            \"name\": \"{{name}}\",\n            \"priceMode\": \"NET\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Request for updating a regular cart without name field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseData = pm.response.json().data;",
									"",
									"pm.variables.set(\"cart_id\", responseData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type\", function() {",
									"    pm.expect(responseData.type).to.eql(\"carts\");",
									"});",
									"",
									"pm.test(\"Has id returned\", function() {",
									"    pm.expect(responseData.id).not.eql(null);",
									"    pm.expect(responseData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has name not changed\", function() {",
									"    pm.expect(responseData.attributes.name).to.eql(pm.variables.get(\"name\"));",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(responseData.links.self).to.not.be.empty;",
									"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/carts/\" + pm.variables.get(\"cart_id\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"carts\",\n        \"attributes\": {\n            \"currency\": \"{{currency}}\",\n            \"priceMode\": \"NET\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Request for updating a regular cart without type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Invalid type.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Anonymous-Customer-Unique-Id",
								"type": "text",
								"value": "{{anonymous_customer_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"\",\n        \"attributes\": {\n            \"priceMode\": \"{{price_mode}}\",\n            \"currency\": \"{{currency}}\",\n            \"store\": \"{{store}}\",\n            \"name\": \"{{name}}\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Request for updating a regular cart with invalid type value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Invalid type.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"cartssss\",\n        \"attributes\": {\n            \"name\": \"{{name}}\",\n            \"priceMode\": \"{{priceMode}}\",\n            \"currency\": \"{{currency}}\",\n            \"store\": \"{{store}}\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Request for updating a regular cart with invalid url",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"carts\",\n        \"attributes\": {\n            \"name\": \"{{name}}\",\n            \"priceMode\": \"{{priceMode}}\",\n            \"currency\": \"{{currency}}\",\n            \"store\": \"{{store}}\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/cartsss/{{cart_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"cartsss",
								"{{cart_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Request for updating a regular cart with empty name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(422);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[0].code).to.eql(\"901\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"name => This value should not be blank.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"carts\",\n        \"attributes\": {\n            \"name\": \"\",\n            \"priceMode\": \"{{priceMode}}\",\n            \"currency\": \"{{currency}}\",\n            \"store\": \"{{store}}\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Request for updating a regular cart with name field length 31",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(422);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[0].code).to.eql(\"901\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"name => This value is too long. It should have 30 characters or less.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"carts\",\n        \"attributes\": {\n            \"name\": \"test name of cart with length31\",\n            \"priceMode\": \"{{priceMode}}\",\n            \"currency\": \"{{currency}}\",\n            \"store\": \"{{store}}\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Request for updating a regular cart with an empty body",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Post data is invalid.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request for adding an item into the regular cart (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"sku\": \"{{sku}}\",\n            \"quantity\": 1\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}/items",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Request for update price mode of not empty cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05370552-f35d-44b3-a690-1496fc7d0ad8",
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Correct error status\", function() {",
									"    pm.expect(responseJson.errors[0].status).to.eql(422);",
									"});",
									"",
									"pm.test(\"Correct error code\", function() {",
									"    pm.expect(responseJson.errors[0].code).to.eql(\"111\");",
									"});",
									"",
									"pm.test(\"Correct error message\", function() {",
									"    pm.expect(responseJson.errors[0].detail).to.eql(\"Can’t switch price mode when there are items in the cart.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"carts\",\n        \"attributes\": {\n            \"priceMode\": \"NET\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request delete customer (helper)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "392dab97-c0fa-42bf-9de4-2f3fe7136abc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "9bd085e2-5ab8-43bf-8ad6-d8c8ea86b785",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "46ab0efe-3f6a-478a-9ff5-b3c954a1019f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "34c0748a-c014-4f93-8492-65448c07f497",
			"key": "cart_id",
			"value": "string",
			"type": "string"
		},
		{
			"id": "7cdb85a2-49d1-4b6c-bf6b-eaeee03de696",
			"key": "username",
			"value": "test.customer@spryker.com",
			"type": "string"
		},
		{
			"id": "28ed786a-1105-47a1-904a-a0a0b5132f79",
			"key": "password",
			"value": "change123",
			"type": "string"
		},
		{
			"id": "2ceacb42-4c14-4be0-98e0-260976e4514e",
			"key": "customer_reference",
			"value": "string",
			"type": "string"
		},
		{
			"id": "ec49c5a4-05fd-4391-85cd-140044485bb2",
			"key": "token",
			"value": "string",
			"type": "string"
		},
		{
			"id": "c7509f54-6d3f-49f8-a3bc-ab0a611f440a",
			"key": "price_mode",
			"value": "GROSS_MODE",
			"type": "string"
		},
		{
			"id": "aac3be63-ef0a-4d3c-875c-ddbff3b9e7ab",
			"key": "currency",
			"value": "EUR",
			"type": "string"
		},
		{
			"id": "51df0667-ab35-434d-b040-fc00d7025fd2",
			"key": "store",
			"value": "DE",
			"type": "string"
		},
		{
			"id": "4b279f94-d5db-442f-abbd-85182cfb95b3",
			"key": "quantity",
			"value": "3",
			"type": "string"
		},
		{
			"id": "9bfe3843-a373-485e-9890-cb7857101aad",
			"key": "wrong_cart_id",
			"value": "585e0d30-edab-53f0-bc3f-da8d5d33202f",
			"type": "string"
		},
		{
			"id": "ee665afe-cd91-4db8-accf-f5bfb9193692",
			"key": "name",
			"value": "Cart",
			"type": "string"
		},
		{
			"id": "11c3c521-5050-4273-a4df-cfe8c375325e",
			"key": "long_name",
			"value": "name123412341234123412341234123",
			"type": "string"
		},
		{
			"id": "5a51fc3b-ed4a-4135-b875-2e0f81b3587a",
			"key": "sku",
			"value": "001_25904006",
			"type": "string"
		},
		{
			"id": "35e46b14-533a-4f44-b3fc-5ca26d8b6f2c",
			"key": "cart_name",
			"value": "string",
			"type": "string"
		}
	]
}