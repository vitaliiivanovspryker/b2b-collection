{
	"info": {
		"_postman_id": "332c0507-0bcd-444c-8cb4-aedf08482b35",
		"name": "products-rest-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "Request the abstract product",
					"item": [
						{
							"name": "Request abstract product by abstract sku - product available",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c75c0ee2-b7df-45da-86b4-788faaf3a54e",
										"exec": [
											"let jsonData = pm.response.json(),",
											"    entityData = jsonData.data,",
											"    included = jsonData.included,",
											"    abstractSku = pm.variables.get(\"abstract_sku_with_1product\"),",
											"    abstractSkuTaxSetUuid = pm.variables.get(\"abstract_sku_with_1product_tax_set_uuid\"),",
											"    selfLink = pm.variables.get(\"url\") + \"/abstract-products/\" + abstractSku;",
											"",
											"const resourceName = \"abstract-products\";",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(entityData.type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(entityData.id).to.eql(abstractSku);",
											"});",
											"",
											"pm.test(\"Has abstract description returned\", function() {",
											"    pm.expect(entityData.attributes.sku).to.eql(abstractSku);",
											"    pm.expect(entityData.attributes.name).to.be.eql(\"Toshiba CAMILEO S20\");",
											"    pm.expect(entityData.attributes.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has attribute variants returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).have.property('attribute_variants');",
											"});",
											"",
											"pm.test(\"Has super attributes returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).to.have.property('super_attributes');",
											"});",
											"",
											"pm.test(\"Has product concrete ids returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).to.have.property('product_concrete_ids');",
											"    pm.expect(entityData.attributes.attributeMap.product_concrete_ids).to.contain(\"209_12554247\");",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(entityData.links.self).to.eql(selfLink);",
											"});",
											"",
											"pm.test(\"Has relationships concrete-products returned\", function() {",
											"    pm.expect(entityData.relationships[\"concrete-products\"].data[0].type).to.eql(\"concrete-products\");",
											"    pm.expect(entityData.relationships[\"concrete-products\"].data[0].id).to.eql(\"209_12554247\");",
											"});",
											"",
											"pm.test(\"Has relationships abstract-product-image-sets returned\", function() {",
											"    pm.expect(entityData.relationships[\"abstract-product-image-sets\"].data[0].type).to.eql(\"abstract-product-image-sets\");",
											"    pm.expect(entityData.relationships[\"abstract-product-image-sets\"].data[0].id).to.eql(abstractSku);",
											"});",
											"",
											"pm.test(\"Has relationships abstract-product-availabilities returned\", function() {",
											"    pm.expect(entityData.relationships[\"abstract-product-availabilities\"].data[0].type).to.eql(\"abstract-product-availabilities\");",
											"    pm.expect(entityData.relationships[\"abstract-product-availabilities\"].data[0].id).to.eql(abstractSku);",
											"});",
											"",
											"pm.test(\"Has relationships tax-sets returned\", function() {",
											"    pm.expect(entityData.relationships[\"product-tax-sets\"].data[0].type).to.eql(\"product-tax-sets\");",
											"    pm.expect(entityData.relationships[\"product-tax-sets\"].data[0].id).to.eql(abstractSkuTaxSetUuid);",
											"});",
											"",
											"pm.test(\"Has relationships abstract-product-prices returned\", function() {",
											"    pm.expect(entityData.relationships[\"abstract-product-prices\"].data[0].type).to.eql(\"abstract-product-prices\");",
											"    pm.expect(entityData.relationships[\"abstract-product-prices\"].data[0].id).to.eql(abstractSku);",
											"});",
											"",
											"pm.test(\"Has included section\", function() {",
											"    let expectedIncludedTypes = [",
											"            \"concrete-product-image-sets\",",
											"            \"concrete-product-availabilities\",",
											"            \"concrete-product-prices\",",
											"            \"concrete-products\",",
											"            \"abstract-product-image-sets\",",
											"            \"abstract-product-availabilities\",",
											"            \"product-tax-sets\"",
											"        ],",
											"        includedTypes = _.pluck(included, \"type\");",
											"",
											"    pm.expect(includedTypes).to.include.members(expectedIncludedTypes);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request abstract product with not existing abstract sku - product doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c75c0ee2-b7df-45da-86b4-788faaf3a54e",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Has correct error message returned\", function() {",
											"    let jsonData = pm.response.json(),",
											"        error = _.first(jsonData.errors);",
											"",
											"    pm.expect(error.detail).to.be.eql(\"Abstract product is not found.\");",
											"    pm.expect(error.code).to.be.eql(\"301\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/not_existing_sku",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"not_existing_sku"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request abstract product with concrete sku",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c75c0ee2-b7df-45da-86b4-788faaf3a54e",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Has correct error message returned\", function() {",
											"    let jsonData = pm.response.json(),",
											"        error = _.first(jsonData.errors);",
											"",
											"    pm.expect(error.detail).to.be.eql(\"Abstract product is not found.\");",
											"    pm.expect(error.code).to.be.eql(\"301\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{concrete_sku}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{concrete_sku}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request abstract product with one concrete deactivated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c75c0ee2-b7df-45da-86b4-788faaf3a54e",
										"exec": [
											"let jsonData = pm.response.json(),",
											"    entityData = jsonData.data,",
											"    included = jsonData.included,",
											"    abstractSku = pm.variables.get(\"abstractSKU2\"),",
											"    concreteSku3 = pm.variables.get(\"concreteSKU3\"),",
											"    concreteSku4 = pm.variables.get(\"concreteSKU4\"),",
											"    abstractSkuTaxSetUuid = '831f167f-a3ee-505b-9496-e560875506d5',",
											"    selfLink = pm.variables.get(\"url\") + \"/abstract-products/\" + abstractSku;",
											"",
											"const resourceName = \"abstract-products\";",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(entityData.type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(entityData.id).to.eql(abstractSku);",
											"});",
											"",
											"pm.test(\"Has abstract description returned\", function() {",
											"    pm.expect(entityData.attributes.sku).to.eql(abstractSku);",
											"    pm.expect(entityData.attributes.name).to.be.eql(\"Printer ink refill 1.5L , one deactivated concrete (other concretes are active)\");",
											"    pm.expect(entityData.attributes.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has attribute variants returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).have.property('attribute_variants');",
											"});",
											"",
											"pm.test(\"Has super attributes returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).to.have.property('super_attributes');",
											"});",
											"",
											"pm.test(\"Has product concrete ids returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).to.have.property('product_concrete_ids');",
											"    pm.expect(entityData.attributes.attributeMap.product_concrete_ids).to.contain(concreteSku3);",
											"});",
											"",
											"pm.test(\"Has no deactivated product concrete ids returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).to.have.property('product_concrete_ids');",
											"    pm.expect(entityData.attributes.attributeMap.product_concrete_ids).to.not.contain(concreteSku4);",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(entityData.links.self).to.eql(selfLink);",
											"});",
											"",
											"pm.test(\"Has relationships concrete-products returned\", function() {",
											"    pm.expect(entityData.relationships[\"concrete-products\"].data[0].type).to.eql(\"concrete-products\");",
											"    pm.expect(entityData.relationships[\"concrete-products\"].data[0].id).to.eql(concreteSku3);",
											"});",
											"",
											"pm.test(\"Has no deactivated relationships concrete-products returned\", function() {",
											"",
											"    let deactivatedProductConcrete = _.find(entityData.relationships[\"concrete-products\"].data, {",
											"        \"id\": concreteSku4",
											"    });",
											"",
											"    pm.expect(deactivatedProductConcrete).to.be.eql();",
											"});",
											"",
											"pm.test(\"Has relationships abstract-product-image-sets returned\", function() {",
											"    pm.expect(entityData.relationships[\"abstract-product-image-sets\"].data[0].type).to.eql(\"abstract-product-image-sets\");",
											"    pm.expect(entityData.relationships[\"abstract-product-image-sets\"].data[0].id).to.eql(abstractSku);",
											"});",
											"",
											"pm.test(\"Has relationships tax-sets returned\", function() {",
											"    pm.expect(entityData.relationships[\"product-tax-sets\"].data[0].type).to.eql(\"product-tax-sets\");",
											"    pm.expect(entityData.relationships[\"product-tax-sets\"].data[0].id).to.eql(abstractSkuTaxSetUuid);",
											"});",
											"",
											"pm.test(\"Has relationships abstract-product-prices returned\", function() {",
											"    pm.expect(entityData.relationships[\"abstract-product-prices\"].data[0].type).to.eql(\"abstract-product-prices\");",
											"    pm.expect(entityData.relationships[\"abstract-product-prices\"].data[0].id).to.eql(abstractSku);",
											"});",
											"",
											"pm.test(\"Has included section\", function() {",
											"    let expectedIncludedTypes = [",
											"            \"concrete-product-image-sets\",",
											"            \"concrete-product-prices\",",
											"            \"concrete-products\",",
											"            \"abstract-product-image-sets\",",
											"            \"abstract-product-prices\",",
											"            \"category-nodes\",",
											"            \"product-tax-sets\",",
											"        ],",
											"        includedTypes = _.pluck(included, \"type\");",
											"",
											"    console.log(includedTypes);",
											"",
											"    pm.expect(includedTypes).to.include.members(expectedIncludedTypes);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstractSKU2}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstractSKU2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request abstract product with all concretes deactivated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c75c0ee2-b7df-45da-86b4-788faaf3a54e",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Has correct error message returned\", function() {",
											"    let jsonData = pm.response.json(),",
											"        error = _.first(jsonData.errors);",
											"",
											"    pm.expect(error.detail).to.be.eql(\"Abstract product is not found.\");",
											"    pm.expect(error.code).to.be.eql(\"301\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstractSKU3}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstractSKU3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request abstract product with empty search criteria",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c75c0ee2-b7df-45da-86b4-788faaf3a54e",
										"exec": [
											"pm.test(\"Status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Has correct error message returned\", function() {",
											"    let jsonData = pm.response.json(),",
											"        error = _.first(jsonData.errors);",
											"",
											"    pm.expect(error.detail).to.be.eql(\"Abstract product sku is not specified.\");",
											"    pm.expect(error.code).to.be.eql(\"311\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request abstract product wrong query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c75c0ee2-b7df-45da-86b4-788faaf3a54e",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Has correct error message returned\", function() {",
											"    let jsonData = pm.response.json(),",
											"        error = _.first(jsonData.errors);",
											"",
											"    pm.expect(error.detail).to.be.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstractproducts/{{abstract_sku_with_1product}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstractproducts",
										"{{abstract_sku_with_1product}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request abstract using wrong method POST",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a5611894-5e77-44cc-8b30-efcebac60627",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{\"type\":\"register-customer\",\"attributes\":{\"salutation\":\"{{salutation}}\",\"firstName\":\"{{firstName}}\",\"lastName\":\"{{lastName}}\",\"email\":\"{{email}}\",\"password\":\"{{password}}\",\"passwordConfirmation\":\"{{password}}\",\"acceptedTerms\":true}}}"
								},
								"url": {
									"raw": "{{url}}/products-abstract/{{abstract_sku_with_1product}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"products-abstract",
										"{{abstract_sku_with_1product}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request abstract using wrong method PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a5611894-5e77-44cc-8b30-efcebac60627",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{ \"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/products-abstract/{{abstract_sku_with_1product}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"products-abstract",
										"{{abstract_sku_with_1product}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request abstract using wrong method DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79996552-0298-4493-8798-860dfb475c57",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/products-abstract/{{abstract_sku_with_1product}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"products-abstract",
										"{{abstract_sku_with_1product}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract product and include \"concrete-product-image-sets\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c75c0ee2-b7df-45da-86b4-788faaf3a54e",
										"exec": [
											"let jsonData = pm.response.json(),",
											"    entityData = jsonData.data,",
											"    included = jsonData.included,",
											"    abstractSku = pm.variables.get(\"abstract_sku_with_1product\"),",
											"    abstractSkuTaxSetUuid = pm.variables.get(\"abstract_sku_with_1product_tax_set_uuid\"),",
											"    selfLink = pm.variables.get(\"url\") + \"/abstract-products/\" + abstractSku;",
											"",
											"const resourceName = \"abstract-products\";",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(entityData.type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(entityData.id).to.eql(abstractSku);",
											"});",
											"",
											"pm.test(\"Has abstract description returned\", function() {",
											"    pm.expect(entityData.attributes.sku).to.eql(abstractSku);",
											"    pm.expect(entityData.attributes.name).to.be.eql(\"Toshiba CAMILEO S20\");",
											"    pm.expect(entityData.attributes.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has attribute variants returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).have.property('attribute_variants');",
											"});",
											"",
											"pm.test(\"Has super attributes returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).to.have.property('super_attributes');",
											"});",
											"",
											"pm.test(\"Has product concrete ids returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).to.have.property('product_concrete_ids');",
											"    pm.expect(entityData.attributes.attributeMap.product_concrete_ids).to.contain(\"209_12554247\");",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(entityData.links.self).to.eql(selfLink);",
											"});",
											"",
											"pm.test(\"Has relationships concrete-products returned\", function() {",
											"    pm.expect(entityData.relationships[\"concrete-products\"].data[0].type).to.eql(\"concrete-products\");",
											"    pm.expect(entityData.relationships[\"concrete-products\"].data[0].id).to.eql(\"209_12554247\");",
											"});",
											"",
											"pm.test(\"Has included section 'concrete-product-image-sets'\", function() {",
											"    let expectedIncludedTypes = [\"concrete-product-image-sets\"],",
											"        includedTypes = _.uniq(_.pluck(included, \"type\"));",
											"",
											"    pm.expect(includedTypes).to.have.members(expectedIncludedTypes);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}?include=concrete-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}"
									],
									"query": [
										{
											"key": "include",
											"value": "concrete-product-image-sets"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract product and include \"concrete-product-availabilities\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c75c0ee2-b7df-45da-86b4-788faaf3a54e",
										"exec": [
											"let jsonData = pm.response.json(),",
											"    entityData = jsonData.data,",
											"    included = jsonData.included,",
											"    abstractSku = pm.variables.get(\"abstract_sku_with_1product\"),",
											"    abstractSkuTaxSetUuid = pm.variables.get(\"abstract_sku_with_1product_tax_set_uuid\"),",
											"    selfLink = pm.variables.get(\"url\") + \"/abstract-products/\" + abstractSku;",
											"",
											"const resourceName = \"abstract-products\";",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(entityData.type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(entityData.id).to.eql(abstractSku);",
											"});",
											"",
											"pm.test(\"Has abstract description returned\", function() {",
											"    pm.expect(entityData.attributes.sku).to.eql(abstractSku);",
											"    pm.expect(entityData.attributes.name).to.be.eql(\"Toshiba CAMILEO S20\");",
											"    pm.expect(entityData.attributes.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has attribute variants returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).have.property('attribute_variants');",
											"});",
											"",
											"pm.test(\"Has super attributes returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).to.have.property('super_attributes');",
											"});",
											"",
											"pm.test(\"Has product concrete ids returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).to.have.property('product_concrete_ids');",
											"    pm.expect(entityData.attributes.attributeMap.product_concrete_ids).to.contain(\"209_12554247\");",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(entityData.links.self).to.eql(selfLink);",
											"});",
											"",
											"pm.test(\"Has relationships concrete-products returned\", function() {",
											"    pm.expect(entityData.relationships[\"concrete-products\"].data[0].type).to.eql(\"concrete-products\");",
											"    pm.expect(entityData.relationships[\"concrete-products\"].data[0].id).to.eql(\"209_12554247\");",
											"});",
											"",
											"pm.test(\"Has included section 'concrete-product-availabilities'\", function() {",
											"    let expectedIncludedTypes = [\"concrete-product-availabilities\"],",
											"        includedTypes = _.uniq(_.pluck(included, \"type\"));",
											"",
											"    pm.expect(includedTypes).to.have.members(expectedIncludedTypes);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}?include=concrete-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}"
									],
									"query": [
										{
											"key": "include",
											"value": "concrete-product-availabilities"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract product and include \"concrete-product-prices\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c75c0ee2-b7df-45da-86b4-788faaf3a54e",
										"exec": [
											"let jsonData = pm.response.json(),",
											"    entityData = jsonData.data,",
											"    included = jsonData.included,",
											"    abstractSku = pm.variables.get(\"abstract_sku_with_1product\"),",
											"    abstractSkuTaxSetUuid = pm.variables.get(\"abstract_sku_with_1product_tax_set_uuid\"),",
											"    selfLink = pm.variables.get(\"url\") + \"/abstract-products/\" + abstractSku;",
											"",
											"const resourceName = \"abstract-products\";",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(entityData.type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(entityData.id).to.eql(abstractSku);",
											"});",
											"",
											"pm.test(\"Has abstract description returned\", function() {",
											"    pm.expect(entityData.attributes.sku).to.eql(abstractSku);",
											"    pm.expect(entityData.attributes.name).to.be.eql(\"Toshiba CAMILEO S20\");",
											"    pm.expect(entityData.attributes.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has attribute variants returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).have.property('attribute_variants');",
											"});",
											"",
											"pm.test(\"Has super attributes returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).to.have.property('super_attributes');",
											"});",
											"",
											"pm.test(\"Has product concrete ids returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).to.have.property('product_concrete_ids');",
											"    pm.expect(entityData.attributes.attributeMap.product_concrete_ids).to.contain(\"209_12554247\");",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(entityData.links.self).to.eql(selfLink);",
											"});",
											"",
											"pm.test(\"Has relationships concrete-products returned\", function() {",
											"    pm.expect(entityData.relationships[\"concrete-products\"].data[0].type).to.eql(\"concrete-products\");",
											"    pm.expect(entityData.relationships[\"concrete-products\"].data[0].id).to.eql(\"209_12554247\");",
											"});",
											"",
											"pm.test(\"Has included section 'concrete-product-prices'\", function() {",
											"    let expectedIncludedTypes = [\"concrete-product-prices\"],",
											"        includedTypes = _.uniq(_.pluck(included, \"type\"));",
											"",
											"    pm.expect(includedTypes).to.have.members(expectedIncludedTypes);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}?include=concrete-product-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}"
									],
									"query": [
										{
											"key": "include",
											"value": "concrete-product-prices"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract product and include  \"concrete-products\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c75c0ee2-b7df-45da-86b4-788faaf3a54e",
										"exec": [
											"let jsonData = pm.response.json(),",
											"    entityData = jsonData.data,",
											"    included = jsonData.included,",
											"    abstractSku = pm.variables.get(\"abstract_sku_with_1product\"),",
											"    abstractSkuTaxSetUuid = pm.variables.get(\"abstract_sku_with_1product_tax_set_uuid\"),",
											"    selfLink = pm.variables.get(\"url\") + \"/abstract-products/\" + abstractSku;",
											"",
											"const resourceName = \"abstract-products\";",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(entityData.type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(entityData.id).to.eql(abstractSku);",
											"});",
											"",
											"pm.test(\"Has abstract description returned\", function() {",
											"    pm.expect(entityData.attributes.sku).to.eql(abstractSku);",
											"    pm.expect(entityData.attributes.name).to.be.eql(\"Toshiba CAMILEO S20\");",
											"    pm.expect(entityData.attributes.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has attribute variants returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).have.property('attribute_variants');",
											"});",
											"",
											"pm.test(\"Has super attributes returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).to.have.property('super_attributes');",
											"});",
											"",
											"pm.test(\"Has product concrete ids returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).to.have.property('product_concrete_ids');",
											"    pm.expect(entityData.attributes.attributeMap.product_concrete_ids).to.contain(\"209_12554247\");",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(entityData.links.self).to.eql(selfLink);",
											"});",
											"",
											"pm.test(\"Has relationships concrete-products returned\", function() {",
											"    pm.expect(entityData.relationships[\"concrete-products\"].data[0].type).to.eql(\"concrete-products\");",
											"    pm.expect(entityData.relationships[\"concrete-products\"].data[0].id).to.eql(\"209_12554247\");",
											"});",
											"",
											"pm.test(\"Has included section 'concrete-products'\", function() {",
											"    let expectedIncludedTypes = [\"concrete-products\"],",
											"        includedTypes = _.uniq(_.pluck(included, \"type\"));",
											"",
											"    pm.expect(includedTypes).to.have.members(expectedIncludedTypes);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}?include=concrete-products",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}"
									],
									"query": [
										{
											"key": "include",
											"value": "concrete-products"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract product and include \"abstract-product-image-sets\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c75c0ee2-b7df-45da-86b4-788faaf3a54e",
										"exec": [
											"let jsonData = pm.response.json(),",
											"    entityData = jsonData.data,",
											"    included = jsonData.included,",
											"    abstractSku = pm.variables.get(\"abstract_sku_with_1product\"),",
											"    abstractSkuTaxSetUuid = pm.variables.get(\"abstract_sku_with_1product_tax_set_uuid\"),",
											"    selfLink = pm.variables.get(\"url\") + \"/abstract-products/\" + abstractSku;",
											"",
											"const resourceName = \"abstract-products\";",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(entityData.type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(entityData.id).to.eql(abstractSku);",
											"});",
											"",
											"pm.test(\"Has abstract description returned\", function() {",
											"    pm.expect(entityData.attributes.sku).to.eql(abstractSku);",
											"    pm.expect(entityData.attributes.name).to.be.eql(\"Toshiba CAMILEO S20\");",
											"    pm.expect(entityData.attributes.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has attribute variants returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).have.property('attribute_variants');",
											"});",
											"",
											"pm.test(\"Has super attributes returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).to.have.property('super_attributes');",
											"});",
											"",
											"pm.test(\"Has product concrete ids returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).to.have.property('product_concrete_ids');",
											"    pm.expect(entityData.attributes.attributeMap.product_concrete_ids).to.contain(\"209_12554247\");",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(entityData.links.self).to.eql(selfLink);",
											"});",
											"",
											"pm.test(\"Has relationships concrete-products returned\", function() {",
											"    pm.expect(entityData.relationships[\"concrete-products\"].data[0].type).to.eql(\"concrete-products\");",
											"    pm.expect(entityData.relationships[\"concrete-products\"].data[0].id).to.eql(\"209_12554247\");",
											"});",
											"",
											"pm.test(\"Has included section 'abstract-product-image-sets'\", function() {",
											"    let expectedIncludedTypes = [\"abstract-product-image-sets\"],",
											"        includedTypes = _.uniq(_.pluck(included, \"type\"));",
											"",
											"    pm.expect(includedTypes).to.have.members(expectedIncludedTypes);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}?include=abstract-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}"
									],
									"query": [
										{
											"key": "include",
											"value": "abstract-product-image-sets"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract product and include \"abstract-product-availabilities\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c75c0ee2-b7df-45da-86b4-788faaf3a54e",
										"exec": [
											"let jsonData = pm.response.json(),",
											"    entityData = jsonData.data,",
											"    included = jsonData.included,",
											"    abstractSku = pm.variables.get(\"abstract_sku_with_1product\"),",
											"    abstractSkuTaxSetUuid = pm.variables.get(\"abstract_sku_with_1product_tax_set_uuid\"),",
											"    selfLink = pm.variables.get(\"url\") + \"/abstract-products/\" + abstractSku;",
											"",
											"const resourceName = \"abstract-products\";",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(entityData.type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(entityData.id).to.eql(abstractSku);",
											"});",
											"",
											"pm.test(\"Has abstract description returned\", function() {",
											"    pm.expect(entityData.attributes.sku).to.eql(abstractSku);",
											"    pm.expect(entityData.attributes.name).to.be.eql(\"Toshiba CAMILEO S20\");",
											"    pm.expect(entityData.attributes.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has attribute variants returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).have.property('attribute_variants');",
											"});",
											"",
											"pm.test(\"Has super attributes returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).to.have.property('super_attributes');",
											"});",
											"",
											"pm.test(\"Has product concrete ids returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).to.have.property('product_concrete_ids');",
											"    pm.expect(entityData.attributes.attributeMap.product_concrete_ids).to.contain(\"209_12554247\");",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(entityData.links.self).to.eql(selfLink);",
											"});",
											"",
											"pm.test(\"Has relationships concrete-products returned\", function() {",
											"    pm.expect(entityData.relationships[\"concrete-products\"].data[0].type).to.eql(\"concrete-products\");",
											"    pm.expect(entityData.relationships[\"concrete-products\"].data[0].id).to.eql(\"209_12554247\");",
											"});",
											"",
											"pm.test(\"Has included section 'abstract-product-availabilities'\", function() {",
											"    let expectedIncludedTypes = [\"abstract-product-availabilities\"],",
											"        includedTypes = _.uniq(_.pluck(included, \"type\"));",
											"",
											"    pm.expect(includedTypes).to.have.members(expectedIncludedTypes);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}?include=abstract-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}"
									],
									"query": [
										{
											"key": "include",
											"value": "abstract-product-availabilities"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract product and include \"abstract-product-prices\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c75c0ee2-b7df-45da-86b4-788faaf3a54e",
										"exec": [
											"let jsonData = pm.response.json(),",
											"    entityData = jsonData.data,",
											"    included = jsonData.included,",
											"    abstractSku = pm.variables.get(\"abstract_sku_with_1product\"),",
											"    abstractSkuTaxSetUuid = pm.variables.get(\"abstract_sku_with_1product_tax_set_uuid\"),",
											"    selfLink = pm.variables.get(\"url\") + \"/abstract-products/\" + abstractSku;",
											"",
											"const resourceName = \"abstract-products\";",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(entityData.type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(entityData.id).to.eql(abstractSku);",
											"});",
											"",
											"pm.test(\"Has abstract description returned\", function() {",
											"    pm.expect(entityData.attributes.sku).to.eql(abstractSku);",
											"    pm.expect(entityData.attributes.name).to.be.eql(\"Toshiba CAMILEO S20\");",
											"    pm.expect(entityData.attributes.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has attribute variants returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).have.property('attribute_variants');",
											"});",
											"",
											"pm.test(\"Has super attributes returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).to.have.property('super_attributes');",
											"});",
											"",
											"pm.test(\"Has product concrete ids returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).to.have.property('product_concrete_ids');",
											"    pm.expect(entityData.attributes.attributeMap.product_concrete_ids).to.contain(\"209_12554247\");",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(entityData.links.self).to.eql(selfLink);",
											"});",
											"",
											"pm.test(\"Has relationships concrete-products returned\", function() {",
											"    pm.expect(entityData.relationships[\"concrete-products\"].data[0].type).to.eql(\"concrete-products\");",
											"    pm.expect(entityData.relationships[\"concrete-products\"].data[0].id).to.eql(\"209_12554247\");",
											"});",
											"",
											"pm.test(\"Has included section 'abstract-product-prices'\", function() {",
											"    let expectedIncludedTypes = [\"abstract-product-prices\"],",
											"        includedTypes = _.uniq(_.pluck(included, \"type\"));",
											"",
											"    pm.expect(includedTypes).to.have.members(expectedIncludedTypes);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}?include=abstract-product-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}"
									],
									"query": [
										{
											"key": "include",
											"value": "abstract-product-prices"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract product and include\"abstract-products\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c75c0ee2-b7df-45da-86b4-788faaf3a54e",
										"exec": [
											"let jsonData = pm.response.json(),",
											"    entityData = jsonData.data,",
											"    included = jsonData.included,",
											"    abstractSku = pm.variables.get(\"abstract_sku_with_1product\"),",
											"    abstractSkuTaxSetUuid = pm.variables.get(\"abstract_sku_with_1product_tax_set_uuid\"),",
											"    selfLink = pm.variables.get(\"url\") + \"/abstract-products/\" + abstractSku;",
											"",
											"const resourceName = \"abstract-products\";",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(entityData.type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(entityData.id).to.eql(abstractSku);",
											"});",
											"",
											"pm.test(\"Has abstract description returned\", function() {",
											"    pm.expect(entityData.attributes.sku).to.eql(abstractSku);",
											"    pm.expect(entityData.attributes.name).to.be.eql(\"Toshiba CAMILEO S20\");",
											"    pm.expect(entityData.attributes.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has attribute variants returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).have.property('attribute_variants');",
											"});",
											"",
											"pm.test(\"Has super attributes returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).to.have.property('super_attributes');",
											"});",
											"",
											"pm.test(\"Has product concrete ids returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).to.have.property('product_concrete_ids');",
											"    pm.expect(entityData.attributes.attributeMap.product_concrete_ids).to.contain(\"209_12554247\");",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(entityData.links.self).to.eql(selfLink);",
											"});",
											"",
											"pm.test(\"Has relationships concrete-products returned\", function() {",
											"    pm.expect(entityData.relationships[\"concrete-products\"].data[0].type).to.eql(\"concrete-products\");",
											"    pm.expect(entityData.relationships[\"concrete-products\"].data[0].id).to.eql(\"209_12554247\");",
											"});",
											"",
											"pm.test(\"Has included section 'abstract-products'\", function() {",
											"    let expectedIncludedTypes = [\"abstract-products\"],",
											"        includedTypes = _.uniq(_.pluck(included, \"type\"));",
											"",
											"    pm.expect(includedTypes).to.have.members(expectedIncludedTypes);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}?include=abstract-products",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}"
									],
									"query": [
										{
											"key": "include",
											"value": "abstract-products"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract product and include \"category-nodes\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c75c0ee2-b7df-45da-86b4-788faaf3a54e",
										"exec": [
											"let jsonData = pm.response.json(),",
											"    entityData = jsonData.data,",
											"    included = jsonData.included,",
											"    abstractSku = pm.variables.get(\"abstract_sku_with_1product\"),",
											"    abstractSkuTaxSetUuid = pm.variables.get(\"abstract_sku_with_1product_tax_set_uuid\"),",
											"    selfLink = pm.variables.get(\"url\") + \"/abstract-products/\" + abstractSku;",
											"",
											"const resourceName = \"abstract-products\";",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(entityData.type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(entityData.id).to.eql(abstractSku);",
											"});",
											"",
											"pm.test(\"Has abstract description returned\", function() {",
											"    pm.expect(entityData.attributes.sku).to.eql(abstractSku);",
											"    pm.expect(entityData.attributes.name).to.be.eql(\"Toshiba CAMILEO S20\");",
											"    pm.expect(entityData.attributes.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has attribute variants returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).have.property('attribute_variants');",
											"});",
											"",
											"pm.test(\"Has super attributes returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).to.have.property('super_attributes');",
											"});",
											"",
											"pm.test(\"Has product concrete ids returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).to.have.property('product_concrete_ids');",
											"    pm.expect(entityData.attributes.attributeMap.product_concrete_ids).to.contain(\"209_12554247\");",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(entityData.links.self).to.eql(selfLink);",
											"});",
											"",
											"pm.test(\"Has relationships concrete-products returned\", function() {",
											"    pm.expect(entityData.relationships[\"concrete-products\"].data[0].type).to.eql(\"concrete-products\");",
											"    pm.expect(entityData.relationships[\"concrete-products\"].data[0].id).to.eql(\"209_12554247\");",
											"});",
											"",
											"pm.test(\"Has included section 'category-nodes'\", function() {",
											"    let expectedIncludedTypes = [\"category-nodes\"],",
											"        includedTypes = _.uniq(_.pluck(included, \"type\"));",
											"",
											"    pm.expect(includedTypes).to.have.members(expectedIncludedTypes);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}?include=category-nodes",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}"
									],
									"query": [
										{
											"key": "include",
											"value": "category-nodes"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract product and include\"product-tax-sets\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c75c0ee2-b7df-45da-86b4-788faaf3a54e",
										"exec": [
											"let jsonData = pm.response.json(),",
											"    entityData = jsonData.data,",
											"    included = jsonData.included,",
											"    abstractSku = pm.variables.get(\"abstract_sku_with_1product\"),",
											"    abstractSkuTaxSetUuid = pm.variables.get(\"abstract_sku_with_1product_tax_set_uuid\"),",
											"    selfLink = pm.variables.get(\"url\") + \"/abstract-products/\" + abstractSku;",
											"",
											"const resourceName = \"abstract-products\";",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(entityData.type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(entityData.id).to.eql(abstractSku);",
											"});",
											"",
											"pm.test(\"Has abstract description returned\", function() {",
											"    pm.expect(entityData.attributes.sku).to.eql(abstractSku);",
											"    pm.expect(entityData.attributes.name).to.be.eql(\"Toshiba CAMILEO S20\");",
											"    pm.expect(entityData.attributes.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has attribute variants returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).have.property('attribute_variants');",
											"});",
											"",
											"pm.test(\"Has super attributes returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).to.have.property('super_attributes');",
											"});",
											"",
											"pm.test(\"Has product concrete ids returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).to.have.property('product_concrete_ids');",
											"    pm.expect(entityData.attributes.attributeMap.product_concrete_ids).to.contain(\"209_12554247\");",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(entityData.links.self).to.eql(selfLink);",
											"});",
											"",
											"pm.test(\"Has relationships concrete-products returned\", function() {",
											"    pm.expect(entityData.relationships[\"concrete-products\"].data[0].type).to.eql(\"concrete-products\");",
											"    pm.expect(entityData.relationships[\"concrete-products\"].data[0].id).to.eql(\"209_12554247\");",
											"});",
											"",
											"pm.test(\"Has included section 'product-tax-sets'\", function() {",
											"    let expectedIncludedTypes = [\"product-tax-sets\"],",
											"        includedTypes = _.uniq(_.pluck(included, \"type\"));",
											"",
											"    pm.expect(includedTypes).to.have.members(expectedIncludedTypes);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}?include=product-tax-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}"
									],
									"query": [
										{
											"key": "include",
											"value": "product-tax-sets"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract product and include\"product-labels\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c75c0ee2-b7df-45da-86b4-788faaf3a54e",
										"exec": [
											"let jsonData = pm.response.json(),",
											"    entityData = jsonData.data,",
											"    included = jsonData.included,",
											"    abstractSku = pm.variables.get(\"abstract_sku_with_1product\"),",
											"    abstractSkuTaxSetUuid = pm.variables.get(\"abstract_sku_with_1product_tax_set_uuid\"),",
											"    selfLink = pm.variables.get(\"url\") + \"/abstract-products/\" + abstractSku;",
											"",
											"const resourceName = \"abstract-products\";",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(entityData.type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(entityData.id).to.eql(abstractSku);",
											"});",
											"",
											"pm.test(\"Has abstract description returned\", function() {",
											"    pm.expect(entityData.attributes.sku).to.eql(abstractSku);",
											"    pm.expect(entityData.attributes.name).to.be.eql(\"Toshiba CAMILEO S20\");",
											"    pm.expect(entityData.attributes.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has attribute variants returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).have.property('attribute_variants');",
											"});",
											"",
											"pm.test(\"Has super attributes returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).to.have.property('super_attributes');",
											"});",
											"",
											"pm.test(\"Has product concrete ids returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).to.have.property('product_concrete_ids');",
											"    pm.expect(entityData.attributes.attributeMap.product_concrete_ids).to.contain(\"209_12554247\");",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(entityData.links.self).to.eql(selfLink);",
											"});",
											"",
											"pm.test(\"Has relationships concrete-products returned\", function() {",
											"    pm.expect(entityData.relationships[\"concrete-products\"].data[0].type).to.eql(\"concrete-products\");",
											"    pm.expect(entityData.relationships[\"concrete-products\"].data[0].id).to.eql(\"209_12554247\");",
											"});",
											"",
											"pm.test(\"Has included section 'product-labels'\", function() {",
											"    let expectedIncludedTypes = [\"product-labels\"],",
											"        includedTypes = _.uniq(_.pluck(included, \"type\"));",
											"",
											"    pm.expect(includedTypes).to.have.members(expectedIncludedTypes);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}?include=product-labels",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}"
									],
									"query": [
										{
											"key": "include",
											"value": "product-labels"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract product and include Include several parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c75c0ee2-b7df-45da-86b4-788faaf3a54e",
										"exec": [
											"let jsonData = pm.response.json(),",
											"    entityData = jsonData.data,",
											"    included = jsonData.included,",
											"    abstractSku = pm.variables.get(\"abstract_sku_with_1product\"),",
											"    abstractSkuTaxSetUuid = pm.variables.get(\"abstract_sku_with_1product_tax_set_uuid\"),",
											"    selfLink = pm.variables.get(\"url\") + \"/abstract-products/\" + abstractSku;",
											"",
											"const resourceName = \"abstract-products\";",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(entityData.type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(entityData.id).to.eql(abstractSku);",
											"});",
											"",
											"pm.test(\"Has abstract description returned\", function() {",
											"    pm.expect(entityData.attributes.sku).to.eql(abstractSku);",
											"    pm.expect(entityData.attributes.name).to.be.eql(\"Toshiba CAMILEO S20\");",
											"    pm.expect(entityData.attributes.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has attribute variants returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).have.property('attribute_variants');",
											"});",
											"",
											"pm.test(\"Has super attributes returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).to.have.property('super_attributes');",
											"});",
											"",
											"pm.test(\"Has product concrete ids returned\", function() {",
											"    pm.expect(entityData.attributes.attributeMap).to.have.property('product_concrete_ids');",
											"    pm.expect(entityData.attributes.attributeMap.product_concrete_ids).to.contain(\"209_12554247\");",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(entityData.links.self).to.eql(selfLink);",
											"});",
											"",
											"pm.test(\"Has relationships concrete-products returned\", function() {",
											"    pm.expect(entityData.relationships[\"concrete-products\"].data[0].type).to.eql(\"concrete-products\");",
											"    pm.expect(entityData.relationships[\"concrete-products\"].data[0].id).to.eql(\"209_12554247\");",
											"});",
											"",
											"pm.test(\"Has included section 'product-labels and category-nodes'\", function() {",
											"    let expectedIncludedTypes = [\"product-labels\",'category-nodes'],",
											"        includedTypes = _.uniq(_.pluck(included, \"type\"));",
											"",
											"    pm.expect(includedTypes).to.include.members(expectedIncludedTypes);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}?include=product-labels&include=category-nodes",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}"
									],
									"query": [
										{
											"key": "include",
											"value": "product-labels"
										},
										{
											"key": "include",
											"value": "category-nodes"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract information with 3 concrete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c75c0ee2-b7df-45da-86b4-788faaf3a54e",
										"exec": [
											"var jsonData = pm.response.json();",
											"var resourceName = \"abstract-products\";",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data.type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data.id).to.eql(pm.variables.get(\"abstract_sku_with_3product\"));",
											"});",
											"",
											"pm.test(\"Has abstract description returned\", function() {",
											"    pm.expect(jsonData.data.attributes.sku).to.eql(pm.variables.get(\"abstract_sku_with_3product\"));",
											"    pm.expect(jsonData.data.attributes.name).to.be.eql(\"Samsung Galaxy Tab Active 8.0 8 GB\"); ",
											"    pm.expect(jsonData.data.attributes.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has attribute variants returned\", function() {",
											"    pm.expect(jsonData.data.attributes.attributeMap.attribute_variants[\"internal_storage_capacity:8 GB\"].id_product_concrete).to.eql(\"177_24867659\");",
											"    pm.expect(jsonData.data.attributes.attributeMap.attribute_variants[\"internal_storage_capacity:16 GB\"].id_product_concrete).to.eql(\"177_24422865\");",
											"    pm.expect(jsonData.data.attributes.attributeMap.attribute_variants[\"internal_storage_capacity:32 GB\"].id_product_concrete).to.eql(\"177_25913296\");",
											"});",
											"",
											"pm.test(\"Has super attributes  returned\", function() {",
											"    pm.expect(jsonData.data.attributes.attributeMap.super_attributes.internal_storage_capacity).to.contain(\"8 GB\", \"16 GB\", \"32 GB\");",
											"});",
											"",
											"pm.test(\"Has product concrete ids returned\", function() {",
											"    pm.expect(jsonData.data.attributes.attributeMap.product_concrete_ids).to.contain(\"177_24867659\", \"177_24422865\", \"177_25913296\");",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.data.links.self).to.eql(pm.variables.get(\"url\") + \"/abstract-products/\" +  pm.variables.get(\"abstract_sku_with_3product\"));",
											"});",
											"",
											"pm.test(\"Has relationships concrete-products returned\", function() {",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[0].type).to.eql(\"concrete-products\"); ",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[0].id).to.eql(\"177_24867659\");",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[1].type).to.eql(\"concrete-products\"); ",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[1].id).to.eql(\"177_24422865\");",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[2].type).to.eql(\"concrete-products\");",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[2].id).to.eql(\"177_25913296\");",
											"});",
											"",
											"pm.test(\"Has relationships abstract-product-image-sets returned\", function() {",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-image-sets\"].data[0].type).to.eql(\"abstract-product-image-sets\"); ",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-image-sets\"].data[0].id).to.eql(pm.variables.get(\"abstract_sku_with_3product\"));",
											"});",
											"",
											"pm.test(\"Has relationships abstract-product-image-sets returned\", function() {",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-image-sets\"].data[0].type).to.eql(\"abstract-product-image-sets\"); ",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-image-sets\"].data[0].id).to.eql(pm.variables.get(\"abstract_sku_with_3product\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_3product}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_3product}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract information with 1 concrete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c75c0ee2-b7df-45da-86b4-788faaf3a54e",
										"exec": [
											"var jsonData = pm.response.json();",
											"var resourceName = \"abstract-products\";",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data.type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data.id).to.eql(pm.variables.get(\"abstract_sku_with_1product\"));",
											"});",
											"",
											"pm.test(\"Has abstract description returned\", function() {",
											"    pm.expect(jsonData.data.attributes.sku).to.eql(pm.variables.get(\"abstract_sku_with_1product\"));",
											"    pm.expect(jsonData.data.attributes.name).to.be.eql(\"Toshiba CAMILEO S20\"); ",
											"    pm.expect(jsonData.data.attributes.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has attribute variants returned\", function() {",
											"    pm.expect(jsonData.data.attributes.attributeMap).have.property('attribute_variants');",
											"});",
											"",
											"pm.test(\"Has super attributes returned\", function() {",
											"    pm.expect(jsonData.data.attributes.attributeMap).to.have.property('super_attributes');",
											"});",
											"",
											"pm.test(\"Has product concrete ids returned\", function() {",
											"    pm.expect(jsonData.data.attributes.attributeMap).to.have.property('product_concrete_ids');",
											"    pm.expect(jsonData.data.attributes.attributeMap.product_concrete_ids).to.contain(\"209_12554247\"); ",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.data.links.self).to.eql(",
											"        pm.variables.get(\"url\") + \"/abstract-products/\" +  pm.variables.get(\"abstract_sku_with_1product\")",
											"    );",
											"});",
											"",
											"pm.test(\"Has relationships concrete-products returned\", function() {",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[0].type).to.eql(\"concrete-products\"); ",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[0].id).to.eql(\"209_12554247\");",
											"});",
											"",
											"pm.test(\"Has relationships abstract-product-image-sets returned\", function() {",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-image-sets\"].data[0].type).to.eql(\"abstract-product-image-sets\"); ",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-image-sets\"].data[0].id).to.eql(pm.variables.get(\"abstract_sku_with_1product\"));",
											"});",
											"",
											"pm.test(\"Has relationships abstract-product-availabilities returned\", function() {",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-availabilities\"].data[0].type).to.eql(\"abstract-product-availabilities\"); ",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-availabilities\"].data[0].id).to.eql(pm.variables.get(\"abstract_sku_with_1product\"));",
											"});",
											"",
											"pm.test(\"Has relationships tax-sets returned\", function() {",
											"    pm.expect(jsonData.data.relationships[\"product-tax-sets\"].data[0].type).to.eql(\"product-tax-sets\"); ",
											"    pm.expect(jsonData.data.relationships[\"product-tax-sets\"].data[0].id).to.eql(pm.variables.get(\"abstract_sku_with_1product_tax_set_uuid\"));",
											"});",
											"",
											"pm.test(\"Has relationships abstract-product-prices returned\", function() {",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-prices\"].data[0].type).to.eql(\"abstract-product-prices\"); ",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-prices\"].data[0].id).to.eql(pm.variables.get(\"abstract_sku_with_1product\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract with 1 concrete and included image sets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4a5ff0b-b030-4b86-a833-09687fb06796",
										"exec": [
											"var jsonData = pm.response.json();",
											"var resourceName = \"abstract-products\";",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data.type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data.id).to.eql(pm.variables.get(\"abstract_sku_with_1product\"));",
											"});",
											"",
											"pm.test(\"Has abstract description returned\", function() {",
											"    pm.expect(jsonData.data.attributes.sku).to.eql(pm.variables.get(\"abstract_sku_with_1product\"));",
											"    pm.expect(jsonData.data.attributes.name).to.be.eql(\"Toshiba CAMILEO S20\"); ",
											"    pm.expect(jsonData.data.attributes.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has attribute variants returned\", function() {",
											"    pm.expect(jsonData.data.attributes.attributeMap).have.property('attribute_variants');",
											"});",
											"",
											"pm.test(\"Has super attributes returned\", function() {",
											"    pm.expect(jsonData.data.attributes.attributeMap).to.have.property('super_attributes');",
											"});",
											"",
											"pm.test(\"Has product concrete ids returned\", function() {",
											"    pm.expect(jsonData.data.attributes.attributeMap).to.have.property('product_concrete_ids');",
											"    pm.expect(jsonData.data.attributes.attributeMap.product_concrete_ids).to.contain(\"209_12554247\"); ",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.data.links.self).to.eql(",
											"        pm.variables.get(\"url\") + \"/abstract-products/\" +  pm.variables.get(\"abstract_sku_with_1product\")",
											"    );",
											"});",
											"",
											"pm.test(\"Has relationships concrete-products returned\", function() {",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[0].type).to.eql(\"concrete-products\"); ",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[0].id).to.eql(\"209_12554247\");",
											"});",
											"",
											"pm.test(\"Has relationships abstract-product-image-sets returned\", function() {",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-image-sets\"].data[0].type).to.eql(\"abstract-product-image-sets\"); ",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-image-sets\"].data[0].id).to.eql(pm.variables.get(\"abstract_sku_with_1product\"));",
											"});",
											"",
											"pm.test(\"Has only two relationship\", function() {",
											"    pm.expect(Object.keys(jsonData.data.relationships)).to.have.lengthOf(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}?include=abstract-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}"
									],
									"query": [
										{
											"key": "include",
											"value": "abstract-product-image-sets"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract with 1 concrete and included product availability",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4676a3c9-5e72-409c-87b5-aa9f3f293157",
										"exec": [
											"var jsonData = pm.response.json();",
											"var resourceName = \"abstract-products\";",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data.type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data.id).to.eql(pm.variables.get(\"abstract_sku_with_1product\"));",
											"});",
											"",
											"pm.test(\"Has abstract description returned\", function() {",
											"    pm.expect(jsonData.data.attributes.sku).to.eql(pm.variables.get(\"abstract_sku_with_1product\"));",
											"    pm.expect(jsonData.data.attributes.name).to.be.eql(\"Toshiba CAMILEO S20\"); ",
											"    pm.expect(jsonData.data.attributes.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has attribute variants returned\", function() {",
											"    pm.expect(jsonData.data.attributes.attributeMap).have.property('attribute_variants');",
											"});",
											"",
											"pm.test(\"Has super attributes returned\", function() {",
											"    pm.expect(jsonData.data.attributes.attributeMap).to.have.property('super_attributes');",
											"});",
											"",
											"pm.test(\"Has product concrete ids returned\", function() {",
											"    pm.expect(jsonData.data.attributes.attributeMap).to.have.property('product_concrete_ids');",
											"    pm.expect(jsonData.data.attributes.attributeMap.product_concrete_ids).to.contain(\"209_12554247\"); ",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.data.links.self).to.eql(",
											"        pm.variables.get(\"url\") + \"/abstract-products/\" +  pm.variables.get(\"abstract_sku_with_1product\")",
											"    );",
											"});",
											"",
											"pm.test(\"Has relationships concrete-products returned\", function() {",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[0].type).to.eql(\"concrete-products\"); ",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[0].id).to.eql(\"209_12554247\");",
											"});",
											"",
											"pm.test(\"Has relationships abstract-product-availabilities returned\", function() {",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-availabilities\"].data[0].type).to.eql(\"abstract-product-availabilities\"); ",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-availabilities\"].data[0].id).to.eql(pm.variables.get(\"abstract_sku_with_1product\"));",
											"});",
											"",
											"pm.test(\"Has only two relationship\", function() {",
											"    pm.expect(Object.keys(jsonData.data.relationships)).to.have.lengthOf(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}?include=abstract-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}"
									],
									"query": [
										{
											"key": "include",
											"value": "abstract-product-availabilities"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Get abstract information using special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e2f4fbc-7742-4a71-b6d2-9dfa8f440fe1",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error code is 301\", function() {",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"301\");",
											"});",
											"",
											"pm.test(\"Error status code is 404\", function () {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Abstract product is not found.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/!@#$%^&*()",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"!@"
									],
									"hash": "$%^&*()"
								}
							},
							"response": []
						},
						{
							"name": "Negative. Get abstract information using a lot of spaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a5611894-5e77-44cc-8b30-efcebac60627",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error code is 311\", function() {",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"311\");",
											"});",
											"",
											"pm.test(\"Error status code is 400\", function () {",
											"    pm.expect(jsonData.errors[0].status).to.eql(400);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Abstract product sku is not specified.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										""
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Request the concrete product ",
					"item": [
						{
							"name": "Request product by concrete sku - product available",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb11d609-4f92-4689-abf7-0eab79a604a5",
										"exec": [
											"var jsonData = pm.response.json();",
											"var resourceName = \"concrete-products\";",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data.type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data.id).to.eql(pm.variables.get(\"concrete_sku\"));",
											"});",
											"",
											"pm.test(\"Has description of concrete-products type returned\", function() {",
											"    pm.expect(jsonData.data.attributes.sku).to.be.eql(pm.variables.get(\"concrete_sku\"));",
											"    pm.expect(jsonData.data.attributes.name).to.be.eql(\"Samsung Galaxy Tab Active 8.0 8 GB\");",
											"    pm.expect(jsonData.data.attributes.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has attributes of concrete-products type returned\", function() {",
											"    pm.expect(jsonData.data.attributes.attributes.storage_media).to.be.eql(\"flash\");",
											"    pm.expect(jsonData.data.attributes.attributes.processor_frequency).to.be.eql(\"1.2 GHz\");",
											"    pm.expect(jsonData.data.attributes.attributes.display_diagonal).to.be.eql(\"20.3 cm\");",
											"    pm.expect(jsonData.data.attributes.attributes.aspect_ratio).to.be.eql(\"16:09\");",
											"    pm.expect(jsonData.data.attributes.attributes.brand).to.be.eql(\"Samsung\");",
											"    pm.expect(jsonData.data.attributes.attributes.internal_storage_capacity).to.be.eql(\"8 GB\");",
											"});",
											"",
											"pm.test(\"Has super Attributes Definition of concrete-products type returned\", function() {",
											"    pm.expect(jsonData.data.attributes.superAttributesDefinition).to.contain(\"storage_media\", \"processor_frequency\", \"internal_storage_capacity\");",
											"});",
											"",
											"pm.test(\"Has meta data returned\", function() {",
											"    pm.expect(jsonData.data.attributes.metaTitle).to.be.eql(\"Samsung Galaxy Tab Active 8.0 8 GB\");",
											"    pm.expect(jsonData.data.attributes.metaKeywords).to.eql(\"Samsung,Communication Electronics\");",
											"    pm.expect(jsonData.data.attributes.metaDescription).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has concrete-products self link\", function() {",
											"    pm.expect(jsonData.data.links.self).to.eql(pm.variables.get(\"url\") + \"/concrete-products/\" + pm.variables.get(\"concrete_sku\")); ",
											"}); ",
											"",
											"pm.test(\"Has relationships concrete-product-image-sets type returned\", function() {",
											"    pm.expect(jsonData.data.relationships[\"concrete-product-image-sets\"].data[0].type).to.be.eql(\"concrete-product-image-sets\");",
											"    pm.expect(jsonData.data.relationships[\"concrete-product-image-sets\"].data[0].id).to.be.eql(pm.variables.get(\"concrete_sku\"));",
											"});",
											"",
											"pm.test(\"Has relationships concrete-product-availabilities type returned\", function() {",
											"    pm.expect(jsonData.data.relationships[\"concrete-product-availabilities\"].data[0].type).to.be.eql(\"concrete-product-availabilities\");",
											"    pm.expect(jsonData.data.relationships[\"concrete-product-availabilities\"].data[0].id).to.be.eql(pm.variables.get(\"concrete_sku\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concrete_sku}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concrete_sku}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request product by concrete sku - product doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb11d609-4f92-4689-abf7-0eab79a604a5",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct error code\", function(){",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"302\");",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Concrete product is not found.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/notExistingSKUValue",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"notExistingSKUValue"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request product by  abstract sku",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb11d609-4f92-4689-abf7-0eab79a604a5",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct error code\", function(){",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"302\");",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Concrete product is not found.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{abstractSKU2}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{abstractSKU2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request product by concrete sku - another concrete of this abstract deactivated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb11d609-4f92-4689-abf7-0eab79a604a5",
										"exec": [
											"var jsonData = pm.response.json();",
											"var resourceName = \"concrete-products\";",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data.type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data.id).to.eql(pm.variables.get(\"concreteSKU3\"));",
											"});",
											"",
											"pm.test(\"Has description of concrete-products type returned\", function() {",
											"    pm.expect(jsonData.data.attributes.sku).to.be.eql(pm.variables.get(\"concreteSKU3\"));",
											"    pm.expect(jsonData.data.attributes.name).to.be.eql(\"Printer ink refill 1.5L\");",
											"    pm.expect(jsonData.data.attributes.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has attributes of concrete-products type returned\", function() {",
											"    pm.expect(jsonData.data.attributes.attributes.brand).to.be.eql(\"Canon\");",
											"});",
											"",
											"",
											"pm.test(\"Has concrete-products self link\", function() {",
											"    pm.expect(jsonData.data.links.self).to.eql(pm.variables.get(\"url\") + \"/concrete-products/\" + pm.variables.get(\"concrete_sku\")); ",
											"}); ",
											"",
											"pm.test(\"Has relationships concrete-product-image-sets type returned\", function() {",
											"    pm.expect(jsonData.data.relationships[\"concrete-product-image-sets\"].data[0].type).to.be.eql(\"concrete-product-image-sets\");",
											"    pm.expect(jsonData.data.relationships[\"concrete-product-image-sets\"].data[0].id).to.be.eql(pm.variables.get(\"concreteSKU3\"));",
											"});",
											"",
											"pm.test(\"Has relationships concrete-product-availabilities type returned\", function() {",
											"    pm.expect(jsonData.data.relationships[\"concrete-product-availabilities\"].data[0].type).to.be.eql(\"concrete-product-availabilities\");",
											"    pm.expect(jsonData.data.relationships[\"concrete-product-availabilities\"].data[0].id).to.be.eql(pm.variables.get(\"concreteSKU3\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concreteSKU3}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concreteSKU3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request product by concrete sku -  concrete deactivated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb11d609-4f92-4689-abf7-0eab79a604a5",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct error code\", function(){",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"302\");",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Concrete product is not found.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concreteSKU4}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concreteSKU4}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request product by concrete sku -  empty search criteria",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb11d609-4f92-4689-abf7-0eab79a604a5",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error status is 400\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(400);",
											"});",
											"",
											"pm.test(\"Correct error code\", function(){",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"312\");",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Concrete product sku is not specified.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Request product by concrete sku -  wrong query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb11d609-4f92-4689-abf7-0eab79a604a5",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concreteproducts/{{concreteSKU3}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"concreteproducts",
										"{{concreteSKU3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request concrete information with wrong method POST",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10e21e74-93bc-420b-a4b0-ece755d41b63",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{\"type\":\"register-customer\",\"attributes\":{\"salutation\":\"{{salutation}}\",\"firstName\":\"{{firstName}}\",\"lastName\":\"{{lastName}}\",\"email\":\"{{email}}\",\"password\":\"{{password}}\",\"passwordConfirmation\":\"{{password}}\",\"acceptedTerms\":true}}}"
								},
								"url": {
									"raw": "{{url}}/oncrete-products/{{concrete_sku}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"oncrete-products",
										"{{concrete_sku}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request concrete information with wrong method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10e21e74-93bc-420b-a4b0-ece755d41b63",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/oncrete-products//{{concrete_sku}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"oncrete-products",
										"",
										"{{concrete_sku}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request concrete information with wrong method PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10e21e74-93bc-420b-a4b0-ece755d41b63",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{ \"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/oncrete-products/{{concrete_sku}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"oncrete-products",
										"{{concrete_sku}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request concrete information with wrong method PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10e21e74-93bc-420b-a4b0-ece755d41b63",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{ \"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/oncrete-products/{{concrete_sku}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"oncrete-products",
										"{{concrete_sku}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request concrete with included image-sets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f0524e9-058b-449a-8e97-4320c27a4c6e",
										"exec": [
											"var jsonData = pm.response.json();",
											"var resourceName = \"concrete-products\";",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data.type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data.id).to.eql(pm.variables.get(\"concrete_sku\"));",
											"});",
											"",
											"pm.test(\"Has description of concrete-products type returned\", function() {",
											"    pm.expect(jsonData.data.attributes.sku).to.be.eql(pm.variables.get(\"concrete_sku\"));",
											"    pm.expect(jsonData.data.attributes.name).to.be.eql(\"Samsung Galaxy Tab Active 8.0 8 GB\");",
											"    pm.expect(jsonData.data.attributes.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has attributes of concrete-products type returned\", function() {",
											"    pm.expect(jsonData.data.attributes.attributes.storage_media).to.be.eql(\"flash\");",
											"    pm.expect(jsonData.data.attributes.attributes.processor_frequency).to.be.eql(\"1.2 GHz\");",
											"    pm.expect(jsonData.data.attributes.attributes.display_diagonal).to.be.eql(\"20.3 cm\");",
											"    pm.expect(jsonData.data.attributes.attributes.aspect_ratio).to.be.eql(\"16:09\");",
											"    pm.expect(jsonData.data.attributes.attributes.brand).to.be.eql(\"Samsung\");",
											"    pm.expect(jsonData.data.attributes.attributes.internal_storage_capacity).to.be.eql(\"8 GB\");",
											"});",
											"",
											"pm.test(\"Has super Attributes Definition of concrete-products type returned\", function() {",
											"    pm.expect(jsonData.data.attributes.superAttributesDefinition).to.contain(\"storage_media\", \"processor_frequency\", \"internal_storage_capacity\");",
											"});",
											"",
											"pm.test(\"Has meta data returned\", function() {",
											"    pm.expect(jsonData.data.attributes.metaTitle).to.be.eql(\"Samsung Galaxy Tab Active 8.0 8 GB\");",
											"    pm.expect(jsonData.data.attributes.metaKeywords).to.eql(\"Samsung,Communication Electronics\");",
											"    pm.expect(jsonData.data.attributes.metaDescription).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has concrete-products self link\", function() {",
											"    pm.expect(jsonData.data.links.self).to.eql(pm.variables.get(\"url\") + \"/concrete-products/\" + pm.variables.get(\"concrete_sku\"));",
											"});",
											"",
											"pm.test(\"Has relationships concrete-product-image-sets type returned\", function() {",
											"    pm.expect(jsonData.data.relationships[\"concrete-product-image-sets\"].data[0].type).to.be.eql(\"concrete-product-image-sets\");",
											"    pm.expect(jsonData.data.relationships[\"concrete-product-image-sets\"].data[0].id).to.be.eql(pm.variables.get(\"concrete_sku\"));",
											"});",
											"",
											"pm.test(\"Has only two relationship\", function() {",
											"    pm.expect(Object.keys(jsonData.data.relationships)).to.have.lengthOf(1);",
											"});",
											"",
											"pm.test(\"Has included 'concrete-product-image-sets'\", function() {",
											"    let concreteProductImageSets = _.find(jsonData.included, {",
											"            \"type\": \"concrete-product-image-sets\"",
											"        }),",
											"        image = _.get(concreteProductImageSets, 'attributes.imageSets[0].images[0]');",
											"",
											"    pm.expect(concreteProductImageSets.id).to.be.eql(pm.variables.get(\"concrete_sku\"));",
											"    pm.expect(image.externalUrlLarge).to.be.eql(\"//images.icecat.biz/img/norm/high/24867659-4916.jpg\");",
											"    pm.expect(image.externalUrlSmall).to.be.eql(\"//images.icecat.biz/img/norm/medium/24867659-4916.jpg\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concrete_sku}}?include=concrete-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concrete_sku}}"
									],
									"query": [
										{
											"key": "include",
											"value": "concrete-product-image-sets"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Request concrete with included availabilities",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "beeca058-a4b0-4dec-a6d7-5df6a9917ae5",
										"exec": [
											"var jsonData = pm.response.json();",
											"var resourceName = \"concrete-products\";",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data.type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data.id).to.eql(pm.variables.get(\"concrete_sku\"));",
											"});",
											"",
											"pm.test(\"Has description of concrete-products type returned\", function() {",
											"    pm.expect(jsonData.data.attributes.sku).to.be.eql(pm.variables.get(\"concrete_sku\"));",
											"    pm.expect(jsonData.data.attributes.name).to.be.eql(\"Samsung Galaxy Tab Active 8.0 8 GB\");",
											"    pm.expect(jsonData.data.attributes.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has attributes of concrete-products type returned\", function() {",
											"    pm.expect(jsonData.data.attributes.attributes.storage_media).to.be.eql(\"flash\");",
											"    pm.expect(jsonData.data.attributes.attributes.processor_frequency).to.be.eql(\"1.2 GHz\");",
											"    pm.expect(jsonData.data.attributes.attributes.display_diagonal).to.be.eql(\"20.3 cm\");",
											"    pm.expect(jsonData.data.attributes.attributes.aspect_ratio).to.be.eql(\"16:09\");",
											"    pm.expect(jsonData.data.attributes.attributes.brand).to.be.eql(\"Samsung\");",
											"    pm.expect(jsonData.data.attributes.attributes.internal_storage_capacity).to.be.eql(\"8 GB\");",
											"});",
											"",
											"pm.test(\"Has super Attributes Definition of concrete-products type returned\", function() {",
											"    pm.expect(jsonData.data.attributes.superAttributesDefinition).to.contain(\"storage_media\", \"processor_frequency\", \"internal_storage_capacity\");",
											"});",
											"",
											"pm.test(\"Has meta data returned\", function() {",
											"    pm.expect(jsonData.data.attributes.metaTitle).to.be.eql(\"Samsung Galaxy Tab Active 8.0 8 GB\");",
											"    pm.expect(jsonData.data.attributes.metaKeywords).to.eql(\"Samsung,Communication Electronics\");",
											"    pm.expect(jsonData.data.attributes.metaDescription).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has concrete-products self link\", function() {",
											"    pm.expect(jsonData.data.links.self).to.eql(pm.variables.get(\"url\") + \"/concrete-products/\" + pm.variables.get(\"concrete_sku\")); ",
											"}); ",
											"",
											"pm.test(\"Has relationships concrete-product-availabilities type returned\", function() {",
											"    pm.expect(jsonData.data.relationships[\"concrete-product-availabilities\"].data[0].type).to.be.eql(\"concrete-product-availabilities\");",
											"    pm.expect(jsonData.data.relationships[\"concrete-product-availabilities\"].data[0].id).to.be.eql(pm.variables.get(\"concrete_sku\"));",
											"});",
											"",
											"pm.test(\"Has only two relationship\", function() {",
											"    pm.expect(Object.keys(jsonData.data.relationships)).to.have.lengthOf(1);",
											"});",
											"",
											"pm.test(\"Has included 'concrete-product-availabilities'\", function() {",
											"    let concreteProductAvailabilities = _.find(jsonData.included, {",
											"            \"type\": \"concrete-product-availabilities\"",
											"        }),",
											"        attributes = concreteProductAvailabilities.attributes;",
											"",
											"    pm.expect(concreteProductAvailabilities.id).to.be.eql(pm.variables.get(\"concrete_sku\"));",
											"    pm.expect(attributes.availability).to.be.eql(true);",
											"    pm.expect(attributes.quantity).to.be.eql(20);",
											"    pm.expect(attributes.isNeverOutOfStock).to.be.eql(false);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concrete_sku}}?include=concrete-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concrete_sku}}"
									],
									"query": [
										{
											"key": "include",
											"value": "concrete-product-availabilities"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Request concrete with included concrete-product-prices",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "beeca058-a4b0-4dec-a6d7-5df6a9917ae5",
										"exec": [
											"var jsonData = pm.response.json();",
											"var resourceName = \"concrete-products\";",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data.type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data.id).to.eql(pm.variables.get(\"concrete_sku\"));",
											"});",
											"",
											"pm.test(\"Has description of concrete-products type returned\", function() {",
											"    pm.expect(jsonData.data.attributes.sku).to.be.eql(pm.variables.get(\"concrete_sku\"));",
											"    pm.expect(jsonData.data.attributes.name).to.be.eql(\"Samsung Galaxy Tab Active 8.0 8 GB\");",
											"    pm.expect(jsonData.data.attributes.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has attributes of concrete-products type returned\", function() {",
											"    pm.expect(jsonData.data.attributes.attributes.storage_media).to.be.eql(\"flash\");",
											"    pm.expect(jsonData.data.attributes.attributes.processor_frequency).to.be.eql(\"1.2 GHz\");",
											"    pm.expect(jsonData.data.attributes.attributes.display_diagonal).to.be.eql(\"20.3 cm\");",
											"    pm.expect(jsonData.data.attributes.attributes.aspect_ratio).to.be.eql(\"16:09\");",
											"    pm.expect(jsonData.data.attributes.attributes.brand).to.be.eql(\"Samsung\");",
											"    pm.expect(jsonData.data.attributes.attributes.internal_storage_capacity).to.be.eql(\"8 GB\");",
											"});",
											"",
											"pm.test(\"Has super Attributes Definition of concrete-products type returned\", function() {",
											"    pm.expect(jsonData.data.attributes.superAttributesDefinition).to.contain(\"storage_media\", \"processor_frequency\", \"internal_storage_capacity\");",
											"});",
											"",
											"pm.test(\"Has meta data returned\", function() {",
											"    pm.expect(jsonData.data.attributes.metaTitle).to.be.eql(\"Samsung Galaxy Tab Active 8.0 8 GB\");",
											"    pm.expect(jsonData.data.attributes.metaKeywords).to.eql(\"Samsung,Communication Electronics\");",
											"    pm.expect(jsonData.data.attributes.metaDescription).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has concrete-products self link\", function() {",
											"    pm.expect(jsonData.data.links.self).to.eql(pm.variables.get(\"url\") + \"/concrete-products/\" + pm.variables.get(\"concrete_sku\"));",
											"});",
											"",
											"pm.test(\"Has included 'concrete-product-prices'\", function() {",
											"    let concreteProductPrices = _.find(jsonData.included, {",
											"            \"type\": \"concrete-product-prices\"",
											"        }),",
											"        attributes = concreteProductPrices.attributes;",
											"",
											"    pm.expect(concreteProductPrices.id).to.be.eql(pm.variables.get(\"concrete_sku\"));",
											"    pm.expect(attributes.price).to.be.eql(42502);",
											"    pm.expect(attributes.prices[0].priceTypeName).to.be.eql(\"DEFAULT\");",
											"    pm.expect(attributes.prices[0].netAmount).to.be.eql(null);",
											"    pm.expect(attributes.prices[0].grossAmount).to.be.eql(42502);",
											"    pm.expect(attributes.prices[0].currency.code).to.be.eql(\"EUR\");",
											"    pm.expect(attributes.prices[0].currency.name).to.be.eql(\"Euro\");",
											"    pm.expect(attributes.prices[0].currency.symbol).to.be.eql(\"€\");",
											"});",
											"",
											"pm.test(\"Has only two relationship\", function() {",
											"    pm.expect(Object.keys(jsonData.data.relationships)).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concrete_sku}}?include=concrete-product-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concrete_sku}}"
									],
									"query": [
										{
											"key": "include",
											"value": "concrete-product-prices"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Request concrete with Include several parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "beeca058-a4b0-4dec-a6d7-5df6a9917ae5",
										"exec": [
											"var jsonData = pm.response.json();",
											"var resourceName = \"concrete-products\";",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data.type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data.id).to.eql(pm.variables.get(\"concrete_sku\"));",
											"});",
											"",
											"pm.test(\"Has description of concrete-products type returned\", function() {",
											"    pm.expect(jsonData.data.attributes.sku).to.be.eql(pm.variables.get(\"concrete_sku\"));",
											"    pm.expect(jsonData.data.attributes.name).to.be.eql(\"Samsung Galaxy Tab Active 8.0 8 GB\");",
											"    pm.expect(jsonData.data.attributes.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has attributes of concrete-products type returned\", function() {",
											"    pm.expect(jsonData.data.attributes.attributes.storage_media).to.be.eql(\"flash\");",
											"    pm.expect(jsonData.data.attributes.attributes.processor_frequency).to.be.eql(\"1.2 GHz\");",
											"    pm.expect(jsonData.data.attributes.attributes.display_diagonal).to.be.eql(\"20.3 cm\");",
											"    pm.expect(jsonData.data.attributes.attributes.aspect_ratio).to.be.eql(\"16:09\");",
											"    pm.expect(jsonData.data.attributes.attributes.brand).to.be.eql(\"Samsung\");",
											"    pm.expect(jsonData.data.attributes.attributes.internal_storage_capacity).to.be.eql(\"8 GB\");",
											"});",
											"",
											"pm.test(\"Has super Attributes Definition of concrete-products type returned\", function() {",
											"    pm.expect(jsonData.data.attributes.superAttributesDefinition).to.contain(\"storage_media\", \"processor_frequency\", \"internal_storage_capacity\");",
											"});",
											"",
											"pm.test(\"Has meta data returned\", function() {",
											"    pm.expect(jsonData.data.attributes.metaTitle).to.be.eql(\"Samsung Galaxy Tab Active 8.0 8 GB\");",
											"    pm.expect(jsonData.data.attributes.metaKeywords).to.eql(\"Samsung,Communication Electronics\");",
											"    pm.expect(jsonData.data.attributes.metaDescription).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has concrete-products self link\", function() {",
											"    pm.expect(jsonData.data.links.self).to.eql(pm.variables.get(\"url\") + \"/concrete-products/\" + pm.variables.get(\"concrete_sku\"));",
											"});",
											"",
											"pm.test(\"Has included 'concrete-product-prices'\", function() {",
											"    let concreteProductPrices = _.find(jsonData.included, {",
											"            \"type\": \"concrete-product-prices\"",
											"        }),",
											"        attributes = concreteProductPrices.attributes;",
											"",
											"    pm.expect(concreteProductPrices.id).to.be.eql(pm.variables.get(\"concrete_sku\"));",
											"    pm.expect(attributes.price).to.be.eql(42502);",
											"    pm.expect(attributes.prices[0].priceTypeName).to.be.eql(\"DEFAULT\");",
											"    pm.expect(attributes.prices[0].netAmount).to.be.eql(null);",
											"    pm.expect(attributes.prices[0].grossAmount).to.be.eql(42502);",
											"    pm.expect(attributes.prices[0].currency.code).to.be.eql(\"EUR\");",
											"    pm.expect(attributes.prices[0].currency.name).to.be.eql(\"Euro\");",
											"    pm.expect(attributes.prices[0].currency.symbol).to.be.eql(\"€\");",
											"});",
											"",
											"pm.test(\"Has included 'concrete-product-availabilities'\", function() {",
											"    let concreteProductAvailabilities = _.find(jsonData.included, {",
											"            \"type\": \"concrete-product-availabilities\"",
											"        }),",
											"        attributes = concreteProductAvailabilities.attributes;",
											"",
											"    pm.expect(concreteProductAvailabilities.id).to.be.eql(pm.variables.get(\"concrete_sku\"));",
											"    pm.expect(attributes.availability).to.be.eql(true);",
											"    pm.expect(attributes.quantity).to.be.eql(20);",
											"    pm.expect(attributes.isNeverOutOfStock).to.be.eql(false);",
											"});",
											"",
											"pm.test(\"Has only two relationship\", function() {",
											"    pm.expect(Object.keys(jsonData.data.relationships)).to.have.lengthOf(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concrete_sku}}?include=concrete-product-availabilities,concrete-product-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concrete_sku}}"
									],
									"query": [
										{
											"key": "include",
											"value": "concrete-product-availabilities,concrete-product-prices"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request concrete information with special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "97df5320-90e7-4a46-95c8-afee79d17323",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error code is 302\", function() {",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"302\");",
											"});",
											"",
											"pm.test(\"Error status code is 404\", function () {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Concrete product is not found.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/!@#$%^&*()",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"!@"
									],
									"hash": "$%^&*()"
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request concrete information with a lot of space",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52960da7-220b-419b-9441-48e9971b49b3",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error code is 312\", function() {",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"312\");",
											"});",
											"",
											"pm.test(\"Error status code is 400\", function () {",
											"    pm.expect(jsonData.errors[0].status).to.eql(400);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Concrete product sku is not specified.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										""
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d012e6c0-eddd-4049-9eab-c8712510ac89",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3985157a-eb7b-4094-ae46-5a285e4a5612",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Products - Tax Sets",
			"item": [
				{
					"name": "Request abstract tax sets - by abstract sku",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9ae34b6-b243-4a47-85b5-1176eff3947a",
								"exec": [
									"var jsonData = pm.response.json();",
									"var resourceName = 'product-tax-sets';",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data[0].type).to.eql(resourceName);",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"abstract_sku_with_1product_tax_set_uuid\"));",
									"});",
									"",
									"pm.test(\"Has attributes returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.name).to.eql(\"Smart Electronics\");",
									"});",
									"",
									"pm.test(\"Has Austria Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[0].name).to.eql(\"Austria Standard\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[0].rate).to.eql(\"20.00\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[0].country).to.eql(\"AT\");",
									"});",
									"",
									"pm.test(\"Has Belgium Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[1].name).to.eql(\"Belgium Standard\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[1].rate).to.eql(\"21.00\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[1].country).to.eql(\"BE\");",
									"});",
									"",
									"pm.test(\"Has Bulgaria Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[2].name).to.eql(\"Bulgaria Standard\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[2].rate).to.eql(\"20.00\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[2].country).to.eql(\"BG\");",
									"});",
									"",
									"pm.test(\"Has Czech Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[3].name).to.eql(\"Czech Republic Standard\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[3].rate).to.eql(\"21.00\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[3].country).to.eql(\"CZ\");",
									"});",
									"",
									"pm.test(\"Has Denmark Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[4].name).to.eql(\"Denmark Standard\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[4].rate).to.eql(\"25.00\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[4].country).to.eql(\"DK\");",
									"});",
									"",
									"pm.test(\"Has France Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[5].name).to.eql(\"France Standard\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[5].rate).to.eql(\"20.00\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[5].country).to.eql(\"FR\");",
									"});",
									"",
									"pm.test(\"Has Hungary Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[6].name).to.eql(\"Hungary Standard\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[6].rate).to.eql(\"27.00\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[6].country).to.eql(\"HU\");",
									"});",
									"",
									"pm.test(\"Has Luxembourg Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[7].name).to.eql(\"Luxembourg Standard\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[7].rate).to.eql(\"17.00\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[7].country).to.eql(\"LU\");",
									"});",
									"",
									"pm.test(\"Has Netherlands Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[8].name).to.eql(\"Netherlands Standard\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[8].rate).to.eql(\"21.00\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[8].country).to.eql(\"NL\");",
									"});",
									"",
									"pm.test(\"Has Poland Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[9].name).to.eql(\"Poland Standard\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[9].rate).to.eql(\"23.00\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[9].country).to.eql(\"PL\");",
									"});",
									"",
									"pm.test(\"Has Romania Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[10].name).to.eql(\"Romania Standard\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[10].rate).to.eql(\"20.00\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[10].country).to.eql(\"RO\");",
									"});",
									"",
									"pm.test(\"Has Slovakia Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[11].name).to.eql(\"Slovakia Standard\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[11].rate).to.eql(\"20.00\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[11].country).to.eql(\"SK\");",
									"});",
									"",
									"pm.test(\"Has Slovenia Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[12].name).to.eql(\"Slovenia Standard\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[12].rate).to.eql(\"22.00\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[12].country).to.eql(\"SI\");",
									"});",
									"",
									"pm.test(\"Has Germany Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[13].name).to.eql(\"Germany Reduced\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[13].rate).to.eql(\"7.00\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[13].country).to.eql(\"DE\");",
									"});",
									"",
									"pm.test(\"Has Italy Reduced1 tax rates returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[14].name).to.eql(\"Italy Reduced1\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[14].rate).to.eql(\"4.00\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[14].country).to.eql(\"IT\");",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(jsonData.data[0].links.self).to.eql(",
									"        pm.variables.get(\"url\") + \"/abstract-products/\" + pm.variables.get(\"abstract_sku_with_1product\") + \"/\" + resourceName",
									"    ); ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}/product-tax-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"abstract-products",
								"{{abstract_sku_with_1product}}",
								"product-tax-sets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Request abstract tax sets with not existing abstract sku",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d62c81c-7386-4b2f-901c-33f77f84605d",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error code is 301\", function() {",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"301\");",
									"});",
									"",
									"pm.test(\"Error status is 404\", function() {",
									"    pm.expect(jsonData.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Abstract product is not found.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/abstract-products/434345/product-tax-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"abstract-products",
								"434345",
								"product-tax-sets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Request abstract tax sets with not concrete sku",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d62c81c-7386-4b2f-901c-33f77f84605d",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error code is 301\", function() {",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"301\");",
									"});",
									"",
									"pm.test(\"Error status is 404\", function() {",
									"    pm.expect(jsonData.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Abstract product is not found.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/abstract-products/{{concrete_sku}}/product-tax-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"abstract-products",
								"{{concrete_sku}}",
								"product-tax-sets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Request abstract tax sets with empty sku",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d62c81c-7386-4b2f-901c-33f77f84605d",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error code is 301\", function() {",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"301\");",
									"});",
									"",
									"pm.test(\"Error status is 404\", function() {",
									"    pm.expect(jsonData.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Abstract product is not found.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/abstract-products/ /product-tax-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"abstract-products",
								" ",
								"product-tax-sets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request abstract tax sets with 0 tax rate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9ae34b6-b243-4a47-85b5-1176eff3947a",
								"exec": [
									"const resourceName = 'product-tax-sets';",
									"",
									"let jsonData = pm.response.json(),",
									"    abstractSku = pm.variables.get(\"abstractSKUnoImageSets\"),",
									"    selfLink = pm.variables.get(\"url\") + \"/abstract-products/\" + abstractSku + \"/\" + resourceName;",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data[0].type).to.eql(resourceName);",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    pm.expect(jsonData.data[0].id).to.eql('831f167f-a3ee-505b-9496-e560875506d5');",
									"});",
									"",
									"pm.test(\"Has attributes returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.name).to.eql(\"Tax Exempt\");",
									"});",
									"",
									"pm.test(\"Has zero tax rates returned\", function() {",
									"    let restTaxRates = jsonData.data[0].attributes.restTaxRates;",
									"    pm.expect(restTaxRates[0].name).to.eql(\"Tax Exempt\");",
									"    pm.expect(restTaxRates[0].rate).to.eql(\"0.00\");",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(jsonData.data[0].links.self).to.eql(selfLink);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/abstract-products/{{abstractSKUnoImageSets}}/product-tax-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"abstract-products",
								"{{abstractSKUnoImageSets}}",
								"product-tax-sets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request abstract tax sets with no tax rates assigned",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9ae34b6-b243-4a47-85b5-1176eff3947a",
								"exec": [
									"const resourceName = 'product-tax-sets';",
									"",
									"let jsonData = pm.response.json(),",
									"    abstractSku = pm.variables.get(\"abstractNoTaxRates\"),",
									"    selfLink = pm.variables.get(\"url\") + \"/abstract-products/\" + abstractSku + \"/\" + resourceName;",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data[0].type).to.eql(resourceName);",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    pm.expect(jsonData.data[0].id).to.eql('19f59189-f4ec-5519-a81d-e630c1d89be4');",
									"});",
									"",
									"pm.test(\"Has empty tax rates returned\", function() {",
									"    let restTaxRates = jsonData.data[0].attributes.restTaxRates;",
									"    ",
									"    pm.expect(restTaxRates).to.eql({});",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(jsonData.data[0].links.self).to.eql(selfLink);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/abstract-products/{{abstractNoTaxRates}}/product-tax-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"abstract-products",
								"{{abstractNoTaxRates}}",
								"product-tax-sets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request abstract with include tax sets",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "154c848d-fd4f-4b93-8a40-c7b4ae3c5ac6",
								"exec": [
									"var jsonData = pm.response.json();",
									"var resourceName = 'product-tax-sets';",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct resource type returned\", function () {",
									"    pm.expect(jsonData.data.type).to.equal(\"abstract-products\");",
									"});",
									"",
									"pm.test(\"Has correct resource id returned\", function () {",
									"    pm.expect(jsonData.data.id).to.equal(pm.variables.get(\"abstract_sku_with_1product\"));",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data.relationships['product-tax-sets'].data[0].type).to.eql(resourceName);",
									"    pm.expect(jsonData.included[0].type).to.eql(resourceName);",
									"});",
									"",
									"pm.test(\"Has correct ID returned\", function() {",
									"    pm.expect(jsonData.data.relationships['product-tax-sets'].data[0].id).to.eql(pm.variables.get(\"abstract_sku_with_1product_tax_set_uuid\"));",
									"    pm.expect(jsonData.included[0].id).to.eql(pm.variables.get(\"abstract_sku_with_1product_tax_set_uuid\"));",
									"});",
									"",
									"pm.test(\"Has attributes returned\", function() {",
									"    pm.expect(jsonData.included[0].attributes.name).to.eql(\"Smart Electronics\");",
									"});",
									"",
									"pm.test(\"Has Austria Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[0].name).to.eql(\"Austria Standard\");",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[0].rate).to.eql(\"20.00\");",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[0].country).to.eql(\"AT\");",
									"});",
									"",
									"pm.test(\"Has Belgium Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[1].name).to.eql(\"Belgium Standard\");",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[1].rate).to.eql(\"21.00\");",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[1].country).to.eql(\"BE\");",
									"});",
									"",
									"pm.test(\"Has Bulgaria Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[2].name).to.eql(\"Bulgaria Standard\");",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[2].rate).to.eql(\"20.00\");",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[2].country).to.eql(\"BG\");",
									"});",
									"",
									"pm.test(\"Has Czech Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[3].name).to.eql(\"Czech Republic Standard\");",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[3].rate).to.eql(\"21.00\");",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[3].country).to.eql(\"CZ\");",
									"});",
									"",
									"pm.test(\"Has Denmark Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[4].name).to.eql(\"Denmark Standard\");",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[4].rate).to.eql(\"25.00\");",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[4].country).to.eql(\"DK\");",
									"});",
									"",
									"pm.test(\"Has France Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[5].name).to.eql(\"France Standard\");",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[5].rate).to.eql(\"20.00\");",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[5].country).to.eql(\"FR\");",
									"});",
									"",
									"pm.test(\"Has Hungary Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[6].name).to.eql(\"Hungary Standard\");",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[6].rate).to.eql(\"27.00\");",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[6].country).to.eql(\"HU\");",
									"});",
									"",
									"pm.test(\"Has Luxembourg Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[7].name).to.eql(\"Luxembourg Standard\");",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[7].rate).to.eql(\"17.00\");",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[7].country).to.eql(\"LU\");",
									"});",
									"",
									"pm.test(\"Has Netherlands Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[8].name).to.eql(\"Netherlands Standard\");",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[8].rate).to.eql(\"21.00\");",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[8].country).to.eql(\"NL\");",
									"});",
									"",
									"pm.test(\"Has Poland Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[9].name).to.eql(\"Poland Standard\");",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[9].rate).to.eql(\"23.00\");",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[9].country).to.eql(\"PL\");",
									"});",
									"",
									"pm.test(\"Has Romania Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[10].name).to.eql(\"Romania Standard\");",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[10].rate).to.eql(\"20.00\");",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[10].country).to.eql(\"RO\");",
									"});",
									"",
									"pm.test(\"Has Slovakia Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[11].name).to.eql(\"Slovakia Standard\");",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[11].rate).to.eql(\"20.00\");",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[11].country).to.eql(\"SK\");",
									"});",
									"",
									"pm.test(\"Has Slovenia Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[12].name).to.eql(\"Slovenia Standard\");",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[12].rate).to.eql(\"22.00\");",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[12].country).to.eql(\"SI\");",
									"});",
									"",
									"pm.test(\"Has Germany Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[13].name).to.eql(\"Germany Reduced\");",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[13].rate).to.eql(\"7.00\");",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[13].country).to.eql(\"DE\");",
									"});",
									"",
									"pm.test(\"Has Italy Reduced1 tax rates returned\", function() {",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[14].name).to.eql(\"Italy Reduced1\");",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[14].rate).to.eql(\"4.00\");",
									"    pm.expect(jsonData.included[0].attributes.restTaxRates[14].country).to.eql(\"IT\");",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(jsonData.data.links.self).to.eql(",
									"        pm.variables.get(\"url\") + \"/abstract-products/\" + pm.variables.get(\"abstract_sku_with_1product\")",
									"    ); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}?include=product-tax-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"abstract-products",
								"{{abstract_sku_with_1product}}"
							],
							"query": [
								{
									"key": "include",
									"value": "product-tax-sets"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Request abstract wirh 3 products  tax sets",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "290ccad7-adc1-4541-be1a-8d7ddf16f8a4",
								"exec": [
									"var jsonData = pm.response.json();",
									"var resourceName = 'product-tax-sets';",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data[0].type).to.eql(resourceName);",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"abstract_sku_with_3product_tax_set_uuid\"));",
									"});",
									"",
									"",
									"pm.test(\"Has attributes returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.name).to.eql(\"Communication Electronics\");",
									"});",
									"",
									"pm.test(\"Has Austria Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[0].name).to.eql(\"Austria Standard\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[0].rate).to.eql(\"20.00\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[0].country).to.eql(\"AT\");",
									"});",
									"",
									"pm.test(\"Has Belgium Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[1].name).to.eql(\"Belgium Standard\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[1].rate).to.eql(\"21.00\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[1].country).to.eql(\"BE\");",
									"});",
									"",
									"pm.test(\"Has Bulgaria Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[2].name).to.eql(\"Bulgaria Standard\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[2].rate).to.eql(\"20.00\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[2].country).to.eql(\"BG\");",
									"});",
									"",
									"pm.test(\"Has Czech Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[3].name).to.eql(\"Czech Republic Standard\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[3].rate).to.eql(\"21.00\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[3].country).to.eql(\"CZ\");",
									"});",
									"",
									"pm.test(\"Has Denmark Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[4].name).to.eql(\"Denmark Standard\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[4].rate).to.eql(\"25.00\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[4].country).to.eql(\"DK\");",
									"});",
									"",
									"pm.test(\"Has France Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[5].name).to.eql(\"France Standard\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[5].rate).to.eql(\"20.00\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[5].country).to.eql(\"FR\");",
									"});",
									"",
									"pm.test(\"Has Hungary Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[6].name).to.eql(\"Germany Standard\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[6].rate).to.eql(\"19.00\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[6].country).to.eql(\"DE\");",
									"});",
									"",
									"pm.test(\"Has Luxembourg Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[7].name).to.eql(\"Hungary Standard\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[7].rate).to.eql(\"27.00\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[7].country).to.eql(\"HU\");",
									"});",
									"",
									"pm.test(\"Has Italy Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[8].name).to.eql(\"Italy Standard\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[8].rate).to.eql(\"22.00\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[8].country).to.eql(\"IT\");",
									"});",
									"",
									"pm.test(\"Has Netherlands Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[9].name).to.eql(\"Netherlands Standard\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[9].rate).to.eql(\"21.00\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[9].country).to.eql(\"NL\");",
									"});",
									"",
									"pm.test(\"Has Romania Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[10].name).to.eql(\"Romania Standard\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[10].rate).to.eql(\"20.00\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[10].country).to.eql(\"RO\");",
									"});",
									"",
									"pm.test(\"Has Slovakia Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[11].name).to.eql(\"Slovakia Standard\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[11].rate).to.eql(\"20.00\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[11].country).to.eql(\"SK\");",
									"});",
									"",
									"pm.test(\"Has Slovenia Standard tax rates returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[12].name).to.eql(\"Slovenia Standard\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[12].rate).to.eql(\"22.00\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[12].country).to.eql(\"SI\");",
									"});",
									"",
									"pm.test(\"Has Luxembourg Reduced1 tax rates returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[13].name).to.eql(\"Luxembourg Reduced1\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[13].rate).to.eql(\"3.00\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[13].country).to.eql(\"LU\");",
									"});",
									"",
									"pm.test(\"Has Poland Reduced1 tax rates returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[14].name).to.eql(\"Poland Reduced1\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[14].rate).to.eql(\"5.00\");",
									"    pm.expect(jsonData.data[0].attributes.restTaxRates[14].country).to.eql(\"PL\");",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(jsonData.data[0].links.self).to.eql(",
									"        pm.variables.get(\"url\") +\"/abstract-products/\" + pm.variables.get(\"abstract_sku_with_3product\") + \"/\" + resourceName",
									"    ); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/abstract-products/{{abstract_sku_with_3product}}/product-tax-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"abstract-products",
								"{{abstract_sku_with_3product}}",
								"product-tax-sets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Request abstract tax sets with broken URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a8cdf0fc-8ab6-4ca6-b96b-6e11a66887e6",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error status is 404\", function() {",
									"    pm.expect(jsonData.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/abstract-p3roducts/{{abstract_sku_with_3product}}/product-tax-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"abstract-p3roducts",
								"{{abstract_sku_with_3product}}",
								"product-tax-sets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Request abstract tax sets with PUT method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a31d9294-6fb3-4bfd-94fb-6fbef38e4685",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error status is 404\", function() {",
									"    pm.expect(jsonData.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9, en;q=0.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"register-customer\",\"attributes\":{\"salutation\":\"{{salutation}}\",\"username\":\"test\",\"firstName\":\"{{firstName}}\",\"lastName\":\"{{lastName}}\",\"email\":\"{{email}}\",\"password\":\"{{password}}\",\"passwordConfirmation\":\"{{password}}\",\"acceptedTerms\":true}}}"
						},
						"url": {
							"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}/product-tax-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"abstract-products",
								"{{abstract_sku_with_1product}}",
								"product-tax-sets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Request abstract tax sets with PATCH method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a31d9294-6fb3-4bfd-94fb-6fbef38e4685",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error status is 404\", function() {",
									"    pm.expect(jsonData.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9, en;q=0.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"register-customer\",\"attributes\":{\"salutation\":\"{{salutation}}\",\"username\":\"test\",\"firstName\":\"{{firstName}}\",\"lastName\":\"{{lastName}}\",\"email\":\"{{email}}\",\"password\":\"{{password}}\",\"passwordConfirmation\":\"{{password}}\",\"acceptedTerms\":true}}}"
						},
						"url": {
							"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}/product-tax-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"abstract-products",
								"{{abstract_sku_with_1product}}",
								"product-tax-sets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Request abstract tax sets with POST method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a31d9294-6fb3-4bfd-94fb-6fbef38e4685",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error status is 404\", function() {",
									"    pm.expect(jsonData.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9, en;q=0.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"register-customer\",\"attributes\":{\"salutation\":\"{{salutation}}\",\"username\":\"test\",\"firstName\":\"{{firstName}}\",\"lastName\":\"{{lastName}}\",\"email\":\"{{email}}\",\"password\":\"{{password}}\",\"passwordConfirmation\":\"{{password}}\",\"acceptedTerms\":true}}}"
						},
						"url": {
							"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}/product-tax-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"abstract-products",
								"{{abstract_sku_with_1product}}",
								"product-tax-sets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Request abstract tax sets with DELETE method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a31d9294-6fb3-4bfd-94fb-6fbef38e4685",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error status is 404\", function() {",
									"    pm.expect(jsonData.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9, en;q=0.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"type\":\"register-customer\",\"attributes\":{\"salutation\":\"{{salutation}}\",\"username\":\"test\",\"firstName\":\"{{firstName}}\",\"lastName\":\"{{lastName}}\",\"email\":\"{{email}}\",\"password\":\"{{password}}\",\"passwordConfirmation\":\"{{password}}\",\"acceptedTerms\":true}}}"
						},
						"url": {
							"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}/product-tax-sets",
							"host": [
								"{{url}}"
							],
							"path": [
								"abstract-products",
								"{{abstract_sku_with_1product}}",
								"product-tax-sets"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3ea6b277-61b8-4cef-b497-ff112e7896c7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ea5535be-053c-4c8e-a13f-ffcfd615e43d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Products - Price",
			"item": [
				{
					"name": "Request the abstract product ",
					"item": [
						{
							"name": "Request product's prices - by abstract sku",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1bb37dd1-807b-4994-918f-1adc6bc86804",
										"exec": [
											"const resourceName = \"abstract-product-prices\";",
											"",
											"let jsonData = pm.response.json(),",
											"    selfLink = pm.variables.get(\"url\") + \"/abstract-products/\" + pm.variables.get(\"abstract_sku_with_3product\") + \"/\" + resourceName;",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"abstract_sku_with_3product\"));",
											"});",
											"",
											"pm.test(\"Has price returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.price).to.eql(42502);",
											"});",
											"",
											"pm.test(\"Has price default grss returned\", function() {",
											"    let prices = jsonData.data[0].attributes.prices;",
											"    ",
											"    pm.expect(prices[0].priceTypeName).to.eql(\"DEFAULT\");",
											"    pm.expect(prices[0].netAmount).to.eql(null);",
											"    pm.expect(prices[0].grossAmount).to.eql(42502);",
											"});",
											"",
											"pm.test(\"Has self 1 link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(selfLink);",
											"});",
											"",
											"pm.test(\"Has self 2 link\", function() {",
											"    pm.expect(jsonData.links.self).to.eql(selfLink);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_3product}}/abstract-product-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_3product}}",
										"abstract-product-prices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request product's prices - different stores - DE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1bb37dd1-807b-4994-918f-1adc6bc86804",
										"exec": [
											"const resourceName = \"abstract-product-prices\";",
											"",
											"let jsonData = pm.response.json(),",
											"    selfLink = pm.variables.get(\"url\") + \"/abstract-products/\" + pm.variables.get(\"abstract_sku_with_3product\") + \"/\" + resourceName;",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"abstract_sku_with_3product\"));",
											"});",
											"",
											"pm.test(\"Has price returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.price).to.eql(42502);",
											"});",
											"",
											"pm.test(\"Has price default grss returned\", function() {",
											"    let prices = jsonData.data[0].attributes.prices;",
											"    ",
											"    pm.expect(prices[0].priceTypeName).to.eql(\"DEFAULT\");",
											"    pm.expect(prices[0].netAmount).to.eql(null);",
											"    pm.expect(prices[0].grossAmount).to.eql(42502);",
											"});",
											"",
											"pm.test(\"Has self 1 link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(selfLink);",
											"});",
											"",
											"pm.test(\"Has self 2 link\", function() {",
											"    pm.expect(jsonData.links.self).to.eql(selfLink);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_3product}}/abstract-product-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_3product}}",
										"abstract-product-prices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request price resource with concrete sku",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0238718-e355-44c9-92d3-27ae8cc1e3b0",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error code is 307\", function() {",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"307\");",
											"});",
											"",
											"pm.test(\"Error status code is 404\", function () {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Can`t find abstract product prices.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{concrete_sku}}/abstract-product-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{concrete_sku}}",
										"abstract-product-prices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request price resource with  not existing abstract sku",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0238718-e355-44c9-92d3-27ae8cc1e3b0",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error code is 307\", function() {",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"307\");",
											"});",
											"",
											"pm.test(\"Error status code is 404\", function () {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Can`t find abstract product prices.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{notExistingSKU}}/abstract-product-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{notExistingSKU}}",
										"abstract-product-prices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request price resource with empty abstract sku",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0238718-e355-44c9-92d3-27ae8cc1e3b0",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error code is 311\", function() {",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"311\");",
											"});",
											"",
											"pm.test(\"Error status code is 400\", function () {",
											"    pm.expect(jsonData.errors[0].status).to.eql(400);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Abstract product sku is not specified.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products//abstract-product-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"",
										"abstract-product-prices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request price resource - only Default prices",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79ad535f-1b55-42b8-9dcf-721068ab2eb8",
										"exec": [
											"const resourceName = \"abstract-product-prices\";",
											"",
											"let jsonData = pm.response.json(),",
											"    selfLink = pm.variables.get(\"url\") + \"/abstract-products/\" + pm.variables.get(\"abstract_sku_with_1product\") + \"/\" + resourceName;",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"abstract_sku_with_1product\"));",
											"});",
											"",
											"pm.test(\"Has price returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.price).to.eql(19568);",
											"});",
											"",
											"pm.test(\"Has price default gross returned\", function() {",
											"    let price = _.first(jsonData.data[0].attributes.prices);",
											"",
											"    pm.expect(price.priceTypeName).to.eql(\"DEFAULT\");",
											"    pm.expect(price.netAmount).to.eql(null);",
											"    pm.expect(price.grossAmount).to.eql(19568);",
											"});",
											"",
											"pm.test(\"ORIGINAL prices are not listed\", function() {",
											"    let originalPrice = _.find(jsonData.data[0].attributes.prices, {",
											"        \"priceTypeName\": \"ORIGINAL\"",
											"    });",
											"",
											"    pm.expect(originalPrice).to.not.be;",
											"});",
											"",
											"pm.test(\"Has self 1 link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(selfLink);",
											"});",
											"",
											"pm.test(\"Has self 2 link\", function() {",
											"    pm.expect(jsonData.links.self).to.eql(selfLink);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}/abstract-product-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}",
										"abstract-product-prices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request price resource - only Original prices",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "105ac924-48d3-49d1-81d4-3d36e48a5665",
										"exec": [
											"const resourceName = \"abstract-product-prices\";",
											"",
											"let jsonData = pm.response.json(),",
											"    selfLink = pm.variables.get(\"url\") + \"/abstract-products/\" + pm.variables.get(\"abstractSKUnoImageSets\") + \"/\" + resourceName;",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"abstractSKUnoImageSets\"));",
											"});",
											"",
											"pm.test(\"Has price returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.price).to.eql(225);",
											"});",
											"",
											"pm.test(\"Has orginal price returned\", function() {",
											"    let originalPrice = _.find(jsonData.data[0].attributes.prices, {",
											"        \"priceTypeName\": \"ORIGINAL\"",
											"    });",
											"",
											"    pm.expect(originalPrice.priceTypeName).to.eql(\"ORIGINAL\");",
											"    pm.expect(originalPrice.netAmount).to.eql(255);",
											"    pm.expect(originalPrice.grossAmount).to.eql(225);",
											"});",
											"",
											"pm.test(\"Has no default price returned\", function() {",
											"    let defaultPrice = _.find(jsonData.data[0].attributes.prices, {",
											"        \"priceTypeName\": \"DEFAULT\"",
											"    });",
											"",
											"    pm.expect(defaultPrice.priceTypeName).to.not.be(defaultPrice);",
											"});",
											"",
											"pm.test(\"Has self 1 link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(selfLink);",
											"});",
											"",
											"pm.test(\"Has self 2 link\", function() {",
											"    pm.expect(jsonData.links.self).to.eql(selfLink);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstractSKUnoImageSets}}/abstract-product-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstractSKUnoImageSets}}",
										"abstract-product-prices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request price resource - only Net prices",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "105ac924-48d3-49d1-81d4-3d36e48a5665",
										"exec": [
											"const resourceName = \"abstract-product-prices\";",
											"",
											"let jsonData = pm.response.json(),",
											"    selfLink = pm.variables.get(\"url\") + \"/abstract-products/\" + pm.variables.get(\"abstractSkuHas2ImageSets\") + \"/\" + resourceName;",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"abstractSkuHas2ImageSets\"));",
											"});",
											"",
											"pm.test(\"Has price returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.price).to.eql(225);",
											"});",
											"",
											"",
											"pm.test(\"Has default net price returned\", function() {",
											"    let originalPrice = _.find(jsonData.data[0].attributes.prices, {",
											"        \"priceTypeName\": \"DEFAULT\"",
											"    });",
											"",
											"    pm.expect(originalPrice.priceTypeName).to.eql(\"DEFAULT\");",
											"    pm.expect(originalPrice.netAmount).to.eql(225);",
											"});",
											"",
											"pm.test(\"Has no origin gross price returned\", function() {",
											"    let defaultPrice = _.find(jsonData.data[0].attributes.prices, {",
											"        \"priceTypeName\": \"ORIGIN\"",
											"    });",
											"",
											"    pm.expect(defaultPrice).to.not.be;",
											"});",
											"",
											"",
											"pm.test(\"Has self 1 link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(selfLink);",
											"});",
											"",
											"pm.test(\"Has self 2 link\", function() {",
											"    pm.expect(jsonData.links.self).to.eql(selfLink + '?priceMode=NET_MODE');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstractSkuHas2ImageSets}}/abstract-product-prices?priceMode=NET_MODE",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstractSkuHas2ImageSets}}",
										"abstract-product-prices"
									],
									"query": [
										{
											"key": "priceMode",
											"value": "NET_MODE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Request price resource - no prices available",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "105ac924-48d3-49d1-81d4-3d36e48a5665",
										"exec": [
											"const resourceName = \"abstract-product-prices\";",
											"",
											"let jsonData = pm.response.json(),",
											"    selfLink = pm.variables.get(\"url\") + \"/abstract-products/\" + pm.variables.get(\"abstractSKUnoImageSets\") + \"/\" + resourceName;",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"abstractSKUnoImageSets\"));",
											"});",
											"",
											"pm.test(\"Has no prices\", function() {",
											"    pm.expect(jsonData.data[0].attributes.prices).to.eql({});",
											"});",
											"",
											"pm.test(\"Has self 1 link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(selfLink);",
											"});",
											"",
											"pm.test(\"Has self 2 link\", function() {",
											"    pm.expect(jsonData.links.self).to.eql(selfLink);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstractSKUnoImageSets}}/abstract-product-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstractSKUnoImageSets}}",
										"abstract-product-prices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request price resource with abstract and 1 concrete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79ad535f-1b55-42b8-9dcf-721068ab2eb8",
										"exec": [
											"var jsonData = pm.response.json();",
											"var resourceName = \"abstract-product-prices\";",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"abstract_sku_with_1product\"));",
											"});",
											"",
											"pm.test(\"Has price returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.price).to.eql(19568);",
											"});",
											"",
											"pm.test(\"Has price default grss returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.prices[0].priceTypeName).to.eql(\"DEFAULT\");",
											"    pm.expect(jsonData.data[0].attributes.prices[0].netAmount).to.eql(null);",
											"    pm.expect(jsonData.data[0].attributes.prices[0].grossAmount).to.eql(19568);",
											"});",
											"",
											"pm.test(\"Has self 1 link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(pm.variables.get(\"url\") + \"/abstract-products/\" + pm.variables.get(\"abstract_sku_with_1product\") + \"/abstract-product-prices\");",
											"});",
											"",
											"pm.test(\"Has self 2 link\", function() {",
											"    pm.expect(jsonData.links.self).to.eql(",
											"        pm.variables.get(\"url\") + \"/abstract-products/\" + pm.variables.get(\"abstract_sku_with_1product\") + \"/\" + resourceName",
											"    );",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}/abstract-product-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}",
										"abstract-product-prices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request abstract price using special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f29e453b-4022-4feb-844a-a6923b4d1521",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error code is 307\", function() {",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"307\");",
											"});",
											"",
											"pm.test(\"Error status code is 404\", function () {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Can`t find abstract product prices.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/;.;/abstract-product-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										";.;",
										"abstract-product-prices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request abstract price using spaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "66f444f0-4fc6-4f05-bff9-d168ead1ee9c",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error code is 307\", function() {",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"307\");",
											"});",
											"",
											"pm.test(\"Error status code is 404\", function () {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Can`t find abstract product prices.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/      /abstract-product-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"      ",
										"abstract-product-prices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request abstract price with broken URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "098c270a-c7b8-4216-9ba6-c2fb8910af13",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}/abstract-pro1duct-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}",
										"abstract-pro1duct-prices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request abstract price resource using POST method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59482c3e-4a73-454f-858f-366e6f98ac92",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, de;q=0.9, en;q=0.1"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"access-tokens\",\n    \"attributes\": {\n        \"username\":\"spencor.hopkin@spryker.com\",\n        \"password\":\"change123\"\n    }\n  }\n}\n\n\n\n\n"
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}/abstract-product-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}",
										"abstract-product-prices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request abstract price resource using PATCH method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59482c3e-4a73-454f-858f-366e6f98ac92",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, de;q=0.9, en;q=0.1"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"access-tokens\",\n    \"attributes\": {\n        \"username\":\"spencor.hopkin@spryker.com\",\n        \"password\":\"change123\"\n    }\n  }\n}\n\n\n\n\n"
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}/abstract-product-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}",
										"abstract-product-prices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request abstract price using DELETE method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5eaa0f5a-9c42-4b59-bb1b-e6db29905fde",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}/abstract-product-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}",
										"abstract-product-prices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request abstract price resource using PUT method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90c3df2c-4127-4b31-a1e0-4d94cd07593a",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, de;q=0.9, en;q=0.1"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"access-tokens\",\n    \"attributes\": {\n        \"username\":\"spencor.hopkin@spryker.com\",\n        \"password\":\"change123\"\n    }\n  }\n}\n\n\n\n\n"
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}/abstract-product-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}",
										"abstract-product-prices"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Request the concrete product ",
					"item": [
						{
							"name": "Requst product's prices - by concrete sku",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b74e709f-c0db-4547-9e5d-f2853132b0aa",
										"exec": [
											"var jsonData = pm.response.json();",
											"var resourceName = \"concrete-product-prices\";",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"concrete_sku\"));",
											"});",
											"",
											"pm.test(\"Has price returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.price).to.eql(42502);",
											"});",
											"",
											"pm.test(\"Has price default grss returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.prices[0].priceTypeName).to.eql(\"DEFAULT\");",
											"    pm.expect(jsonData.data[0].attributes.prices[0].netAmount).to.eql(null);",
											"    pm.expect(jsonData.data[0].attributes.prices[0].grossAmount).to.eql(42502);",
											"});",
											"",
											"pm.test(\"Has self 1 link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(pm.variables.get(\"url\") + \"/concrete-products/\" + pm.variables.get(\"concrete_sku\") + \"/\" + resourceName); ",
											"});",
											"",
											"pm.test(\"Has self 2 link\", function() {",
											"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/concrete-products/\" + pm.variables.get(\"concrete_sku\") + \"/\" + resourceName); ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concrete_sku}}/concrete-product-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concrete_sku}}",
										"concrete-product-prices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request product's prices - by abstract sku",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4751c79-2fd2-46b4-a2a5-c4932655cae5",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error code is 308\", function() {",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"308\");",
											"});",
											"",
											"pm.test(\"Error status code is 404\", function () {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Can`t find concrete product prices.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{abstract_sku_with_1product}}/concrete-product-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{abstract_sku_with_1product}}",
										"concrete-product-prices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request product's prices - not existing concrete sku",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4751c79-2fd2-46b4-a2a5-c4932655cae5",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error code is 308\", function() {",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"308\");",
											"});",
											"",
											"pm.test(\"Error status code is 404\", function () {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Can`t find concrete product prices.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/345345345_234/concrete-product-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"345345345_234",
										"concrete-product-prices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request product's prices - empty concrete sku",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4751c79-2fd2-46b4-a2a5-c4932655cae5",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error code is 312\", function() {",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"312\");",
											"});",
											"",
											"pm.test(\"Error status code is 400\", function () {",
											"    pm.expect(jsonData.errors[0].status).to.eql(400);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Concrete product sku is not specified.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products//concrete-product-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"",
										"concrete-product-prices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request price resource - only Default prices",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79ad535f-1b55-42b8-9dcf-721068ab2eb8",
										"exec": [
											"const resourceName = \"concrete-product-prices\";",
											"",
											"let jsonData = pm.response.json(),",
											"    selfLink = pm.variables.get(\"url\") + \"/concrete-products/\" + pm.variables.get(\"concrete_sku\") + \"/\" + resourceName,",
											"    queryString = \"?currency=CHF\";",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"concrete_sku\"));",
											"});",
											"",
											"pm.test(\"Has price returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.price).to.eql(48877);",
											"});",
											"",
											"pm.test(\"Has price default gross returned\", function() {",
											"    let price = _.first(jsonData.data[0].attributes.prices);",
											"",
											"    pm.expect(price.priceTypeName).to.eql(\"DEFAULT\");",
											"    pm.expect(price.netAmount).to.eql(null);",
											"    pm.expect(price.grossAmount).to.eql(48877);",
											"});",
											"",
											"pm.test(\"ORIGINAL prices are not listed\", function() {",
											"    let originalPrice = _.find(jsonData.data[0].attributes.prices, {",
											"        \"priceTypeName\": \"ORIGINAL\"",
											"    });",
											"",
											"    pm.expect(originalPrice).to.not.be;",
											"});",
											"",
											"pm.test(\"Has self 1 link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(selfLink);",
											"});",
											"",
											"pm.test(\"Has self 2 link\", function() {",
											"    pm.expect(jsonData.links.self).to.eql(selfLink + queryString);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concrete_sku}}/concrete-product-prices?currency=CHF",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concrete_sku}}",
										"concrete-product-prices"
									],
									"query": [
										{
											"key": "currency",
											"value": "CHF"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Request price resource - only Original prices",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "105ac924-48d3-49d1-81d4-3d36e48a5665",
										"exec": [
											"const resourceName = \"concrete-product-prices\";",
											"",
											"let jsonData = pm.response.json(),",
											"    selfLink = pm.variables.get(\"url\") + \"/concrete-products/\" + pm.variables.get(\"concreteSkuNoImageSets\") + \"/\" + resourceName;",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"concreteSkuNoImageSets\"));",
											"});",
											"",
											"pm.test(\"Has price returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.price).to.eql(225);",
											"});",
											"",
											"pm.test(\"Has orginal price returned\", function() {",
											"    let originalPrice = _.find(jsonData.data[0].attributes.prices, {",
											"        \"priceTypeName\": \"ORIGINAL\"",
											"    });",
											"",
											"    pm.expect(originalPrice.priceTypeName).to.eql(\"ORIGINAL\");",
											"    pm.expect(originalPrice.netAmount).to.eql(255);",
											"    pm.expect(originalPrice.grossAmount).to.eql(225);",
											"});",
											"",
											"pm.test(\"Has no default price returned\", function() {",
											"    let defaultPrice = _.find(jsonData.data[0].attributes.prices, {",
											"        \"priceTypeName\": \"DEFAULT\"",
											"    });",
											"",
											"    pm.expect(defaultPrice.priceTypeName).to.not.be(defaultPrice);",
											"});",
											"",
											"pm.test(\"Has self 1 link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(selfLink);",
											"});",
											"",
											"pm.test(\"Has self 2 link\", function() {",
											"    pm.expect(jsonData.links.self).to.eql(selfLink);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concreteSkuNoImageSets}}/concrete-product-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concreteSkuNoImageSets}}",
										"concrete-product-prices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request price resource - only Net prices",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "105ac924-48d3-49d1-81d4-3d36e48a5665",
										"exec": [
											"const resourceName = \"concrete-product-prices\";",
											"",
											"let jsonData = pm.response.json(),",
											"    selfLink = pm.variables.get(\"url\") + \"/concrete-products/\" + pm.variables.get(\"concreteSkuHas2ImageSets\") + \"/\" + resourceName;",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"concreteSkuHas2ImageSets\"));",
											"});",
											"",
											"pm.test(\"Has price returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.price).to.eql(225);",
											"});",
											"",
											"",
											"pm.test(\"Has default net price returned\", function() {",
											"    let originalPrice = _.find(jsonData.data[0].attributes.prices, {",
											"        \"priceTypeName\": \"DEFAULT\"",
											"    });",
											"",
											"    pm.expect(originalPrice.priceTypeName).to.eql(\"DEFAULT\");",
											"    pm.expect(originalPrice.netAmount).to.eql(225);",
											"});",
											"",
											"pm.test(\"Has no origin gross price returned\", function() {",
											"    let defaultPrice = _.find(jsonData.data[0].attributes.prices, {",
											"        \"priceTypeName\": \"ORIGIN\"",
											"    });",
											"",
											"    pm.expect(defaultPrice).to.not.be;",
											"});",
											"",
											"",
											"pm.test(\"Has self 1 link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(selfLink);",
											"});",
											"",
											"pm.test(\"Has self 2 link\", function() {",
											"    pm.expect(jsonData.links.self).to.eql(selfLink + '?priceMode=NET_MODE');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concreteSkuHas2ImageSets}}/concrete-product-prices?priceMode=NET_MODE",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concreteSkuHas2ImageSets}}",
										"concrete-product-prices"
									],
									"query": [
										{
											"key": "priceMode",
											"value": "NET_MODE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Request price resource - no prices available",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "105ac924-48d3-49d1-81d4-3d36e48a5665",
										"exec": [
											"const resourceName = \"concrete-product-prices\";",
											"",
											"let jsonData = pm.response.json(),",
											"    selfLink = pm.variables.get(\"url\") + \"/concrete-products/\" + pm.variables.get(\"concreteSkuNoImageSets\") + \"/\" + resourceName;",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"concreteSkuNoImageSets\"));",
											"});",
											"",
											"pm.test(\"Has no prices\", function() {",
											"    pm.expect(jsonData.data[0].attributes.prices).to.eql({});",
											"});",
											"",
											"pm.test(\"Has self 1 link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(selfLink);",
											"});",
											"",
											"pm.test(\"Has self 2 link\", function() {",
											"    pm.expect(jsonData.links.self).to.eql(selfLink);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concreteSkuNoImageSets}}/concrete-product-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concreteSkuNoImageSets}}",
										"concrete-product-prices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Requst product's prices - inherite prices",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b74e709f-c0db-4547-9e5d-f2853132b0aa",
										"exec": [
											"var jsonData = pm.response.json();",
											"var resourceName = \"concrete-product-prices\";",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"concrete_sku\"));",
											"});",
											"",
											"pm.test(\"Has price returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.price).to.eql(42502);",
											"});",
											"",
											"pm.test(\"Has price default grss returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.prices[0].priceTypeName).to.eql(\"DEFAULT\");",
											"    pm.expect(jsonData.data[0].attributes.prices[0].netAmount).to.eql(null);",
											"    pm.expect(jsonData.data[0].attributes.prices[0].grossAmount).to.eql(42502);",
											"});",
											"",
											"pm.test(\"Has self 1 link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(pm.variables.get(\"url\") + \"/concrete-products/\" + pm.variables.get(\"concrete_sku\") + \"/\" + resourceName); ",
											"});",
											"",
											"pm.test(\"Has self 2 link\", function() {",
											"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/concrete-products/\" + pm.variables.get(\"concrete_sku\") + \"/\" + resourceName); ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concrete_sku}}/concrete-product-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concrete_sku}}",
										"concrete-product-prices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request price resource concrete with error in request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "567b5a86-f146-4742-a634-0313ad4dabba",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concrete_sku}}/concrete-prodwuct-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concrete_sku}}",
										"concrete-prodwuct-prices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request price resource concrete with special charters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee23a5e5-43c0-49f9-a709-36367bb86357",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error code is 302\", function() {",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"302\");",
											"});",
											"",
											"pm.test(\"Error status code is 404\", function () {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Concrete product is not found.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/!@#$%^&*/concrete-product-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"!@"
									],
									"hash": "$%^&*/concrete-product-prices"
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request price resource concrete with spcases",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee23a5e5-43c0-49f9-a709-36367bb86357",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error code is 308\", function() {",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"308\");",
											"});",
											"",
											"pm.test(\"Error status code is 404\", function () {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Can`t find concrete product prices.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/      /concrete-product-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"      ",
										"concrete-product-prices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request concrete price resource using POST method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59482c3e-4a73-454f-858f-366e6f98ac92",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, de;q=0.9, en;q=0.1"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"access-tokens\",\n    \"attributes\": {\n        \"username\":\"spencor.hopkin@spryker.com\",\n        \"password\":\"change123\"\n    }\n  }\n}\n\n\n\n\n"
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concrete_sku}}/concrete-prodwuct-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concrete_sku}}",
										"concrete-prodwuct-prices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request concrete price resource using PUT method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59482c3e-4a73-454f-858f-366e6f98ac92",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, de;q=0.9, en;q=0.1"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"access-tokens\",\n    \"attributes\": {\n        \"username\":\"spencor.hopkin@spryker.com\",\n        \"password\":\"change123\"\n    }\n  }\n}\n\n\n\n\n"
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concrete_sku}}/concrete-prodwuct-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concrete_sku}}",
										"concrete-prodwuct-prices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request concrete price resource using PATCH method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59482c3e-4a73-454f-858f-366e6f98ac92",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, de;q=0.9, en;q=0.1"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"access-tokens\",\n    \"attributes\": {\n        \"username\":\"spencor.hopkin@spryker.com\",\n        \"password\":\"change123\"\n    }\n  }\n}\n\n\n\n\n"
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concrete_sku}}/concrete-prodwuct-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concrete_sku}}",
										"concrete-prodwuct-prices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request concrete price resource using DELETE method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59482c3e-4a73-454f-858f-366e6f98ac92",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, de;q=0.9, en;q=0.1"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concrete_sku}}/concrete-prodwuct-prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concrete_sku}}",
										"concrete-prodwuct-prices"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c2ce01c6-5d39-49c3-8fcc-598f5bdb6dc7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "45ba8e64-d8c0-48af-9f98-a9b0408f7e03",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Products - Image Sets",
			"item": [
				{
					"name": "Get image set for abstact product ",
					"item": [
						{
							"name": "Request abstract product image set by abstract sku - product available",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e1bbf86-1d26-4486-99a7-d74fe5996aaf",
										"exec": [
											"const resourceName = \"abstract-product-image-sets\";",
											"",
											"let jsonData = pm.response.json(),",
											"    abstractSku = pm.variables.get(\"abstract_sku_with_1product\"),",
											"    selfLink = pm.variables.get(\"url\") + \"/abstract-products/\" + abstractSku + \"/\" + resourceName;",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(resourceName);",
											"});",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(abstractSku);",
											"});",
											"",
											"pm.test(\"Has name type returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.imageSets[0].name).to.eql(\"default\");",
											"});",
											"",
											"pm.test(\"Has correct images for products\", function() {",
											"    let image = _.get(jsonData,'data[0].attributes.imageSets[0].images[0]');",
											"    pm.expect(image.externalUrlLarge).to.eql(\"//images.icecat.biz/img/norm/high/15743_12554247-9579.jpg\");",
											"    pm.expect(image.externalUrlSmall).to.eql(\"//images.icecat.biz/img/norm/medium/15743_12554247-9579.jpg\");",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(selfLink);",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.links.self).to.eql(selfLink);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}/abstract-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}",
										"abstract-product-image-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative.Request abstract product image set with not existing abstract sku - product doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e1bbf86-1d26-4486-99a7-d74fe5996aaf",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Has correct error message returned\", function() {",
											"    let jsonData = pm.response.json(),",
											"        error = _.first(jsonData.errors);",
											"        ",
											"    pm.expect(error.code).to.be.eql(\"303\");",
											"    pm.expect(error.detail).to.be.eql(\"Can`t find abstract product image sets.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/not_exiting_sku/abstract-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"not_exiting_sku",
										"abstract-product-image-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract product image set with product has no image set",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e1bbf86-1d26-4486-99a7-d74fe5996aaf",
										"exec": [
											"const resourceName = \"abstract-product-image-sets\";",
											"",
											"let jsonData = pm.response.json(),",
											"    abstractSku = pm.variables.get('abstractSKUnoImageSets'),",
											"    selfLink = pm.variables.get(\"url\") + \"/abstract-products/\" + abstractSku + \"/\" + resourceName;",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(resourceName);",
											"});",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(abstractSku);",
											"});",
											"",
											"pm.test(\"Has no image set\", function() {",
											"    let imageSets = _.get(jsonData,'data[0].attributes.imageSets');",
											"    pm.expect(imageSets).to.eql({});",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(selfLink);",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.links.self).to.eql(selfLink);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstractSKUnoImageSets}}/abstract-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstractSKUnoImageSets}}",
										"abstract-product-image-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract product image set with product has several image sets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e1bbf86-1d26-4486-99a7-d74fe5996aaf",
										"exec": [
											"const resourceName = \"abstract-product-image-sets\";",
											"",
											"let jsonData = pm.response.json(),",
											"    abstractSku = pm.variables.get(\"abstractSkuHas2ImageSets\"),",
											"    selfLink = pm.variables.get(\"url\") + \"/abstract-products/\" + abstractSku + \"/\" + resourceName;",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(resourceName);",
											"});",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(abstractSku);",
											"});",
											"",
											"pm.test(\"Has two image sets\", function() {",
											"    let imageSets = _.get(jsonData,'data[0].attributes.imageSets');",
											"    pm.expect(imageSets).to.have.lengthOf(2);",
											"});",
											"",
											"pm.test(\"Has correct images for products\", function() {",
											"    let imageSets = jsonData.data[0].attributes.imageSets;",
											"    ",
											"    pm.expect(imageSets[0].images[0].externalUrlLarge).to.eql(\"//images.icecat.biz/img/gallery_mediums/59122736_6969523881.jpg\");",
											"    pm.expect(imageSets[0].images[0].externalUrlSmall).to.eql(\"//images.icecat.biz/img/gallery_raw/59122736_6969523881.png\");",
											"    ",
											"    pm.expect(imageSets[1].images[0].externalUrlLarge).to.eql(\"//images.icecat.biz/img/gallery_mediums/59122736_6969523881.jpg\");",
											"    pm.expect(imageSets[1].images[0].externalUrlSmall).to.eql(\"//images.icecat.biz/img/gallery_raw/59122736_6969523881.png\");",
											"    ",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(selfLink);",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.links.self).to.eql(selfLink);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstractSkuHas2ImageSets}}/abstract-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstractSkuHas2ImageSets}}",
										"abstract-product-image-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative.Request abstract product image set with concrete sku",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e1bbf86-1d26-4486-99a7-d74fe5996aaf",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Has correct error message returned\", function() {",
											"    let jsonData = pm.response.json(),",
											"        error = _.first(jsonData.errors);",
											"        ",
											"    pm.expect(error.code).to.be.eql(\"303\");",
											"    pm.expect(error.detail).to.be.eql(\"Can`t find abstract product image sets.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{concreteSKU3}}/abstract-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{concreteSKU3}}",
										"abstract-product-image-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative.Request abstract product image set with  product deactivated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e1bbf86-1d26-4486-99a7-d74fe5996aaf",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Has correct error message returned\", function() {",
											"    let jsonData = pm.response.json(),",
											"        error = _.first(jsonData.errors);",
											"        ",
											"    pm.expect(error.code).to.be.eql(\"303\");",
											"    pm.expect(error.detail).to.be.eql(\"Can`t find abstract product image sets.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{concreteSKU3}}/abstract-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{concreteSKU3}}",
										"abstract-product-image-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request image set for abstract with 1 concrete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e1bbf86-1d26-4486-99a7-d74fe5996aaf",
										"exec": [
											"var jsonData = pm.response.json();",
											"var resourceName = \"abstract-product-image-sets\";",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(resourceName);",
											"});",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"abstract_sku_with_1product\"));",
											"});",
											"",
											"pm.test(\"Has name type returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.imageSets[0].name).to.eql(\"default\"); ",
											"});",
											"",
											"pm.test(\"Has correct images for products\", function() {",
											"    pm.expect(jsonData.data[0].attributes.imageSets[0].images[0].externalUrlLarge).to.eql(\"//images.icecat.biz/img/norm/high/15743_12554247-9579.jpg\");",
											"    pm.expect(jsonData.data[0].attributes.imageSets[0].images[0].externalUrlSmall).to.eql(\"//images.icecat.biz/img/norm/medium/15743_12554247-9579.jpg\");",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(pm.variables.get(\"url\") + \"/abstract-products/\" +  pm.variables.get(\"abstract_sku_with_1product\") + \"/\" + resourceName);",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/abstract-products/\" +  pm.variables.get(\"abstract_sku_with_1product\") + \"/\" + resourceName);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}/abstract-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}",
										"abstract-product-image-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request image set for abstract with 3 concrete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e927c7b2-6235-4337-9aa7-0b5b20e5bf60",
										"exec": [
											"var jsonData = pm.response.json();",
											"var resourceName = \"abstract-product-image-sets\";",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(\"abstract-product-image-sets\");",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"abstract_sku_with_3product\"));",
											"});",
											"",
											"pm.test(\"Has name type returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.imageSets[0].name).to.eql(\"default\"); ",
											"});",
											"",
											"pm.test(\"Has correct images for products\", function() {",
											"    pm.expect(jsonData.data[0].attributes.imageSets[0].images[0].externalUrlLarge).to.eql(\"//images.icecat.biz/img/norm/high/24867659-4916.jpg\");",
											"    pm.expect(jsonData.data[0].attributes.imageSets[0].images[0].externalUrlSmall).to.eql(\"//images.icecat.biz/img/norm/medium/24867659-4916.jpg\");",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(pm.variables.get(\"url\") + \"/abstract-products/\" +  pm.variables.get(\"abstract_sku_with_3product\") + \"/\" + resourceName);",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/abstract-products/\" +  pm.variables.get(\"abstract_sku_with_3product\") + \"/\" + resourceName);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_3product}}/abstract-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_3product}}",
										"abstract-product-image-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract with 1 concrete and included image sets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4a5ff0b-b030-4b86-a833-09687fb06796",
										"exec": [
											"var jsonData = pm.response.json();",
											"var resourceName = \"abstract-products\";",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data.type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data.id).to.eql(pm.variables.get(\"abstract_sku_with_1product\"));",
											"});",
											"",
											"pm.test(\"Has abstract description returned\", function() {",
											"    pm.expect(jsonData.data.attributes.sku).to.eql(pm.variables.get(\"abstract_sku_with_1product\"));",
											"    pm.expect(jsonData.data.attributes.name).to.be.eql(\"Toshiba CAMILEO S20\"); ",
											"    pm.expect(jsonData.data.attributes.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has attribute variants returned\", function() {",
											"    pm.expect(jsonData.data.attributes.attributeMap).have.property('attribute_variants');",
											"});",
											"",
											"pm.test(\"Has super attributes returned\", function() {",
											"    pm.expect(jsonData.data.attributes.attributeMap).to.have.property('super_attributes');",
											"});",
											"",
											"pm.test(\"Has product concrete ids returned\", function() {",
											"    pm.expect(jsonData.data.attributes.attributeMap).to.have.property('product_concrete_ids');",
											"    pm.expect(jsonData.data.attributes.attributeMap.product_concrete_ids).to.contain(\"209_12554247\"); ",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.data.links.self).to.eql(",
											"        pm.variables.get(\"url\") + \"/abstract-products/\" +  pm.variables.get(\"abstract_sku_with_1product\")",
											"    );",
											"});",
											"",
											"pm.test(\"Has relationships concrete-products returned\", function() {",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[0].type).to.eql(\"concrete-products\"); ",
											"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[0].id).to.eql(\"209_12554247\");",
											"});",
											"",
											"pm.test(\"Has relationships abstract-product-image-sets returned\", function() {",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-image-sets\"].data[0].type).to.eql(\"abstract-product-image-sets\"); ",
											"    pm.expect(jsonData.data.relationships[\"abstract-product-image-sets\"].data[0].id).to.eql(pm.variables.get(\"abstract_sku_with_1product\"));",
											"});",
											"",
											"pm.test(\"Has only two relationship\", function() {",
											"    pm.expect(Object.keys(jsonData.data.relationships)).to.have.lengthOf(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}?include=abstract-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}"
									],
									"query": [
										{
											"key": "include",
											"value": "abstract-product-image-sets"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request image set without sku",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2456155-7a44-48a1-8f25-2f0d20c8e165",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Error code is 303\", function() {",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"303\");",
											"});",
											"",
											"pm.test(\"Error status code is 404\", function () {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Can`t find abstract product image sets.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/ /abstract-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										" ",
										"abstract-product-image-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request image set for abstract using wrong sku",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "18162119-610f-4c8a-bcbc-8aca58a56ca1",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Error code is 303\", function() {",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"303\");",
											"});",
											"",
											"pm.test(\"Error status code is 404\", function () {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Can`t find abstract product image sets.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/20934289374/abstract-product-image-sets/",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"20934289374",
										"abstract-product-image-sets",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request image set for abstract  using special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e81f2b1-1721-49d9-9b98-35741401358c",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error code is 301\", function() {",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"301\");",
											"});",
											"",
											"pm.test(\"Error status code is 404\", function () {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Abstract product is not found.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/±!@#$%^&*()_/abstract-product-image-sets/",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"±!@"
									],
									"hash": "$%^&*()_/abstract-product-image-sets/"
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request image set for abstract with the url is broken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f1ac50f-ab2e-46d9-828f-bed795b8b84c",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}/abstract-product-im1age-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}",
										"abstract-product-im1age-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request image set for abstract using wrong method POST",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69f4fe1b-e42a-4293-bb6c-94b07dca9b7f",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2c2eb148-f0f6-4ba1-905c-c6e34a2c7358",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"access-tokens\",\n    \"attributes\": {\n        \"username\":\"spencor.hopkin@spryker.com\",\n        \"password\":\"change123\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}/abstract-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}",
										"abstract-product-image-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request image set for abstract using wrong method PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "586bdd96-5c86-4eb8-bb6c-3489727e38cb",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2c2eb148-f0f6-4ba1-905c-c6e34a2c7358",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"access-tokens\",\n    \"attributes\": {\n        \"username\":\"spencor.hopkin@spryker.com\",\n        \"password\":\"change123\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}/abstract-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}",
										"abstract-product-image-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request image set for abstract  using wrong method Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d5273c41-9e22-424c-8630-70bb512c49f4",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}/abstract-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}",
										"abstract-product-image-sets"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get image set for concrete product",
					"item": [
						{
							"name": "Request image set with concrete product - product available",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e6a6d780-1223-431e-b536-75922204b053",
										"exec": [
											"var jsonData = pm.response.json();",
											"var resourceName = \"concrete-product-image-sets\";",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(resourceName);",
											"});",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"concrete_sku\"));",
											"});",
											"",
											"pm.test(\"Has name type returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.imageSets[0].name).to.eql(\"default\"); ",
											"});",
											"",
											"pm.test(\"Has correct images for products\", function() {",
											"    pm.expect(jsonData.data[0].attributes.imageSets[0].images[0].externalUrlLarge).to.eql(\"//images.icecat.biz/img/norm/high/24867659-4916.jpg\");",
											"    pm.expect(jsonData.data[0].attributes.imageSets[0].images[0].externalUrlSmall).to.eql(\"//images.icecat.biz/img/norm/medium/24867659-4916.jpg\");",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(pm.variables.get(\"url\") + \"/concrete-products/\" +  pm.variables.get(\"concrete_sku\") + \"/\" + resourceName);",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/concrete-products/\" +  pm.variables.get(\"concrete_sku\") + \"/\" + resourceName);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concrete_sku}}/concrete-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concrete_sku}}",
										"concrete-product-image-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request product image set by concrete sku - product doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46e514d6-48c5-48e7-abfe-f0b82cd50f45",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error code is 302\", function() {",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"302\");",
											"});",
											"",
											"pm.test(\"Error status code is 404\", function () {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Concrete product is not found.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{notExistingSKU}}/concrete-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{notExistingSKU}}",
										"concrete-product-image-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract product image set with product has no image sets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e1bbf86-1d26-4486-99a7-d74fe5996aaf",
										"exec": [
											"const resourceName = \"concrete-product-image-sets\";",
											"",
											"let jsonData = pm.response.json(),",
											"    abstractSku = pm.variables.get('concreteSkuNoImageSets'),",
											"    selfLink = pm.variables.get(\"url\") + \"/concrete-products/\" + abstractSku + \"/\" + resourceName;",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(resourceName);",
											"});",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(abstractSku);",
											"});",
											"",
											"pm.test(\"Has no image set\", function() {",
											"    let imageSets = _.get(jsonData,'data[0].attributes.imageSets');",
											"    pm.expect(imageSets).to.eql({});",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(selfLink);",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.links.self).to.eql(selfLink);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concreteSkuNoImageSets}}/concrete-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concreteSkuNoImageSets}}",
										"concrete-product-image-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request product image set by concrete sku -  product has several image sets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46e514d6-48c5-48e7-abfe-f0b82cd50f45",
										"exec": [
											"const resourceName = \"concrete-product-image-sets\";",
											"",
											"let jsonData = pm.response.json(),",
											"    concreteSku = pm.variables.get(\"concreteSkuHas2ImageSets\"),",
											"    selfLink = pm.variables.get(\"url\") + \"/concrete-products/\" + concreteSku + \"/\" + resourceName;",
											"",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(resourceName);",
											"});",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(concreteSku);",
											"});",
											"",
											"pm.test(\"Has two image sets\", function() {",
											"    let imageSets = _.get(jsonData,'data[0].attributes.imageSets');",
											"    pm.expect(imageSets).to.have.lengthOf(2);",
											"});",
											"",
											"pm.test(\"Has correct images for products\", function() {",
											"    let imageSets = jsonData.data[0].attributes.imageSets;",
											"    ",
											"    pm.expect(imageSets[0].images[0].externalUrlLarge).to.eql(\"//images.icecat.biz/img/gallery_mediums/59122736_6969523881.jpg\");",
											"    pm.expect(imageSets[0].images[0].externalUrlSmall).to.eql(\"//images.icecat.biz/img/gallery_raw/59122736_6969523881.png\");",
											"    ",
											"    pm.expect(imageSets[1].images[0].externalUrlLarge).to.eql(\"//images.icecat.biz/img/gallery_mediums/59122736_6969523881.jpg\");",
											"    pm.expect(imageSets[1].images[0].externalUrlSmall).to.eql(\"//images.icecat.biz/img/gallery_raw/59122736_6969523881.png\");",
											"    ",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(selfLink);",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.links.self).to.eql(selfLink);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concreteSkuHas2ImageSets}}/concrete-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concreteSkuHas2ImageSets}}",
										"concrete-product-image-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request product image with abstract sku",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e1bbf86-1d26-4486-99a7-d74fe5996aaf",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Has correct error message returned\", function() {",
											"    let jsonData = pm.response.json(),",
											"        error = _.first(jsonData.errors);",
											"        ",
											"    pm.expect(error.code).to.be.eql(\"304\");",
											"    pm.expect(error.detail).to.be.eql(\"Can`t find concrete product image sets.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{abstractSKU2}}/concrete-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{abstractSKU2}}",
										"concrete-product-image-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative.Request product image set by concrete sku - product deactivated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e1bbf86-1d26-4486-99a7-d74fe5996aaf",
										"exec": [
											"pm.test(\"Status code is 404\", function() {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Has correct error message returned\", function() {",
											"    let jsonData = pm.response.json(),",
											"        error = _.first(jsonData.errors);",
											"        ",
											"    pm.expect(error.code).to.be.eql(\"304\");",
											"    pm.expect(error.detail).to.be.eql(\"Can`t find concrete product image sets.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concreteSKU4}}/concrete-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concreteSKU4}}",
										"concrete-product-image-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request image set using wrong method POST",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc3deeaf-842d-44d3-9d86-56ba82545180",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"access-tokens\",\n    \"attributes\": {\n        \"username\":\"spencor.hopkin@spryker.com\",\n        \"password\":\"change123\"\n    }\n  }\n}\n\n\n\n\n"
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concrete_sku}}/concrete-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concrete_sku}}",
										"concrete-product-image-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request image set using wrong method PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "714c0cb1-c8bc-4486-a8e7-e52dcba39734",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"access-tokens\",\n    \"attributes\": {\n        \"username\":\"spencor.hopkin@spryker.com\",\n        \"password\":\"change123\"\n    }\n  }\n}\n\n\n\n\n"
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concrete_sku}}/concrete-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concrete_sku}}",
										"concrete-product-image-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request image set using wrong method PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "714c0cb1-c8bc-4486-a8e7-e52dcba39734",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"access-tokens\",\n    \"attributes\": {\n        \"username\":\"spencor.hopkin@spryker.com\",\n        \"password\":\"change123\"\n    }\n  }\n}\n\n\n\n\n"
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concrete_sku}}/concrete-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concrete_sku}}",
										"concrete-product-image-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request image set using wrong method DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7d397a4-7925-452c-a5de-baef9e8e3338",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concrete_sku}}/concrete-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concrete_sku}}",
										"concrete-product-image-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request image set - empty sku",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46e514d6-48c5-48e7-abfe-f0b82cd50f45",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error code is 302\", function() {",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"302\");",
											"});",
											"",
											"pm.test(\"Error status code is 404\", function () {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Concrete product is not found.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products//concrete-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"",
										"concrete-product-image-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request image set - error in request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0e9c3d4-7358-4bf8-b05b-739098f7127a",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concrete_sku}}/concrete-product-image-s1ets",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concrete_sku}}",
										"concrete-product-image-s1ets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request concrete with included image-sets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f0524e9-058b-449a-8e97-4320c27a4c6e",
										"exec": [
											"var jsonData = pm.response.json();",
											"var resourceName = \"concrete-products\";",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data.type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data.id).to.eql(pm.variables.get(\"concrete_sku\"));",
											"});",
											"",
											"pm.test(\"Has description of concrete-products type returned\", function() {",
											"    pm.expect(jsonData.data.attributes.sku).to.be.eql(pm.variables.get(\"concrete_sku\"));",
											"    pm.expect(jsonData.data.attributes.name).to.be.eql(\"Samsung Galaxy Tab Active 8.0 8 GB\");",
											"    pm.expect(jsonData.data.attributes.description).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has attributes of concrete-products type returned\", function() {",
											"    pm.expect(jsonData.data.attributes.attributes.storage_media).to.be.eql(\"flash\");",
											"    pm.expect(jsonData.data.attributes.attributes.processor_frequency).to.be.eql(\"1.2 GHz\");",
											"    pm.expect(jsonData.data.attributes.attributes.display_diagonal).to.be.eql(\"20.3 cm\");",
											"    pm.expect(jsonData.data.attributes.attributes.aspect_ratio).to.be.eql(\"16:09\");",
											"    pm.expect(jsonData.data.attributes.attributes.brand).to.be.eql(\"Samsung\");",
											"    pm.expect(jsonData.data.attributes.attributes.internal_storage_capacity).to.be.eql(\"8 GB\");",
											"});",
											"",
											"pm.test(\"Has super Attributes Definition of concrete-products type returned\", function() {",
											"    pm.expect(jsonData.data.attributes.superAttributesDefinition).to.contain(\"storage_media\", \"processor_frequency\", \"internal_storage_capacity\");",
											"});",
											"",
											"pm.test(\"Has meta data returned\", function() {",
											"    pm.expect(jsonData.data.attributes.metaTitle).to.be.eql(\"Samsung Galaxy Tab Active 8.0 8 GB\");",
											"    pm.expect(jsonData.data.attributes.metaKeywords).to.eql(\"Samsung,Communication Electronics\");",
											"    pm.expect(jsonData.data.attributes.metaDescription).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has concrete-products self link\", function() {",
											"    pm.expect(jsonData.data.links.self).to.eql(pm.variables.get(\"url\") + \"/concrete-products/\" + pm.variables.get(\"concrete_sku\")); ",
											"}); ",
											"",
											"pm.test(\"Has relationships concrete-product-image-sets type returned\", function() {",
											"    pm.expect(jsonData.data.relationships[\"concrete-product-image-sets\"].data[0].type).to.be.eql(\"concrete-product-image-sets\");",
											"    pm.expect(jsonData.data.relationships[\"concrete-product-image-sets\"].data[0].id).to.be.eql(pm.variables.get(\"concrete_sku\"));",
											"});",
											"",
											"pm.test(\"Has only two relationship\", function() {",
											"    pm.expect(Object.keys(jsonData.data.relationships)).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concrete_sku}}?include=concrete-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concrete_sku}}"
									],
									"query": [
										{
											"key": "include",
											"value": "concrete-product-image-sets"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Request image set with special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce61708f-2bef-4cf6-955a-2b5e9ccde2bd",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error code is 302\", function() {",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"302\");",
											"});",
											"",
											"pm.test(\"Error status code is 404\", function () {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Concrete product is not found.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/±!@#$%^&*()_/concrete-product-image-sets",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"±!@"
									],
									"hash": "$%^&*()_/concrete-product-image-sets"
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e67dd293-e552-4caa-8997-e75f3a6cf71c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e421e2fd-5cd1-4a6e-a97f-ac9c6536cff2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Product - Category-Nodes",
			"item": [
				{
					"name": "Request abstract with include category-nodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ecb1e2e-521d-4ac5-839f-22132dad1484",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data.type).to.eql(\"abstract-products\");",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    pm.expect(jsonData.data.id).to.eql(pm.variables.get(\"abstract_sku_with_1product\"));",
									"});",
									"",
									"pm.test(\"Has correct attributes returned\", function() {",
									"    pm.expect(jsonData.data.attributes.sku).to.eql(pm.variables.get(\"abstract_sku_with_1product\"));",
									"    pm.expect(jsonData.data.attributes.name).to.eql(\"Toshiba CAMILEO S20\");",
									"    pm.expect(jsonData.data.attributes.description).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has correct values for prdocut attributes returned\", function() {",
									"    pm.expect(jsonData.data.attributes.attributes.focus_adjustment).to.eql(\"Auto\");",
									"    pm.expect(jsonData.data.attributes.attributes.weight).to.eql(\"118 g\");",
									"    pm.expect(jsonData.data.attributes.attributes.total_megapixels).to.eql(\"8 MP\");",
									"    pm.expect(jsonData.data.attributes.attributes.memory_slots).to.eql(\"1\");",
									"    pm.expect(jsonData.data.attributes.attributes.brand).to.eql(\"Toshiba\");",
									"    pm.expect(jsonData.data.attributes.attributes.color).to.eql(\"Grey\");",
									"});",
									"",
									"pm.test(\"Has super attributes definition returned\", function() {",
									"    pm.expect(jsonData.data.attributes.superAttributesDefinition).to.contain(\"total_megapixels\", \"color\");",
									"});",
									"",
									"pm.test(\"Has attribute mape turned\", function() {",
									"    pm.expect(jsonData.data.attributes.attributeMap.attribute_variants).to.eql([]);",
									"    pm.expect(jsonData.data.attributes.attributeMap.super_attributes).to.eql([]);",
									"    pm.expect(jsonData.data.attributes.attributeMap.product_concrete_ids[0]).to.eql(\"209_12554247\");",
									"});",
									"",
									"pm.test(\"Has meta title data returned\", function() { ",
									"    pm.expect(jsonData.data.attributes.metaTitle).to.eql(\"Toshiba CAMILEO S20\");",
									"    pm.expect(jsonData.data.attributes.metaKeywords).to.eql(\"Toshiba,Smart Electronics\");",
									"    pm.expect(jsonData.data.attributes.metaKeywords).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Has self link\", function() {",
									"    pm.expect(jsonData.data.links.self).to.eql(pm.variables.get(\"url\") + \"/abstract-products/\" + pm.variables.get(\"abstract_sku_with_1product\"));",
									"});",
									"",
									"pm.test(\"Has relationships concrete-products returned\", function() {",
									"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[0].type).to.eql(\"concrete-products\");",
									"    pm.expect(jsonData.data.relationships[\"concrete-products\"].data[0].id).to.eql(\"209_12554247\");",
									"});",
									"",
									"pm.test(\"Has category-nodes in relationships\", function () {",
									"    pm.expect(jsonData.data.relationships).to.have.property(\"category-nodes\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}?include=category-nodes",
							"host": [
								"{{url}}"
							],
							"path": [
								"abstract-products",
								"{{abstract_sku_with_1product}}"
							],
							"query": [
								{
									"key": "include",
									"value": "category-nodes"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative. Request abstract with include category-nodes with wrond method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ecb1e2e-521d-4ac5-839f-22132dad1484",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error status is 404\", function() {",
									"    pm.expect(jsonData.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"access-tokens\",\n    \"attributes\": {\n        \"username\":\"spencor.hopkin@spryker.com\",\n        \"password\":\"change123\"\n    }\n  }\n}\n\n\n\n\n"
						},
						"url": {
							"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}?include=category-nodes",
							"host": [
								"{{url}}"
							],
							"path": [
								"abstract-products",
								"{{abstract_sku_with_1product}}"
							],
							"query": [
								{
									"key": "include",
									"value": "category-nodes"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "84629b1f-7785-4950-9b14-9d456b0db966",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e13d6235-26e8-49b2-be5e-29418acb8602",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Product - Availabilities",
			"item": [
				{
					"name": "Abstract availability GLUE-335",
					"item": [
						{
							"name": "Request abstract availability by SKU - stock > 0 and not never out of stock",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "950127dc-e8fe-4ddc-81f0-3bdfd9cb87f0",
										"exec": [
											"var jsonData = pm.response.json();",
											"var resourceName = \"abstract-product-availabilities\";",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(resourceName); ",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"abstract_product_avail_1\"));",
											"});",
											"",
											"pm.test(\"Has correct attributes returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.availability).to.eql(true); ",
											"    pm.expect(jsonData.data[0].attributes.quantity).to.eql(20);",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(pm.variables.get(\"url\") + \"/abstract-products/\" + (pm.variables.get(\"abstract_product_avail_1\")) + \"/\" + resourceName);",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_product_avail_1}}/abstract-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_product_avail_1}}",
										"abstract-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract availability by SKU - different warehouse information",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "950127dc-e8fe-4ddc-81f0-3bdfd9cb87f0",
										"exec": [
											"var jsonData = pm.response.json();",
											"var resourceName = \"abstract-product-availabilities\";",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(resourceName); ",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"abstract_product_avail_1\"));",
											"});",
											"",
											"pm.test(\"Has correct attributes returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.availability).to.eql(true); ",
											"    pm.expect(jsonData.data[0].attributes.quantity).to.eql(20);",
											"});",
											"",
											"pm.test(\"Has correct availability attribute returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.availability).to.eql(true); ",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(pm.variables.get(\"url\") + \"/abstract-products/\" + (pm.variables.get(\"abstract_product_avail_1\")) + \"/\" + resourceName);",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_product_avail_1}}/abstract-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_product_avail_1}}",
										"abstract-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract availability by SKU - stock = 0 and not never out of stock",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "950127dc-e8fe-4ddc-81f0-3bdfd9cb87f0",
										"exec": [
											"var jsonData = pm.response.json();",
											"var resourceName = \"abstract-product-availabilities\";",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(resourceName); ",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"abstract_product_avail_3\"));",
											"});",
											"",
											"pm.test(\"Has correct attributes returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.availability).to.eql(false); ",
											"    pm.expect(jsonData.data[0].attributes.quantity).to.eql(0);",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(pm.variables.get(\"url\") + \"/abstract-products/\" + (pm.variables.get(\"abstract_product_avail_3\")) + \"/\" + resourceName);",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_product_avail_3}}/abstract-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_product_avail_3}}",
										"abstract-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract availability by SKU -  stock > 0 and IS never out of stock",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "950127dc-e8fe-4ddc-81f0-3bdfd9cb87f0",
										"exec": [
											"var jsonData = pm.response.json();",
											"var resourceName = \"abstract-product-availabilities\";",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(resourceName); ",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"abstract_product_avail_4\"));",
											"});",
											"",
											"pm.test(\"Has correct attributes returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.availability).to.eql(true); ",
											"    pm.expect(jsonData.data[0].attributes.quantity).to.eql(310);",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(pm.variables.get(\"url\") + \"/abstract-products/\" + (pm.variables.get(\"abstract_product_avail_4\")) + \"/\" + resourceName);",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_product_avail_4}}/abstract-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_product_avail_4}}",
										"abstract-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract availability by SKU stock = 0 and IS never out of stock",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "950127dc-e8fe-4ddc-81f0-3bdfd9cb87f0",
										"exec": [
											"var jsonData = pm.response.json();",
											"var resourceName = \"abstract-product-availabilities\";",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(resourceName); ",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"abstract_product_avail_5\"));",
											"});",
											"",
											"pm.test(\"Has correct attributes returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.availability).to.eql(false); ",
											"    pm.expect(jsonData.data[0].attributes.quantity).to.eql(0);",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(pm.variables.get(\"url\") + \"/abstract-products/\" + (pm.variables.get(\"abstract_product_avail_5\")) + \"/\" + resourceName);",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_product_avail_5}}/abstract-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_product_avail_5}}",
										"abstract-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract availability by SKU - with different concretes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "950127dc-e8fe-4ddc-81f0-3bdfd9cb87f0",
										"exec": [
											"var jsonData = pm.response.json();",
											"var resourceName = \"abstract-product-availabilities\";",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(resourceName); ",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"abstract_product_avail_1\"));",
											"});",
											"",
											"pm.test(\"Has correct attributes returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.availability).to.eql(true); ",
											"    pm.expect(jsonData.data[0].attributes.quantity).to.eql(20);",
											"});",
											"",
											"pm.test(\"Has correct availability attribute returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.availability).to.eql(true); ",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(pm.variables.get(\"url\") + \"/abstract-products/\" + (pm.variables.get(\"abstract_product_avail_1\")) + \"/\" + resourceName);",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_product_avail_1}}/abstract-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_product_avail_1}}",
										"abstract-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request abstract availability by SKU with 3 concrete ",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68498b71-c027-40d1-9cbf-806854496de7",
										"exec": [
											"var jsonData = pm.response.json();",
											"var resourceName = \"abstract-product-availabilities\";",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(resourceName); ",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"abstract_sku_with_3product\"));",
											"});",
											"",
											"pm.test(\"Has correct attributes returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.availability).to.eql(true); ",
											"    pm.expect(jsonData.data[0].attributes.quantity).to.eql(60);",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(pm.variables.get(\"url\") + \"/abstract-products/\" + (pm.variables.get(\"abstract_sku_with_3product\")) + \"/\" + resourceName);",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_3product}}/abstract-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_3product}}",
										"abstract-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request  abstract availability by concrete sku",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7671c545-d4e4-4f92-8f82-3d36d8246607",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Error code is 305\", function() {",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"305\");",
											"});",
											"",
											"pm.test(\"Error status code is 404\", function () {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Availability is not found.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{concrete_sku}}/abstract-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{concrete_sku}}",
										"abstract-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request  abstract availability with invalid sku",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48c21aed-e7b6-48c2-8d8a-d0b521b8e0c0",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Error code is 305\", function() {",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"305\");",
											"});",
											"",
											"pm.test(\"Error status code is 400\", function () {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Availability is not found.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{notExistingSKU}}/abstract-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{notExistingSKU}}",
										"abstract-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request  abstract availability wit empty sku",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48c21aed-e7b6-48c2-8d8a-d0b521b8e0c0",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Error code is 311\", function() {",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"311\");",
											"});",
											"",
											"pm.test(\"Error status code is 400\", function () {",
											"    pm.expect(jsonData.errors[0].status).to.eql(400);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Abstract product sku is not specified.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products//abstract-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"",
										"abstract-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request  abstract availability by sku with error in request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05a998d9-4479-4ed3-b443-c7cd84bcd4e8",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-pro123ducts/{{concrete_sku}}/abstract-product-av123ilabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-pro123ducts",
										"{{concrete_sku}}",
										"abstract-product-av123ilabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request  abstract availability by special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3bc6ca0f-8adf-4100-b1a8-495127d3df6a",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Error code is 305\", function() {",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"305\");",
											"});",
											"",
											"pm.test(\"Error status code is 404\", function () {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Availability is not found.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/*/abstract-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"*",
										"abstract-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request  abstract availability  using spaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e72643f-d26f-4c8b-a828-d7429f96f326",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Error code is 305\", function() {",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"305\");",
											"});",
											"",
											"pm.test(\"Error status code is 404\", function () {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Availability is not found.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/     /abstract-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"     ",
										"abstract-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request abstract availability using the wrong method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9a0e8e4-573b-457d-8984-1e3d9d35b73d",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{\"type\":\"access_tokens\",\"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}/abstract-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}",
										"abstract-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request to Delete abstract availability by sku",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ac54d977-a0ba-4905-ace9-afe71f7f703d",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}/abstract-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}",
										"abstract-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request to Put abstract availability by SKU",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92df54d9-747f-46b1-912c-27e179640096",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5b63ce0b-4a0f-4c7d-880b-258e79de9deb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{\"type\":\"access_tokens\",\"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}/abstract-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}",
										"abstract-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request to PATCH abstract availability by SKU",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92df54d9-747f-46b1-912c-27e179640096",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5b63ce0b-4a0f-4c7d-880b-258e79de9deb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{\"type\":\"access_tokens\",\"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/abstract-products/{{abstract_sku_with_1product}}/abstract-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"abstract-products",
										"{{abstract_sku_with_1product}}",
										"abstract-product-availabilities"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Concrete availability GLUE-242",
					"item": [
						{
							"name": "Request concrete availability by concrete SKU - stock > 0 and not never out of stock",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86603909-e670-47bc-a4f8-64f4acf81a2e",
										"exec": [
											"var jsonData = pm.response.json();",
											"var resourceName = \"concrete-product-availabilities\";",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(resourceName); ",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"concrete_sku\"));",
											"});",
											"",
											"pm.test(\"Has correct attributes returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.availability).to.eql(true); ",
											"    pm.expect(jsonData.data[0].attributes.quantity).to.eql(20);",
											"    pm.expect(jsonData.data[0].attributes.isNeverOutOfStock).to.eql(false);",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(pm.variables.get(\"url\") + \"/concrete-products/\" + (pm.variables.get(\"concrete_sku\")) + \"/\" + resourceName);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concrete_sku}}/concrete-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concrete_sku}}",
										"concrete-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request concrete availability by SKU - different warehouse information",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "950127dc-e8fe-4ddc-81f0-3bdfd9cb87f0",
										"exec": [
											"var jsonData = pm.response.json();",
											"var resourceName = \"concrete-product-availabilities\";",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(resourceName); ",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"concrete_product_avail_1\"));",
											"});",
											"",
											"pm.test(\"Has correct attributes returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.availability).to.eql(true); ",
											"    pm.expect(jsonData.data[0].attributes.quantity).to.eql(10);",
											"});",
											"",
											"pm.test(\"Has correct availability attribute returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.availability).to.eql(true); ",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(pm.variables.get(\"url\") + \"/concrete-products/\" + (pm.variables.get(\"concrete_product_avail_1\")) + \"/\" + resourceName);",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concrete_product_avail_1}}/concrete-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concrete_product_avail_1}}",
										"concrete-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request concrete availability by SKU - stock = 0 and not never out of stock",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "950127dc-e8fe-4ddc-81f0-3bdfd9cb87f0",
										"exec": [
											"var jsonData = pm.response.json();",
											"var resourceName = \"concrete-product-availabilities\";",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(resourceName); ",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"concrete_product_avail_3\"));",
											"});",
											"",
											"pm.test(\"Has correct attributes returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.availability).to.eql(false); ",
											"    pm.expect(jsonData.data[0].attributes.quantity).to.eql(0);",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(pm.variables.get(\"url\") + \"/concrete-products/\" + (pm.variables.get(\"concrete_product_avail_3\")) + \"/\" + resourceName);",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concrete_product_avail_3}}/concrete-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concrete_product_avail_3}}",
										"concrete-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request concrete availability by SKU -  stock > 0 and IS never out of stock",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "950127dc-e8fe-4ddc-81f0-3bdfd9cb87f0",
										"exec": [
											"var jsonData = pm.response.json();",
											"var resourceName = \"concrete-product-availabilities\";",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(resourceName); ",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"concrete_product_avail_4\"));",
											"});",
											"",
											"pm.test(\"Has correct attributes returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.availability).to.eql(true); ",
											"    pm.expect(jsonData.data[0].attributes.quantity).to.eql(200);",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(pm.variables.get(\"url\") + \"/concrete-products/\" + (pm.variables.get(\"concrete_product_avail_4\")) + \"/\" + resourceName);",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concrete_product_avail_4}}/concrete-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concrete_product_avail_4}}",
										"concrete-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request concrete availability by SKU stock = 0 and IS never out of stock",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "950127dc-e8fe-4ddc-81f0-3bdfd9cb87f0",
										"exec": [
											"var jsonData = pm.response.json();",
											"var resourceName = \"concrete-product-availabilities\";",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data[0].type).to.eql(resourceName);",
											"});",
											"",
											"pm.test(\"Has correct id returned\", function() {",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.variables.get(\"concrete_product_avail_5\"));",
											"});",
											"",
											"pm.test(\"Has correct attributes returned\", function() {",
											"    pm.expect(jsonData.data[0].attributes.availability).to.eql(false);",
											"    pm.expect(jsonData.data[0].attributes.quantity).to.eql(0);",
											"});",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.data[0].links.self).to.eql(pm.variables.get(\"url\") + \"/concrete-products/\" + (pm.variables.get(\"concrete_product_avail_5\")) + \"/\" + resourceName);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{concrete_product_avail_5}}/concrete-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{concrete_product_avail_5}}",
										"concrete-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request concrete availability by abstract SKU",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99216f6a-3b1c-4990-adb1-f90ca50aaf34",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Error code is 306\", function() {",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"306\");",
											"});",
											"",
											"pm.test(\"Error status code is 404\", function () {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Availability is not found.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{abstract_sku_with_1product}}/concrete-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{abstract_sku_with_1product}}",
										"concrete-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request concrete availability with invalid sku",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99216f6a-3b1c-4990-adb1-f90ca50aaf34",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Error code is 306\", function() {",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"306\");",
											"});",
											"",
											"pm.test(\"Error status code is 404\", function () {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Availability is not found.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/{{notExistingSKU}}/concrete-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"{{notExistingSKU}}",
										"concrete-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request concrete availability with empty sku",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99216f6a-3b1c-4990-adb1-f90ca50aaf34",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Error code is 312\", function() {",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"312\");",
											"});",
											"",
											"pm.test(\"Error status code is 400\", function () {",
											"    pm.expect(jsonData.errors[0].status).to.eql(400);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Concrete product sku is not specified.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products//concrete-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"",
										"concrete-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request concrete availability by sku with  error in request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80547f1d-a564-41ea-81fe-4b374ffd0e96",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-p123aroducts/{{concrete_sku}}/concrete-product-availassbilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-p123aroducts",
										"{{concrete_sku}}",
										"concrete-product-availassbilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request concrete availability by special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec53b55b-aa30-44a4-8278-a4eae88fc65e",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Error code is 302\", function() {",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"302\");",
											"});",
											"",
											"pm.test(\"Error status code is 404\", function () {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Concrete product is not found.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/±!@#$%^&*()/concrete-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"±!@"
									],
									"hash": "$%^&*()/concrete-product-availabilities"
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request concrete availability by spaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06ec34ca-2189-4f16-864b-5b12bd8e701e",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Error code is 306\", function() {",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"306\");",
											"});",
											"",
											"pm.test(\"Error status code is 404\", function () {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Availability is not found.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/concrete-products/              /concrete-product-availabilities",
									"host": [
										"{{url}}"
									],
									"path": [
										"concrete-products",
										"              ",
										"concrete-product-availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request concrete availability by sku  using wrong method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75b75055-24ef-4357-a058-afc4b6b4dd56",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{\"type\":\"access_tokens\",\"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/product-concrete-availability/{{concrete_sku}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"product-concrete-availability",
										"{{concrete_sku}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request to Delete concrete availability by SKU using wrong method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91610dc4-817f-4792-ba86-321f3f6bdfab",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/product-concrete-availability/{{concrete_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"product-concrete-availability",
										"{{concrete_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative. Request to Put concrete availability by SKU using wrong method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01c4d8be-94ec-4ccd-afa4-15b770687eb4",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error status is 404\", function() {",
											"    pm.expect(jsonData.errors[0].status).to.eql(404);",
											"});",
											"",
											"pm.test(\"Correct details message\", function(){",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{\"type\":\"access_tokens\",\"attributes\":{\"username\":\"spencor.hopkin@spryker.com\", \"password\": \"change123\"}}}"
								},
								"url": {
									"raw": "{{url}}/product-concrete-availability/{{concrete_sku}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"product-concrete-availability",
										"{{concrete_sku}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a1f7b563-1b5b-498d-ae84-d70416cdea54",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "38d24966-82ae-4206-911b-8d87287c9e4c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "506ab41f-0e81-429b-a1d0-2c4cc4db9cf5",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "92bdd3d1-4853-4f88-ba74-b2f0abfc48a6",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "bc7948b5-a959-4892-bebb-f5c837fcb15f",
			"key": "abstract_sku_with_1product",
			"value": "209",
			"type": "string"
		},
		{
			"id": "e965c2a4-31b1-4ad7-9b27-bc5eb68e94c0",
			"key": "abstract_sku_with_1product_tax_set_uuid",
			"value": "b1b7984e-c7dc-5be4-89f0-0ea50d20cbe1",
			"type": "string"
		},
		{
			"id": "494411dc-9de5-432e-a431-91b1d7892df7",
			"key": "abstract_sku_with_3product",
			"value": "177",
			"type": "string"
		},
		{
			"id": "a032963b-c7cd-49a1-a5fb-4e03f4948fd0",
			"key": "abstract_sku_with_3product_tax_set_uuid",
			"value": "deb94215-a1fc-5cdc-af6e-87ec3a847480",
			"type": "string"
		},
		{
			"id": "6a64c98f-69d1-47d8-9eca-fd35bd86722e",
			"key": "concrete_sku",
			"value": "177_24867659",
			"type": "string"
		},
		{
			"id": "baa78f90-87ac-4ac8-a5a2-d12911d8f8a4",
			"key": "abstractSKU2",
			"value": "222",
			"type": "string"
		},
		{
			"id": "b99f0163-1c44-4452-b215-fa966c11098d",
			"key": "concreteSKU3",
			"value": "222_01",
			"type": "string"
		},
		{
			"id": "2d43b929-810c-4609-9d90-ef73d8771b6c",
			"key": "concreteSKU4",
			"value": "222_02",
			"type": "string"
		},
		{
			"id": "6de0c399-81da-41b1-954c-3c0bed868f5f",
			"key": "abstractSKU3",
			"value": "223",
			"type": "string"
		},
		{
			"id": "892983f4-219b-48d1-b246-1f7d6af8962b",
			"key": "abstractSKUnoImageSets",
			"value": "220",
			"type": "string"
		},
		{
			"id": "8f6bd75c-a434-4640-ad56-df2140ecfb5f",
			"key": "concreteSkuNoImageSets",
			"value": "220_01",
			"type": "string"
		},
		{
			"id": "698c7919-c4d6-4c2e-ae5f-0c0e99e99988",
			"key": "abstractSkuHas2ImageSets",
			"value": "221",
			"type": "string"
		},
		{
			"id": "001fc3c0-bbfe-425d-af2b-18043a581a8c",
			"key": "concreteSkuHas2ImageSets",
			"value": "221_01",
			"type": "string"
		},
		{
			"id": "c01734fe-aeeb-402d-bf8c-17317f2821e3",
			"key": "abstractNoTaxRates",
			"value": "224",
			"type": "string"
		},
		{
			"id": "0349b0a8-bb26-49e4-b823-3a3eec1323ba",
			"key": "notExistingSKU",
			"value": "124512391203123",
			"type": "string"
		},
		{
			"id": "7d4766a1-9f95-4508-8f4b-74c1643fe579",
			"key": "abstract_product_avail_1",
			"value": "058",
			"type": "string"
		},
		{
			"id": "faccde36-436b-43cb-8058-bc2794748c25",
			"key": "concrete_product_avail_1",
			"value": "058_24245592",
			"type": "string"
		},
		{
			"id": "404f809a-6950-4493-a507-c1f9ed993654",
			"key": "abstract_product_avail_3",
			"value": "210",
			"type": "string"
		},
		{
			"id": "cbd1cde0-dc62-4fa4-adac-19995b3bf0a0",
			"key": "concrete_product_avail_3",
			"value": "210_123",
			"type": "string"
		},
		{
			"id": "284b27ec-cf0a-4c62-8fe4-e0e2c87df239",
			"key": "abstract_product_avail_4",
			"value": "218",
			"type": "string"
		},
		{
			"id": "f97ec183-56b1-4309-95fc-34ac18532cfb",
			"key": "concrete_product_avail_4",
			"value": "218_1230",
			"type": "string"
		},
		{
			"id": "6f848044-6a7b-46d8-a155-4ca4fb256362",
			"key": "abstract_product_avail_5",
			"value": "215",
			"type": "string"
		},
		{
			"id": "0614cfc5-54d2-4779-aee6-f833ab3591f4",
			"key": "concrete_product_avail_5",
			"value": "215_123",
			"type": "string"
		}
	]
}