{
	"info": {
		"_postman_id": "2d2ffb93-66d1-4eb5-8016-9bae2bba4a5b",
		"name": "catalog-search-rest-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Search for a product by SKU",
			"item": [
				{
					"name": "Search a product - search by abstract sku - product available",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "224ee700-ea9e-44d7-9762-ed30f47a1e87",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"        .that.have.property('sortParamLocalizedNames')",
									"        .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(1);",
									"        let productsObj = _.first(data.attributes.abstractProducts);",
									"        pm.expect(productsObj).to.have.property('images').that.is.an('array');",
									"        pm.expect(productsObj).to.have.property('price').that.is.a('number');",
									"        pm.expect(productsObj).to.have.property('abstractName').that.is.a('string');",
									"        pm.expect(productsObj).to.have.property('prices').that.is.an('array');",
									"        pm.expect(productsObj).to.have.property('abstractSku').that.is.equal(pm.variables.get('abstract_sku1'));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?q=\" + pm.variables.get('abstract_sku1'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?q={{abstract_sku1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{abstract_sku1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - search by abstract sku - product doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "224ee700-ea9e-44d7-9762-ed30f47a1e87",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"        .that.have.property('sortParamLocalizedNames')",
									"        .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test.skip(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('products')",
									"            .that.is.an(\"array\")",
									"            .that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.not.have.property('relationships');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?q=\" + pm.variables.get('not_existing_sku'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?q={{not_existing_sku}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{not_existing_sku}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - search by concrete sku - product available",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "224ee700-ea9e-44d7-9762-ed30f47a1e87",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"        .that.have.property('sortParamLocalizedNames')",
									"        .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(1);",
									"        let productsObj = _.first(data.attributes.abstractProducts);",
									"        pm.expect(productsObj).to.have.property('images').that.is.an('array');",
									"        pm.expect(productsObj).to.have.property('price').that.is.a('number');",
									"        pm.expect(productsObj).to.have.property('abstractName').that.is.a('string');",
									"        pm.expect(productsObj).to.have.property('prices').that.is.an('array');",
									"        pm.expect(productsObj).to.have.property('abstractSku').that.is.equal(pm.variables.get('abstract_sku1'));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?q=\" + pm.variables.get('concrete_sku1'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?q={{concrete_sku1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{concrete_sku1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - search by concrete sku - product available",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "224ee700-ea9e-44d7-9762-ed30f47a1e87",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"        .that.have.property('sortParamLocalizedNames')",
									"        .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(1);",
									"        let productsObj = _.first(data.attributes.abstractProducts);",
									"        pm.expect(productsObj).to.have.property('images').that.is.an('array');",
									"        pm.expect(productsObj).to.have.property('price').that.is.a('number');",
									"        pm.expect(productsObj).to.have.property('abstractName').that.is.a('string');",
									"        pm.expect(productsObj).to.have.property('prices').that.is.an('array');",
									"        pm.expect(productsObj).to.have.property('abstractSku').that.is.equal(pm.variables.get('abstract_sku1'));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?q=\" + pm.variables.get('concrete_sku2'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?q={{concrete_sku2}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{concrete_sku2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - empty search criteria",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f9e41fe-77ae-4092-9820-c650a43c5ea5",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?q=\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?q=",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "q",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - wrong query",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "224ee700-ea9e-44d7-9762-ed30f47a1e87",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error status is 404\", function() {",
									"    pm.expect(jsonData.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalogsearch?q=",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalogsearch"
							],
							"query": [
								{
									"key": "q",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f58d3af6-3b43-45c4-afd5-6acbdddd719f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "14564ad4-1ccd-473b-9e0b-2b87778e1695",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Search for a product by Name",
			"item": [
				{
					"name": "Search by abstract sku name - product available",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "224ee700-ea9e-44d7-9762-ed30f47a1e87",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"        .that.have.property('sortParamLocalizedNames')",
									"        .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test.skip(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('products')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(parseInt(pm.variables.get('ipp_default')));",
									"        let productsObj = data.attributes.products[0];",
									"        pm.expect(productsObj).to.have.property('images').that.is.an('array');",
									"        pm.expect(productsObj).to.have.property('price').that.is.a('number');",
									"        pm.expect(productsObj).to.have.property('abstractName').that.is.a('string');",
									"        pm.expect(productsObj).to.have.property('prices').that.is.an('array');",
									"        pm.expect(productsObj).to.have.property('abstractSku').that.is.equal(pm.variables.get('abstract_sku1'));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?q=\" + pm.variables.get('name_abstract_sku1'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?q={{name_abstract_sku1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{name_abstract_sku1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by abstract sku name - product doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "224ee700-ea9e-44d7-9762-ed30f47a1e87",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"        .that.have.property('sortParamLocalizedNames')",
									"        .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test.skip(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('products')",
									"            .that.is.an(\"array\")",
									"            .that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.not.have.property('relationships');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?q=test_product_does_not_exist\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?q=test_product_does_not_exist",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "q",
									"value": "test_product_does_not_exist"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "699020a7-e56d-4b68-8809-7ccd145d5cb8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "49a6c413-0be2-47be-89e0-5a1b9b638b98",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Search for a product by attributes",
			"item": [
				{
					"name": "Search a product - search by attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "224ee700-ea9e-44d7-9762-ed30f47a1e87",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"        .that.have.property('sortParamLocalizedNames')",
									"        .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(parseInt(pm.variables.get('ipp_default')));",
									"        ",
									"        let productsArr = data.attributes.abstractProducts;",
									"        productsArr.forEach(function (product) {",
									"            pm.expect(product).to.have.property(\"abstractName\")",
									"                .that.have.string(pm.variables.get('brand_name1'))",
									"                .and.not.have.string(pm.variables.get('brand_name2'));",
									"            pm.expect(product).to.have.property('abstractSku')",
									"                .that.not.equal(pm.variables.get('product_sku_bn2_c2'));",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?q=\" + pm.variables.get('brand_name1'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?q={{brand_name1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{brand_name1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - several values in search criteria",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "224ee700-ea9e-44d7-9762-ed30f47a1e87",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"        .that.have.property('sortParamLocalizedNames')",
									"        .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\");",
									"        pm.expect(data.attributes.abstractProducts[0]).to.have.property('abstractSku')",
									"                .that.is.equal(pm.variables.get('product_sku_bn1_c2'));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?q=\" + pm.variables.get('brand_name1') + \" \" + pm.variables.get('color2'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?q={{brand_name1}}+{{color2}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{brand_name1}}+{{color2}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search for a product with price filters",
			"item": [
				{
					"name": "Search a product - min and max prices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"        .that.have.property('sortParamLocalizedNames')",
									"        .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts').that.is.an(\"array\");",
									"        ",
									"        let productsArr = data.attributes.abstractProducts;",
									"        productsArr.forEach(function (product) {",
									"            pm.expect(product).to.have.property(\"price\").that.is.a('number');",
									"            pm.expect(product.price >= Number(pm.variables.get('min_price')) * 100).is.true;",
									"            pm.expect(product.price <= Number(pm.variables.get('max_price')) * 100).is.true;",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?q=\" + pm.variables.get('brand_name1') + \"&price[min]=\" + pm.variables.get('min_price') + \"&price[max]=\" + pm.variables.get('max_price'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?q={{brand_name1}}&price%5Bmin%5D={{min_price}}&price%5Bmax%5D={{max_price}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{brand_name1}}"
								},
								{
									"key": "price%5Bmin%5D",
									"value": "{{min_price}}"
								},
								{
									"key": "price%5Bmax%5D",
									"value": "{{max_price}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - only min price",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"        .that.have.property('sortParamLocalizedNames')",
									"        .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts').that.is.an(\"array\");",
									"        ",
									"        let productsArr = data.attributes.abstractProducts;",
									"        productsArr.forEach(function (product) {",
									"            pm.expect(product).to.have.property(\"price\").that.is.a('number');",
									"            pm.expect(product.price >= Number(pm.variables.get('min_price')) * 100).is.true;",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?q=\" + pm.variables.get('brand_name1') + \"&price[min]=\" + pm.variables.get('min_price'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?q={{brand_name1}}&price%5Bmin%5D={{min_price}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{brand_name1}}"
								},
								{
									"key": "price%5Bmin%5D",
									"value": "{{min_price}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - only max price",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"        .that.have.property('sortParamLocalizedNames')",
									"        .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts').that.is.an(\"array\");",
									"        ",
									"        let productsArr = data.attributes.abstractProducts;",
									"        productsArr.forEach(function (product) {",
									"            pm.expect(product).to.have.property(\"price\").that.is.a('number');",
									"            pm.expect(product.price <= Number(pm.variables.get('max_price')) * 100).is.true;",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?q=\" + pm.variables.get('brand_name1') + \"&price[max]=\" + pm.variables.get('max_price'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?q={{brand_name1}}&price%5Bmax%5D={{max_price}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{brand_name1}}"
								},
								{
									"key": "price%5Bmax%5D",
									"value": "{{max_price}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - min and max prices equal",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"        .that.have.property('sortParamLocalizedNames')",
									"        .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts').that.is.an(\"array\");",
									"        ",
									"        let productsArr = data.attributes.abstractProducts;",
									"        productsArr.forEach(function (product) {",
									"            pm.expect(product).to.have.property(\"price\").that.is.a('number');",
									"            pm.expect(product.price >= Number(pm.variables.get('min_price')) * 100).is.true;",
									"        pm.expect(product.price <= Number(pm.variables.get('min_price')) * 100).is.true;",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?q=\" + pm.variables.get('brand_name1') + \"&price[min]=\" + pm.variables.get('min_price') + \"&price[max]=\" + pm.variables.get('min_price'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?q={{brand_name1}}&price%5Bmin%5D={{min_price}}&price%5Bmax%5D={{min_price}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{brand_name1}}"
								},
								{
									"key": "price%5Bmin%5D",
									"value": "{{min_price}}"
								},
								{
									"key": "price%5Bmax%5D",
									"value": "{{min_price}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - min higher than max prices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"        .that.have.property('sortParamLocalizedNames')",
									"        .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test.skip(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.not.have.property('relationships');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?q=\" + pm.variables.get('brand_name1') + \"&price[min]=\" + pm.variables.get('max_price') + \"&price[max]=\" + pm.variables.get('min_price'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?q={{brand_name1}}&price%5Bmin%5D={{max_price}}&price%5Bmax%5D={{min_price}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{brand_name1}}"
								},
								{
									"key": "price%5Bmin%5D",
									"value": "{{max_price}}"
								},
								{
									"key": "price%5Bmax%5D",
									"value": "{{min_price}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - invalid value in min and  filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"        .that.have.property('sortParamLocalizedNames')",
									"        .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage',  parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test.skip(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.not.have.property('relationships');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?q=\" + pm.variables.get('brand_name1') + \"&price[min]=test&price[max]=!23\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?q={{brand_name1}}&price%5Bmin%5D=test&price%5Bmax%5D=!23",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{brand_name1}}"
								},
								{
									"key": "price%5Bmin%5D",
									"value": "test"
								},
								{
									"key": "price%5Bmax%5D",
									"value": "!23"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - error in endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "224ee700-ea9e-44d7-9762-ed30f47a1e87",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?prise[min]=\" + pm.variables.get('min_price') + \"&prise[max]=\" + pm.variables.get('max_price'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?prise%5Bmin%5D={{min_price}}&prise%5Bmax%5D={{max_price}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "prise%5Bmin%5D",
									"value": "{{min_price}}"
								},
								{
									"key": "prise%5Bmax%5D",
									"value": "{{max_price}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search for a product with brand filters",
			"item": [
				{
					"name": "Search a product - valid brand",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"   jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"   });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(parseInt(pm.variables.get('ipp_default')));",
									"        ",
									"        let productsArr = data.attributes.abstractProducts;",
									"        productsArr.forEach(function (product) {",
									"            pm.expect(product).to.have.property(\"abstractName\")",
									"                .that.have.string(pm.variables.get('brand_name1'))",
									"                .and.not.have.string(pm.variables.get('brand_name2'));",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?brand=\" + pm.variables.get('brand_name1'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?brand={{brand_name1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "brand",
									"value": "{{brand_name1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - multiple brands",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"   jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"   });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(parseInt(pm.variables.get('ipp_default')));",
									"        ",
									"        let productsArr = data.attributes.abstractProducts;",
									"        productsArr.forEach(function (product) {",
									"            pm.expect(product).to.have.property(\"abstractName\").that.is.a(\"string\");",
									"            pm.expect(",
									"                product.abstractName.indexOf(pm.variables.get('brand_name1')) !== -1 ",
									"                || product.abstractName.indexOf(pm.variables.get('brand_name2')) !== -1",
									"            ).to.be.true;",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?brand[0]=\" + pm.variables.get('brand_name1') + \"&brand[1]=\" + pm.variables.get('brand_name2'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?brand[]={{brand_name1}}&brand[]={{brand_name2}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "brand[]",
									"value": "{{brand_name1}}"
								},
								{
									"key": "brand[]",
									"value": "{{brand_name2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - empty brand",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"   jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"   });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?brand=\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?brand=",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "brand",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - not existing brand",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"   jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"   });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test.skip(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(jsonData.data[0].attributes)",
									"            .to.have.property('products')",
									"            .that.is.an(\"array\")",
									"            .that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.not.have.property('relationships');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?brand=test123\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?brand=test123",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "brand",
									"value": "test123"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - error in request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"   jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"   });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?brant=\" + pm.variables.get('brand_name1'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?brant={{brand_name1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "brant",
									"value": "{{brand_name1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - error in endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "224ee700-ea9e-44d7-9762-ed30f47a1e87",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error status is 404\", function() {",
									"    pm.expect(jsonData.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalogsearch?brand={{brand_name1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalogsearch"
							],
							"query": [
								{
									"key": "brand",
									"value": "{{brand_name1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - wrong method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "224ee700-ea9e-44d7-9762-ed30f47a1e87",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error status is 404\", function() {",
									"    pm.expect(jsonData.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalogsearch?brand={{brand_name1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalogsearch"
							],
							"query": [
								{
									"key": "brand",
									"value": "{{brand_name1}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search for a product with label filters",
			"item": [
				{
					"name": "Search for product with valid label",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(parseInt(pm.variables.get('ipp_default')));",
									"        ",
									"        let productsArr = data.attributes.abstractProducts;",
									"        productsArr.forEach(function (product) {",
									"            pm.expect(product).to.have.property(\"abstractName\")",
									"                .that.not.have.string(pm.variables.get('label1'));",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct value facet selected\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('valueFacets').that.is.an('array').that.is.not.empty;",
									"        let valueFacetsArray = data.attributes.valueFacets;",
									"        valueFacetsArray.forEach(function (valueFacet) {",
									"            if (valueFacet.name === 'label') {",
									"                pm.expect(valueFacet).to.have.property('activeValue').that.is.an('array').that.have.members([",
									"                    pm.variables.get('label1')",
									"                ]);",
									"            }",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product included\", function() {",
									"    pm.expect(jsonData).to.have.property(\"included\").that.is.an(\"array\").that.is.not.empty;",
									"    let includedArray = jsonData.included;",
									"    includedArray.forEach(function (included) {",
									"        if (included.type === 'abstract-products') {",
									"            pm.expect(included).to.have.property('relationships').that.is.an('object').that.have.property('product-labels');",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?label[0]=\" + pm.variables.get('label1'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?label[]={{label1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "label[]",
									"value": "{{label1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search for product with multiple valid labels",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(12);",
									"        ",
									"        let productsArr = data.attributes.abstractProducts;",
									"        productsArr.forEach(function (product) {",
									"            pm.expect(product).to.have.property(\"abstractName\")",
									"                .that.not.have.string(pm.variables.get('label1'))",
									"                .and.not.have.string(pm.variables.get('label2'));",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct value facet selected\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('valueFacets').that.is.an('array').that.is.not.empty;",
									"        let valueFacetsArray = data.attributes.valueFacets;",
									"        valueFacetsArray.forEach(function (valueFacet) {",
									"            if (valueFacet.name === 'label') {",
									"                pm.expect(valueFacet).to.have.property('activeValue').that.is.an('array').that.have.members([",
									"                    pm.variables.get('label1'),",
									"                    pm.variables.get('label2'),",
									"                ]);",
									"            }",
									"        });",
									"    });",
									"});",
									"",
									"// pm.skip.test(\"Has correct product included\", function() {",
									"//     pm.expect(jsonData).to.have.property(\"included\").that.is.an(\"array\").that.is.not.empty;",
									"//     let includedArray = jsonData.included;",
									"//     includedArray.forEach(function (included) {",
									"//         if (included.type === 'abstract-products') {",
									"//             pm.expect(included).to.have.property('relationships').that.is.an('object').that.have.property('product-labels');",
									"//         }",
									"//     });",
									"// });",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?label[0]=\" + pm.variables.get('label1') + \"&label[1]=\" + pm.variables.get('label2'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?label[]={{label1}}&label[]={{label2}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "label[]",
									"value": "{{label1}}"
								},
								{
									"key": "label[]",
									"value": "{{label2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search with empty label",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct value facet selected\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('valueFacets').that.is.an('array').that.is.not.empty;",
									"        let valueFacetsArray = data.attributes.valueFacets;",
									"        valueFacetsArray.forEach(function (valueFacet) {",
									"            if (valueFacet.name === 'label') {",
									"                pm.expect(valueFacet).to.have.property('activeValue').that.is.an('array').that.have.members(['']);",
									"            }",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?label[0]=\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?label[]=",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "label[]",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search with invalid label",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test.skip(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.not.have.property('relationships');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct value facet selected\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('valueFacets').that.is.an('array').that.is.not.empty;",
									"        let valueFacetsArray = data.attributes.valueFacets;",
									"        valueFacetsArray.forEach(function (valueFacet) {",
									"            if (valueFacet.name === 'label') {",
									"                pm.expect(valueFacet).to.have.property('activeValue')",
									"                    .that.is.an('array')",
									"                    .that.have.members(['test123']);",
									"            }",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?label[0]=test123\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?label[]=test123",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "label[]",
									"value": "test123"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search with invalid label parameter name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct value facet selected\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('valueFacets').that.is.an('array').that.is.not.empty;",
									"        let valueFacetsArray = data.attributes.valueFacets;",
									"        valueFacetsArray.forEach(function (valueFacet) {",
									"            if (valueFacet.name === 'label') {",
									"                pm.expect(valueFacet).to.have.property('activeValue').that.is.null;",
									"            }",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?lable[0]=\" + pm.variables.get('label1'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?lable[]={{label1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "lable[]",
									"value": "{{label1}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "efc369a4-4d09-4dfa-afa6-b374d898f248",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "cd688ca1-b16b-4c63-8645-29a7510cbd5b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Search for a product with color filters",
			"item": [
				{
					"name": "Search a product - valid color",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.not.empty;",
									"        ",
									"        let productsArr = data.attributes.abstractProducts;",
									"        productsArr.forEach(function (product) {",
									"            pm.expect(product).to.have.property(\"abstractName\")",
									"                .that.not.have.string(pm.variables.get('color1'));",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct value facet selected\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('valueFacets').that.is.an('array').that.is.not.empty;",
									"        let valueFacetsArray = data.attributes.valueFacets;",
									"        valueFacetsArray.forEach(function (valueFacet) {",
									"            if (valueFacet.name === 'color') {",
									"                pm.expect(valueFacet).to.have.property('activeValue').that.is.an('array').that.have.members([",
									"                    pm.variables.get('color1')",
									"                ]);",
									"            }",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product included\", function() {",
									"    pm.expect(jsonData).to.have.property(\"included\").that.is.an(\"array\").that.is.not.empty;",
									"    let includedArray = jsonData.included;",
									"    includedArray.forEach(function (included) {",
									"        if (included.type === 'abstract-products') {",
									"            pm.expect(included).to.have.property('attributes')",
									"                .that.is.an('object')",
									"                .that.have.property('attributes')",
									"                .that.is.an('object')",
									"                .that.have.property('color')",
									"                .that.equal(pm.variables.get('color1'));",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?color[0]=\" + pm.variables.get('color1'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?color[]={{color1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "color[]",
									"value": "{{color1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - multiple colors in request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.not.empty;",
									"        ",
									"        let productsArr = data.attributes.abstractProducts;",
									"        productsArr.forEach(function (product) {",
									"            pm.expect(product).to.have.property(\"abstractName\")",
									"                .that.not.have.string(pm.variables.get('color1'))",
									"                .and.not.have.string(pm.variables.get('color2'));",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct value facet selected\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('valueFacets').that.is.an('array').that.is.not.empty;",
									"        let valueFacetsArray = data.attributes.valueFacets;",
									"        valueFacetsArray.forEach(function (valueFacet) {",
									"            if (valueFacet.name === 'color') {",
									"                pm.expect(valueFacet).to.have.property('activeValue').that.is.an('array').that.have.members([",
									"                    pm.variables.get('color1'),",
									"                    pm.variables.get('color2'),",
									"                ]);",
									"            }",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product included\", function() {",
									"    pm.expect(jsonData).to.have.property(\"included\").that.is.an(\"array\").that.is.not.empty;",
									"    let includedArray = jsonData.included;",
									"    includedArray.forEach(function (included) {",
									"        if (included.type === 'abstract-products') {",
									"            pm.expect(included).to.have.property('attributes')",
									"                .that.is.an('object')",
									"                .that.have.property('attributes')",
									"                .that.is.an('object')",
									"                .that.have.property('color');",
									"            pm.expect(",
									"                included.attributes.attributes.color === pm.variables.get('color1')",
									"                || included.attributes.attributes.color === pm.variables.get('color2')",
									"            ).to.be.true;",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?color[0]=\" + pm.variables.get('color1') + \"&color[1]=\" + pm.variables.get('color2'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?color[]={{color1}}&color[]={{color2}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "color[]",
									"value": "{{color1}}"
								},
								{
									"key": "color[]",
									"value": "{{color2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - empty color",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct value facet selected\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('valueFacets')",
									"            .that.is.an('array')",
									"            .that.is.not.empty;",
									"        ",
									"        let valueFacetsArray = data.attributes.valueFacets;",
									"        valueFacetsArray.forEach(function (valueFacet) {",
									"            if (valueFacet.name === 'color') {",
									"                pm.expect(valueFacet).to.have.property('activeValue')",
									"                    .that.is.an('array')",
									"                    .that.have.members(['']);",
									"            }",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?color[0]=\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?color[]=",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "color[]",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - not existing color",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test.skip(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.not.have.property('relationships');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct value facet selected\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('valueFacets').that.is.an('array').that.is.not.empty;",
									"        let valueFacetsArray = data.attributes.valueFacets;",
									"        valueFacetsArray.forEach(function (valueFacet) {",
									"            if (valueFacet.name === 'color') {",
									"                pm.expect(valueFacet).to.have.property('activeValue')",
									"                    .that.is.an('array')",
									"                    .that.be.members(['test123']);",
									"            }",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?color[0]=test123\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?color[]=test123",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "color[]",
									"value": "test123"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - error in request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', 12);",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(12);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(12);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct value facet selected\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('valueFacets').that.is.an('array').that.is.not.empty;",
									"        let valueFacetsArray = data.attributes.valueFacets;",
									"        valueFacetsArray.forEach(function (valueFacet) {",
									"            if (valueFacet.name === 'label') {",
									"                pm.expect(valueFacet).to.have.property('activeValue').that.is.null;",
									"            }",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?colour[0]=\" + pm.variables.get('color1'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?colour[]={{color1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "colour[]",
									"value": "{{color1}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b100f4f6-0519-47ff-9a74-ead6228a8565",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f062dd2e-4185-4b25-96d4-294f1dda758f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Search for a product with weight filters",
			"item": [
				{
					"name": "Search a product - valid weight",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.not.empty;",
									"        ",
									"        let productsArr = data.attributes.abstractProducts;",
									"        productsArr.forEach(function (product) {",
									"            pm.expect(product).to.have.property(\"abstractName\")",
									"                .that.not.have.string(pm.variables.get('weight1'));",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct value facet selected\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('valueFacets').that.is.an('array').that.is.not.empty;",
									"        let valueFacetsArray = data.attributes.valueFacets;",
									"        valueFacetsArray.forEach(function (valueFacet) {",
									"            if (valueFacet.name === 'weight') {",
									"                pm.expect(valueFacet).to.have.property('activeValue')",
									"                .that.is.an('array')",
									"                .that.have.members([",
									"                    pm.variables.get('weight1')",
									"                ]);",
									"            }",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product included\", function() {",
									"    pm.expect(jsonData).to.have.property(\"included\").that.is.an(\"array\").that.is.not.empty;",
									"    let includedArray = jsonData.included;",
									"    includedArray.forEach(function (included) {",
									"        if (included.type === 'abstract-products') {",
									"            pm.expect(included).to.have.property('attributes')",
									"                .that.is.an('object')",
									"                .that.have.property('attributes')",
									"                .that.is.an('object')",
									"                .that.have.property('weight')",
									"                .that.equal(pm.variables.get('weight1'));",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?weight[0]=\" + pm.variables.get('weight1'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?weight[]={{weight1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "weight[]",
									"value": "{{weight1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - multiple weight values in request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.not.empty;",
									"        ",
									"        let productsArr = data.attributes.abstractProducts;",
									"        productsArr.forEach(function (product) {",
									"            pm.expect(product).to.have.property(\"abstractName\")",
									"                .that.not.have.string(pm.variables.get('label1'))",
									"                .and.not.have.string(pm.variables.get('label2'));",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct value facet selected\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('valueFacets')",
									"            .that.is.an('array')",
									"            .that.is.not.empty;",
									"        let valueFacetsArray = data.attributes.valueFacets;",
									"        valueFacetsArray.forEach(function (valueFacet) {",
									"            if (valueFacet.name === 'weight1') {",
									"                pm.expect(valueFacet).to.have.property('activeValue')",
									"                .that.is.an('array')",
									"                .that.have.members([",
									"                    pm.variables.get('weight1'),",
									"                    pm.variables.get('weight2'),",
									"                ]);",
									"            }",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product included\", function() {",
									"    pm.expect(jsonData).to.have.property(\"included\")",
									"        .that.is.an(\"array\")",
									"        .that.is.not.empty;",
									"    ",
									"    let includedArray = jsonData.included;",
									"    includedArray.forEach(function (included) {",
									"        if (included.type === 'abstract-products') {",
									"            pm.expect(included).to.have.property('attributes')",
									"                .that.is.an('object')",
									"                .that.have.property('attributes')",
									"                .that.is.an('object')",
									"                .that.have.property('weight');",
									"            pm.expect(",
									"                included.attributes.attributes.weight === pm.variables.get('weight1')",
									"                || included.attributes.attributes.weight === pm.variables.get('weight2')",
									"            ).to.be.true;",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?weight[0]=\" + pm.variables.get('weight1') + \"&weight[1]=\" + pm.variables.get('weight2'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?weight[]={{weight1}}&weight[]={{weight2}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "weight[]",
									"value": "{{weight1}}"
								},
								{
									"key": "weight[]",
									"value": "{{weight2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - empty weight",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct value facet selected\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('valueFacets')",
									"            .that.is.an('array')",
									"            .that.is.not.empty;",
									"        ",
									"        let valueFacetsArray = data.attributes.valueFacets;",
									"        valueFacetsArray.forEach(function (valueFacet) {",
									"            if (valueFacet.name === 'weight') {",
									"                pm.expect(valueFacet).to.have.property('activeValue')",
									"                    .that.is.an('array')",
									"                    .that.have.members(['']);",
									"            }",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?weight[0]=\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?weight[]=",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "weight[]",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - not existing weight",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage', parseInt(0));",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test.skip(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.not.have.property('relationships');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct value facet selected\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('valueFacets').that.is.an('array').that.is.not.empty;",
									"        let valueFacetsArray = data.attributes.valueFacets;",
									"        valueFacetsArray.forEach(function (valueFacet) {",
									"            if (valueFacet.name === 'weight') {",
									"                pm.expect(valueFacet).to.have.property('activeValue')",
									"                    .that.is.an('array')",
									"                    .that.be.members(['test123']);",
									"            }",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?weight[0]=test123\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?weight[]=test123",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "weight[]",
									"value": "test123"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - error in request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct value facet selected\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('valueFacets').that.is.an('array').that.is.not.empty;",
									"        let valueFacetsArray = data.attributes.valueFacets;",
									"        valueFacetsArray.forEach(function (valueFacet) {",
									"            if (valueFacet.name === 'label') {",
									"                pm.expect(valueFacet).to.have.property('activeValue').that.is.null;",
									"            }",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?weit[0]=\" + pm.variables.get('weight1'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?weit[]={{weight1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "weit[]",
									"value": "{{weight1}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "eb571057-d8b8-4a9d-a500-66156a4f497a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3e75710d-3661-497a-bd85-5b6ff9ae0046",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Search for a product with storage capacity filters",
			"item": [
				{
					"name": "Search a product - valid weight",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.not.empty;",
									"        ",
									"        let productsArr = data.attributes.abstractProducts;",
									"        productsArr.forEach(function (product) {",
									"            pm.expect(product).to.have.property(\"abstractName\")",
									"                .that.not.have.string(pm.variables.get('storage_capacity1'));",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct value facet selected\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('valueFacets').that.is.an('array').that.is.not.empty;",
									"        let valueFacetsArray = data.attributes.valueFacets;",
									"        valueFacetsArray.forEach(function (valueFacet) {",
									"            if (valueFacet.name === 'storage_capacity') {",
									"                pm.expect(valueFacet).to.have.property('activeValue')",
									"                .that.is.an('array')",
									"                .that.have.members([",
									"                    pm.variables.get('storage_capacity1')",
									"                ]);",
									"            }",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product included\", function() {",
									"    pm.expect(jsonData).to.have.property(\"included\").that.is.an(\"array\").that.is.not.empty;",
									"    let includedArray = jsonData.included;",
									"    includedArray.forEach(function (included) {",
									"        if (included.type === 'abstract-products') {",
									"            pm.expect(included).to.have.property('attributes')",
									"                .that.is.an('object')",
									"                .that.have.property('attributeMap')",
									"                .that.is.an('object')",
									"                .that.have.property('super_attributes')",
									"                .that.is.an('object')",
									"                .that.have.property('storage_capacity')",
									"                .that.is.an('array')",
									"                .that.include.members([",
									"                    pm.variables.get('storage_capacity1')",
									"                ]);",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?storage_capacity[0]=\" + pm.variables.get('storage_capacity1'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?storage_capacity[]={{storage_capacity1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "storage_capacity[]",
									"value": "{{storage_capacity1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - multiple storage capacity values in request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.not.empty;",
									"        ",
									"        let productsArr = data.attributes.abstractProducts;",
									"        productsArr.forEach(function (product) {",
									"            pm.expect(product).to.have.property(\"abstractName\")",
									"                .that.not.have.string(pm.variables.get('label1'))",
									"                .and.not.have.string(pm.variables.get('label2'));",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct value facet selected\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('valueFacets')",
									"            .that.is.an('array')",
									"            .that.is.not.empty;",
									"        let valueFacetsArray = data.attributes.valueFacets;",
									"        valueFacetsArray.forEach(function (valueFacet) {",
									"            if (valueFacet.name === 'storage_capacity1') {",
									"                pm.expect(valueFacet).to.have.property('activeValue')",
									"                .that.is.an('array')",
									"                .that.have.members([",
									"                    pm.variables.get('storage_capacity1'),",
									"                    pm.variables.get('storage_capacity2'),",
									"                ]);",
									"            }",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product included\", function() {",
									"    pm.expect(jsonData).to.have.property(\"included\")",
									"        .that.is.an(\"array\")",
									"        .that.is.not.empty;",
									"    ",
									"    let includedArray = jsonData.included;",
									"    includedArray.forEach(function (included) {",
									"        if (included.type === 'abstract-products') {",
									"            pm.expect(included).to.have.property('attributes')",
									"                .that.is.an('object')",
									"                .that.have.property('attributeMap')",
									"                .that.is.an('object')",
									"                .that.have.property('super_attributes')",
									"                .that.is.an('object')",
									"                .that.have.property('storage_capacity')",
									"                .that.is.an('array');",
									"                ",
									"            let haveCapacity1 = false;",
									"            let haveCapacity2 = false;",
									"            included.attributes.attributeMap.super_attributes.storage_capacity.forEach(function (capacity) {",
									"                if (capacity === pm.variables.get('storage_capacity1')) {",
									"                    haveCapacity1 = true;",
									"                }",
									"                if (capacity === pm.variables.get('storage_capacity2')) {",
									"                    haveCapacity2 = true;",
									"                }",
									"            });",
									"            pm.expect(haveCapacity1 === true || haveCapacity2 === 2).to.be.true;",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?storage_capacity[0]=\" + pm.variables.get('storage_capacity1') + \"&storage_capacity[1]=\" + pm.variables.get('storage_capacity2'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?storage_capacity[]={{storage_capacity1}}&storage_capacity[]={{storage_capacity2}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "storage_capacity[]",
									"value": "{{storage_capacity1}}"
								},
								{
									"key": "storage_capacity[]",
									"value": "{{storage_capacity2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - empty capacity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct value facet selected\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('valueFacets')",
									"            .that.is.an('array')",
									"            .that.is.not.empty;",
									"        ",
									"        let valueFacetsArray = data.attributes.valueFacets;",
									"        valueFacetsArray.forEach(function (valueFacet) {",
									"            if (valueFacet.name === 'storage_capacity') {",
									"                pm.expect(valueFacet).to.have.property('activeValue')",
									"                    .that.is.an('array')",
									"                    .that.have.members(['']);",
									"            }",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?storage_capacity[0]=\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?storage_capacity[]=",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "storage_capacity[]",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - not existing capacity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test.skip(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.not.have.property('relationships');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct value facet selected\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('valueFacets').that.is.an('array').that.is.not.empty;",
									"        let valueFacetsArray = data.attributes.valueFacets;",
									"        valueFacetsArray.forEach(function (valueFacet) {",
									"            if (valueFacet.name === 'storage_capacity') {",
									"                pm.expect(valueFacet).to.have.property('activeValue')",
									"                    .that.is.an('array')",
									"                    .that.be.members(['test123']);",
									"            }",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?storage_capacity[0]=test123\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?storage_capacity[]=test123",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "storage_capacity[]",
									"value": "test123"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - error in request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', 12);",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(12);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(12);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct value facet selected\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('valueFacets').that.is.an('array').that.is.not.empty;",
									"        let valueFacetsArray = data.attributes.valueFacets;",
									"        valueFacetsArray.forEach(function (valueFacet) {",
									"            if (valueFacet.name === 'label') {",
									"                pm.expect(valueFacet).to.have.property('activeValue').that.is.null;",
									"            }",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?storage_capasity[0]=\" + pm.variables.get('storage_capacity1'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?storage_capasity[]={{storage_capacity1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "storage_capasity[]",
									"value": "{{storage_capacity1}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "eb571057-d8b8-4a9d-a500-66156a4f497a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3e75710d-3661-497a-bd85-5b6ff9ae0046",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Search for a product with rating filters",
			"item": [
				{
					"name": "Search a product - valid rating",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"        .that.have.property('sortParamLocalizedNames')",
									"        .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct range facet selected\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('rangeFacets')",
									"            .that.is.an('array')",
									"            .that.is.not.empty;",
									"        let rangeFacetsArray = data.attributes.rangeFacets;",
									"        rangeFacetsArray.forEach(function (rangeFacet) {",
									"            if (rangeFacet.name === 'rating') {",
									"                pm.expect(rangeFacet).to.have.property('activeMin')",
									"                .that.is.a('number')",
									"                .that.equals(parseInt(pm.variables.get('rating1')));",
									"            }",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.not.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?rating[min]=\" + pm.variables.get('rating1'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?rating[min]={{rating1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "rating[min]",
									"value": "{{rating1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - valid rating - no matching products",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"        .that.have.property('sortParamLocalizedNames')",
									"        .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct range facet selected\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('rangeFacets')",
									"            .that.is.an('array')",
									"            .that.is.not.empty;",
									"        let rangeFacetsArray = data.attributes.rangeFacets;",
									"        rangeFacetsArray.forEach(function (rangeFacet) {",
									"            if (rangeFacet.name === 'rating') {",
									"                pm.expect(rangeFacet).to.have.property('activeMin')",
									"                .that.is.a('number')",
									"                .that.equals(parseInt(pm.variables.get('rating2')));",
									"            }",
									"        });",
									"    });",
									"});",
									"",
									"pm.test.skip(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.not.have.property('relationships');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?rating[min]=\" + pm.variables.get('rating2'));",
									"});",
									"",
									"postman.setNextRequest(\"Search a product - valid rating - float number\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?rating%5Bmin%5D={{rating2}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "rating%5Bmin%5D",
									"value": "{{rating2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TODO Search a product - empty rating",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct range facet selected\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('rangeFacets')",
									"            .that.is.an('array')",
									"            .that.is.not.empty;",
									"        let rangeFacetsArray = data.attributes.rangeFacets;",
									"        rangeFacetsArray.forEach(function (rangeFacet) {",
									"            if (rangeFacet.name === 'rating') {",
									"                pm.expect(rangeFacet).to.have.property('activeMin')",
									"                .that.is.a('number')",
									"                .that.equals('');",
									"            }",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('products')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?rating[0]=\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?rating[min]=",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "rating[min]",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - valid rating - float number",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"        .that.have.property('sortParamLocalizedNames')",
									"        .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct range facet selected\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('rangeFacets')",
									"            .that.is.an('array')",
									"            .that.is.not.empty;",
									"        let rangeFacetsArray = data.attributes.rangeFacets;",
									"        rangeFacetsArray.forEach(function (rangeFacet) {",
									"            if (rangeFacet.name === 'rating') {",
									"                pm.expect(rangeFacet).to.have.property('activeMin')",
									"                .that.is.a('number')",
									"                .that.equals(parseInt(pm.variables.get('rating3')));",
									"            }",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.not.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?rating[min]=\" + pm.variables.get('rating3'));",
									"});",
									"",
									"postman.setNextRequest(\"Search a product - error in request\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?rating[min]={{rating3}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "rating[min]",
									"value": "{{rating3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TODO Search a product - invalid rating",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"        .that.have.property('sortParamLocalizedNames')",
									"        .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct range facet selected\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('rangeFacets')",
									"            .that.is.an('array')",
									"            .that.is.not.empty;",
									"        let rangeFacetsArray = data.attributes.rangeFacets;",
									"        rangeFacetsArray.forEach(function (rangeFacet) {",
									"            if (rangeFacet.name === 'rating') {",
									"                pm.expect(rangeFacet).to.have.property('activeMin')",
									"                .that.is.a('number')",
									"                .that.equals(Number(pm.variables.get('rating2')));",
									"            }",
									"        });",
									"    });",
									"});",
									"",
									"pm.test.skip(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.not.have.property('relationships');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?rating[min]=\" + pm.variables.get('rating2'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?rating%5Bmin%5D=test123",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "rating%5Bmin%5D",
									"value": "test123"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - error in request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?rating-min=\" + pm.variables.get('rating1'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?rating-min={{rating1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "rating-min",
									"value": "{{rating1}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search for a product with category filters",
			"item": [
				{
					"name": "Search a product - valid category",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.not.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct value facet selected\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('valueFacets').that.is.an('array').that.is.not.empty;",
									"        let valueFacetsArray = data.attributes.valueFacets;",
									"        valueFacetsArray.forEach(function (valueFacet) {",
									"            if (valueFacet.name === 'category') {",
									"                pm.expect(valueFacet).to.have.property('activeValue', pm.variables.get('category1'));",
									"            }",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product included\", function() {",
									"    pm.expect(jsonData).to.have.property(\"included\")",
									"        .that.is.an(\"array\")",
									"        .that.is.not.empty;",
									"    ",
									"    let includedArray = jsonData.included;",
									"    includedArray.forEach(function (included) {",
									"        if (included.type === 'abstract-products') {",
									"            pm.expect(included).to.have.property('relationships')",
									"                .that.is.an('object')",
									"                .that.have.property('category-nodes')",
									"                .that.is.an('object')",
									"                .that.have.property('data')",
									"                .that.is.an('array');",
									"            ",
									"            let haveCategory1 = false;",
									"            included.relationships['category-nodes'].data.forEach(function (categoryNode) {",
									"                if (categoryNode.id === pm.variables.get('category1')) {",
									"                    haveCategory1 = true;",
									"                }",
									"            });",
									"            pm.expect(haveCategory1).to.be.true;",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?category=\" + pm.variables.get('category1'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?category={{category1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "category",
									"value": "{{category1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - empty category value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct value facet selected\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('valueFacets')",
									"            .that.is.an('array')",
									"            .that.is.not.empty;",
									"        ",
									"        let valueFacetsArray = data.attributes.valueFacets;",
									"        valueFacetsArray.forEach(function (valueFacet) {",
									"            if (valueFacet.name === 'category') {",
									"                pm.expect(valueFacet).to.have.property('activeValue', '');",
									"            }",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?category=\");",
									"});",
									"",
									"postman.setNextRequest(\"Search a product - error in request\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?category=",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "category",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TODO Search a product - invalid category",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test.skip(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('products')",
									"            .that.is.an(\"array\")",
									"            .that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.not.have.property('relationships');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct value facet selected\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('valueFacets').that.is.an('array').that.is.not.empty;",
									"        let valueFacetsArray = data.attributes.valueFacets;",
									"        valueFacetsArray.forEach(function (valueFacet) {",
									"            if (valueFacet.name === 'category') {",
									"                pm.expect(valueFacet).to.have.property('activeValue', 'test123');",
									"            }",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?category=test123\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?category=test123",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "category",
									"value": "test123"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - error in request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct value facet selected\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('valueFacets').that.is.an('array').that.is.not.empty;",
									"        let valueFacetsArray = data.attributes.valueFacets;",
									"        valueFacetsArray.forEach(function (valueFacet) {",
									"            if (valueFacet.name === 'category') {",
									"                pm.expect(valueFacet).to.have.property('activeValue').that.is.null;",
									"            }",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?categories=\" + pm.variables.get('category1'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?categories={{category1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "categories",
									"value": "{{category1}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "eb571057-d8b8-4a9d-a500-66156a4f497a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3e75710d-3661-497a-bd85-5b6ff9ae0046",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Search for a product with search parameters",
			"item": [
				{
					"name": "Search a product - set a page of search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    let paginationObj = jsonData.data[0].attributes.pagination;",
									"    pm.expect(paginationObj).to.be.an('object');",
									"    pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"    pm.expect(paginationObj).to.have.property('currentPage', parseInt(pm.variables.get('page1')));",
									"    pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"    pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"    pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"    pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"    pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"    pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"    pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"        .that.is.an('array').that.have.members([12, 24, 36]);",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?q=\" + pm.variables.get('brand_name1') + '&page=' + pm.variables.get('page1'));",
									"});",
									"",
									"postman.setNextRequest(\"Search a product - invalid value for page of search\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?q={{brand_name1}}&page={{page1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{brand_name1}}"
								},
								{
									"key": "page",
									"value": "{{page1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TODO Search a product - not existing page of search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage', parseInt(pm.variables.get('ipp1')));",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp1')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(parseInt(pm.variables.get('ipp1')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp1')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?category=\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?q={{brand_name1}}&page={{page2}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{brand_name1}}"
								},
								{
									"key": "page",
									"value": "{{page2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - invalid value for page of search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage', 1);",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?q=\" + pm.variables.get('brand_name1') +\"&page=test123\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?q={{brand_name1}}&page=test123",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{brand_name1}}"
								},
								{
									"key": "page",
									"value": "test123"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - set products per page",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp1')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(pm.variables.get('ipp1'));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        ",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?q=\" + pm.variables.get('brand_name1') + '&ipp=' + pm.variables.get('ipp1'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?q={{brand_name1}}&ipp={{ipp1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{brand_name1}}"
								},
								{
									"key": "ipp",
									"value": "{{ipp1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - invalid number for productsPerPage",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(pm.variables.get('ipp_default'));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        ",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?q=\" + pm.variables.get('brand_name1') + '&ipp=3');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?q={{brand_name1}}&ipp=3",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{brand_name1}}"
								},
								{
									"key": "ipp",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - invalid value for productsPerPage",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(pm.variables.get('ipp_default'));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        ",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?q=\" + pm.variables.get('brand_name1') + '&ipp=test123');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?q={{brand_name1}}&ipp=test123",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{brand_name1}}"
								},
								{
									"key": "ipp",
									"value": "test123"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - set sorting order name asc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('sort')",
									"            .that.is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"        pm.expect(data.attributes.sort).to.have.property('currentSortParam', pm.variables.get('sort_name_asc'));",
									"        pm.expect(data.attributes.sort).to.have.property('currentSortOrder', pm.variables.get('sort_order_asc'));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.not.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        ",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?q=\" + pm.variables.get('brand_name1') + '&sort=' + pm.variables.get('sort_name_asc'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?q={{brand_name1}}&sort={{sort_name_asc}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{brand_name1}}"
								},
								{
									"key": "sort",
									"value": "{{sort_name_asc}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - set sorting order name desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('sort')",
									"            .that.is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"        pm.expect(data.attributes.sort).to.have.property('currentSortParam', pm.variables.get('sort_name_desc'));",
									"        pm.expect(data.attributes.sort).to.have.property('currentSortOrder', pm.variables.get('sort_order_desc'));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.not.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        ",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?q=\" + pm.variables.get('brand_name1') + '&sort=' + pm.variables.get('sort_name_desc'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?q={{brand_name1}}&sort={{sort_name_desc}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{brand_name1}}"
								},
								{
									"key": "sort",
									"value": "{{sort_name_desc}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - set sorting order price asc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function(data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function(data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function(data) {",
									"        pm.expect(data.attributes).to.have.property('sort')",
									"            .that.is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"        pm.expect(data.attributes.sort).to.have.property('currentSortParam', pm.variables.get('sort_price_asc'));",
									"        pm.expect(data.attributes.sort).to.have.property('currentSortOrder', pm.variables.get('sort_order_asc'));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function(data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function(data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function(data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.not.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function(data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function(data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?q=\" + pm.variables.get('brand_name1') + '&sort=' + pm.variables.get('sort_price_asc'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?q={{brand_name1}}&sort={{sort_price_asc}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{brand_name1}}"
								},
								{
									"key": "sort",
									"value": "{{sort_price_asc}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - set sorting order price desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function(data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function(data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function(data) {",
									"        pm.expect(data.attributes).to.have.property('sort')",
									"            .that.is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"        pm.expect(data.attributes.sort).to.have.property('currentSortParam', pm.variables.get('sort_price_desc'));",
									"        pm.expect(data.attributes.sort).to.have.property('currentSortOrder', pm.variables.get('sort_order_desc'));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function(data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function(data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function(data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.not.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function(data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function(data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?q=\" + pm.variables.get('brand_name1') + '&sort=' + pm.variables.get('sort_price_desc'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?q={{brand_name1}}&sort={{sort_price_desc}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{brand_name1}}"
								},
								{
									"key": "sort",
									"value": "{{sort_price_desc}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - set sorting order rating",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function(data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function(data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function(data) {",
									"        pm.expect(data.attributes).to.have.property('sort')",
									"            .that.is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"        pm.expect(data.attributes.sort).to.have.property('currentSortParam', pm.variables.get('sort_rating'));",
									"        pm.expect(data.attributes.sort).to.have.property('currentSortOrder', pm.variables.get('sort_order_desc'));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function(data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function(data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function(data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.not.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function(data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function(data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?q=\" + pm.variables.get('brand_name1') + '&sort=' + pm.variables.get('sort_rating'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?q={{brand_name1}}&sort={{sort_rating}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{brand_name1}}"
								},
								{
									"key": "sort",
									"value": "{{sort_rating}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - multiple parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "224ee700-ea9e-44d7-9762-ed30f47a1e87",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(jsonData.data[0].attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    })",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage', 1);",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts').that.is.an(\"array\");",
									"        pm.expect(data.attributes.abstractProducts[0]).to.have.property('abstractName')",
									"            .that.has.string(pm.variables.get('brand_name2'));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.pagination.config.parameterName).to.eql(\"page\");",
									"    pm.expect(jsonData.data[0].attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"    pm.expect(jsonData.data[0].attributes.pagination.config.defaultItemsPerPage).to.eql(12);",
									"});",
									"",
									"pm.test(\"Has correct product included\", function() {",
									"    pm.expect(jsonData).to.have.property(\"included\").that.is.an(\"array\").that.is.not.empty;",
									"    let includedArray = jsonData.included;",
									"    includedArray.forEach(function (included) {",
									"        if (included.type === 'abstract-products') {",
									"            pm.expect(included).to.have.property('relationships')",
									"                .that.is.an('object')",
									"                .that.have.property('product-labels');",
									"            pm.expect(included).to.have.property('attributes')",
									"                .that.is.an('object')",
									"                .that.have.property('attributes')",
									"                .that.is.an('object')",
									"                .that.have.property('color')",
									"                .that.equal(pm.variables.get('color1'));",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product label included\", function() {",
									"    pm.expect(jsonData).to.have.property(\"included\").that.is.an(\"array\").that.is.not.empty;",
									"    let includedArray = jsonData.included;",
									"    includedArray.forEach(function (included) {",
									"        if (included.type === 'product-labels') {",
									"            pm.expect(included).to.have.property('attributes')",
									"                .that.is.an('object')",
									"                .that.have.property('name', pm.variables.get('label1'));",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?label=\" + pm.variables.get('label1') + \"&brand=\" + pm.variables.get('brand_name2') + \"&color=\" + pm.variables.get('color1'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?label={{label1}}&brand={{brand_name2}}&color={{color1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "label",
									"value": "{{label1}}"
								},
								{
									"key": "brand",
									"value": "{{brand_name2}}"
								},
								{
									"key": "color",
									"value": "{{color1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - search + filter parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "224ee700-ea9e-44d7-9762-ed30f47a1e87",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"        pm.expect(data.attributes.sort).to.have.property('currentSortParam', pm.variables.get('sort_rating'));",
									"        pm.expect(data.attributes.sort).to.have.property('currentSortOrder', pm.variables.get('sort_order_desc'));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(jsonData.data[0].attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    })",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage', 1);",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts').that.is.an(\"array\");",
									"        pm.expect(data.attributes.abstractProducts[0]).to.have.property('abstractName')",
									"            .that.has.string(pm.variables.get('brand_name1'));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    pm.expect(jsonData.data[0].attributes.pagination.config.parameterName).to.eql(\"page\");",
									"    pm.expect(jsonData.data[0].attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"    pm.expect(jsonData.data[0].attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"});",
									"",
									"pm.test(\"Has correct product included\", function() {",
									"    pm.expect(jsonData).to.have.property(\"included\").that.is.an(\"array\").that.is.not.empty;",
									"    let includedArray = jsonData.included;",
									"    includedArray.forEach(function (included) {",
									"        if (included.type === 'abstract-products') {",
									"            pm.expect(included).to.have.property('relationships')",
									"                .that.is.an('object')",
									"                .that.have.property('product-labels')",
									"                .that.is.an('object')",
									"                .that.have.property('data')",
									"                .that.is.an('array')",
									"                .that.is.not.empty;",
									"            ",
									"            let haveCorrectLabel = false;",
									"            included.relationships['product-labels'].data.forEach(function (data) {",
									"                pm.expect(data).to.have.property('id').that.is.a('string');",
									"                if (data.id === pm.variables.get('label1_id')) {",
									"                    haveCorrectLabel = true;",
									"                }",
									"            });",
									"            pm.expect(haveCorrectLabel).to.be.true;",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?q=\" + pm.variables.get('brand_name1') + \"&label=\" + pm.variables.get('label1') + \"&sort=\" + pm.variables.get('sort_rating'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?q={{brand_name1}}&label={{label1}}&sort={{sort_rating}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{brand_name1}}"
								},
								{
									"key": "label",
									"value": "{{label1}}"
								},
								{
									"key": "sort",
									"value": "{{sort_rating}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "eb571057-d8b8-4a9d-a500-66156a4f497a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3e75710d-3661-497a-bd85-5b6ff9ae0046",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Currency in search results",
			"item": [
				{
					"name": "Search a product - set a currency",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function(data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function(data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function(data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function(data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function(data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function(data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function(data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function(data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?currency=\" + pm.variables.get('currency_chf'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?currency={{currency_chf}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "currency",
									"value": "{{currency_chf}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - not existing in system currency",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Has correct error code\", function () {",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"313\");",
									"});",
									"",
									"pm.test(\"Error status is 400\", function() {",
									"    pm.expect(jsonData.errors[0].status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Has correct error detail\", function () {",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Currency is invalid.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?currency={{currency_jpy}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "currency",
									"value": "{{currency_jpy}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - empty value for currency",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bb6923-1126-4bfc-a34d-bdf1aea036df",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?currency=\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?currency=",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "currency",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - search + currency parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "224ee700-ea9e-44d7-9762-ed30f47a1e87",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(\"catalog-search\");",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamNames')",
									"            .that.is.an('array')",
									"            .that.have.members([",
									"                'rating',",
									"                'name_asc',",
									"                'name_desc',",
									"                'price_asc',",
									"                'price_desc'",
									"            ]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct localized sorting returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.sort).is.an('object')",
									"            .that.have.property('sortParamLocalizedNames')",
									"            .that.is.an('object');",
									"        let expectedKeys = [",
									"            'rating',",
									"            'name_asc',",
									"            'name_desc',",
									"            'price_asc',",
									"            'price_desc'",
									"        ];",
									"        expectedKeys.each(function(key) {",
									"            pm.expect(data.attributes.sort.sortParamLocalizedNames).to.have.own.property(key);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        let paginationObj = data.attributes.pagination;",
									"        pm.expect(paginationObj).to.be.an('object');",
									"        pm.expect(paginationObj).to.have.property('numFound').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('maxPage').that.is.a('number');",
									"        pm.expect(paginationObj).to.have.property('currentItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj).to.have.property('config').that.is.an('object');",
									"        pm.expect(paginationObj.config).to.have.a.property('parameterName', 'page');",
									"        pm.expect(paginationObj.config).to.have.a.property('itemsPerPageParameterName', 'ipp');",
									"        pm.expect(paginationObj.config).to.have.a.property('defaultItemsPerPage', parseInt(pm.variables.get('ipp_default')));",
									"        pm.expect(paginationObj.config).to.have.a.property('validItemsPerPageOptions')",
									"            .that.is.an('array').that.have.members([12, 24, 36]);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(parseInt(pm.variables.get('ipp_default')));",
									"        ",
									"        let productsArr = data.attributes.abstractProducts;",
									"        productsArr.forEach(function (product) {",
									"            pm.expect(product).to.have.property(\"abstractName\")",
									"                .that.have.string(pm.variables.get('brand_name1'));",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct pagination config returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes.pagination.config.parameterName).to.eql(\"page\");",
									"        pm.expect(data.attributes.pagination.config.itemsPerPageParameterName).to.eql(\"ipp\");",
									"        pm.expect(data.attributes.pagination.config.defaultItemsPerPage).to.eql(parseInt(pm.variables.get('ipp_default')));",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/catalog-search?q=\" + pm.variables.get('brand_name1') + \"&currency=\" + pm.variables.get('currency_chf'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search?q={{brand_name1}}&currency={{currency_chf}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{brand_name1}}"
								},
								{
									"key": "currency",
									"value": "{{currency_chf}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search suggestions by search for product by SKU",
			"item": [
				{
					"name": "Search a product - search by concrete sku - product available",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f9279ec-df11-404b-8187-35542c758ab2",
								"exec": [
									"let jsonData = pm.response.json();",
									"let resourceType = 'catalog-search-suggestions';",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(resourceType);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct completion returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('completion').that.is.an('array').that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(1);",
									"        let product = data.attributes.abstractProducts[0];",
									"        pm.expect(product).to.be.an('object');",
									"        pm.expect(product).to.have.property('abstractSku', pm.variables.get('abstract_sku1'));",
									"        pm.expect(product).to.have.property('abstractName').that.is.a('string');",
									"        pm.expect(product).to.have.property('price').that.is.a('number');",
									"        pm.expect(product).to.have.property('images').that.is.a('array');",
									"        product.images.forEach(function (image) {",
									"            pm.expect(image).to.have.property('externalUrlSmall').that.is.a('string');",
									"            pm.expect(image).to.have.property('externalUrlLarge').that.is.a('string');",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct categories returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('categories').that.is.an('array');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct cmsPages returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('cmsPages').that.is.an('array');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct included returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(jsonData).to.have.property('included').that.is.an('array');",
									"        ",
									"        let expectedResourceTypes = [",
									"            'abstract-product-image-sets',",
									"            'abstract-product-availabilities',",
									"            'abstract-product-prices',",
									"            'category-nodes',",
									"            'product-tax-sets',",
									"            'abstract-products'",
									"        ];",
									"        let resourceTypes = getIncludedResourceNames(jsonData.included);",
									"        ",
									"        pm.expect(resourceTypes).to.have.members(expectedResourceTypes);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/\" + resourceType + \"?q=\" + pm.variables.get('abstract_sku1'));",
									"});",
									"",
									"function getIncludedResourceNames(included) {",
									"    let resourceTypes = [];",
									"    included.forEach(function (resource) {",
									"        pm.expect(resource).to.be.an('object')",
									"            .that.have.property('type')",
									"            .that.is.a('string');",
									"        if (!resourceTypes.includes(resource.type)) {",
									"            resourceTypes.push(resource.type);",
									"        }",
									"    });",
									"    ",
									"    return resourceTypes;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search-suggestions?q={{abstract_sku1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search-suggestions"
							],
							"query": [
								{
									"key": "q",
									"value": "{{abstract_sku1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - search by abstract sku - product doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f9279ec-df11-404b-8187-35542c758ab2",
								"exec": [
									"let jsonData = pm.response.json();",
									"let resourceType = 'catalog-search-suggestions';",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(resourceType);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct completion returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('completion')",
									"            .that.is.an('array')",
									"            .that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an('array')",
									"            .that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct categories returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('categories')",
									"            .that.is.an('array')",
									"            .that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct cmsPages returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('cmsPages')",
									"            .that.is.an('array')",
									"            .that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.not.have.property('relationships');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct included returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.not.have.property('included');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/\" + resourceType + \"?q=\" + pm.variables.get('not_existing_sku'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search-suggestions?q={{not_existing_sku}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search-suggestions"
							],
							"query": [
								{
									"key": "q",
									"value": "{{not_existing_sku}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - search by concrete sku - product available",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f9279ec-df11-404b-8187-35542c758ab2",
								"exec": [
									"let jsonData = pm.response.json();",
									"let resourceType = 'catalog-search-suggestions';",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(resourceType);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct completion returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('completion').that.is.an('array').that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(1);",
									"        let product = data.attributes.abstractProducts[0];",
									"        pm.expect(product).to.be.an('object');",
									"        pm.expect(product).to.have.property('abstractSku', pm.variables.get('abstract_sku1'));",
									"        pm.expect(product).to.have.property('abstractName').that.is.a('string');",
									"        pm.expect(product).to.have.property('price').that.is.a('number');",
									"        pm.expect(product).to.have.property('images').that.is.a('array');",
									"        product.images.forEach(function (image) {",
									"            pm.expect(image).to.have.property('externalUrlSmall').that.is.a('string');",
									"            pm.expect(image).to.have.property('externalUrlLarge').that.is.a('string');",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct categories returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('categories').that.is.an('array');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct cmsPages returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('cmsPages').that.is.an('array');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct included returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(jsonData).to.have.property('included').that.is.an('array');",
									"        ",
									"        let expectedResourceTypes = [",
									"            'abstract-product-image-sets',",
									"            'abstract-product-availabilities',",
									"            'abstract-product-prices',",
									"            'category-nodes',",
									"            'product-tax-sets',",
									"            'abstract-products'",
									"        ];",
									"        let resourceTypes = getIncludedResourceNames(jsonData.included);",
									"        ",
									"        pm.expect(resourceTypes).to.have.members(expectedResourceTypes);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/\" + resourceType + \"?q=\" + pm.variables.get('concrete_sku1'));",
									"});",
									"",
									"function getIncludedResourceNames(included) {",
									"    let resourceTypes = [];",
									"    included.forEach(function (resource) {",
									"        pm.expect(resource).to.be.an('object')",
									"            .that.have.property('type')",
									"            .that.is.a('string');",
									"        if (!resourceTypes.includes(resource.type)) {",
									"            resourceTypes.push(resource.type);",
									"        }",
									"    });",
									"    ",
									"    return resourceTypes;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search-suggestions?q={{concrete_sku1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search-suggestions"
							],
							"query": [
								{
									"key": "q",
									"value": "{{concrete_sku1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - search by concrete sku - product available",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f9279ec-df11-404b-8187-35542c758ab2",
								"exec": [
									"let jsonData = pm.response.json();",
									"let resourceType = 'catalog-search-suggestions';",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(resourceType);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct completion returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('completion').that.is.an('array').that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.lengthOf(1);",
									"        let product = data.attributes.abstractProducts[0];",
									"        pm.expect(product).to.be.an('object');",
									"        pm.expect(product).to.have.property('abstractSku', pm.variables.get('abstract_sku1'));",
									"        pm.expect(product).to.have.property('abstractName').that.is.a('string');",
									"        pm.expect(product).to.have.property('price').that.is.a('number');",
									"        pm.expect(product).to.have.property('images').that.is.a('array');",
									"        product.images.forEach(function (image) {",
									"            pm.expect(image).to.have.property('externalUrlSmall').that.is.a('string');",
									"            pm.expect(image).to.have.property('externalUrlLarge').that.is.a('string');",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct categories returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('categories').that.is.an('array');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct cmsPages returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('cmsPages').that.is.an('array');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct included returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(jsonData).to.have.property('included').that.is.an('array');",
									"        ",
									"        let expectedResourceTypes = [",
									"            'abstract-product-image-sets',",
									"            'abstract-product-availabilities',",
									"            'abstract-product-prices',",
									"            'category-nodes',",
									"            'product-tax-sets',",
									"            'abstract-products'",
									"        ];",
									"        let resourceTypes = getIncludedResourceNames(jsonData.included);",
									"        ",
									"        pm.expect(resourceTypes).to.have.members(expectedResourceTypes);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/\" + resourceType + \"?q=\" + pm.variables.get('concrete_sku2'));",
									"});",
									"",
									"function getIncludedResourceNames(included) {",
									"    let resourceTypes = [];",
									"    included.forEach(function (resource) {",
									"        pm.expect(resource).to.be.an('object')",
									"            .that.have.property('type')",
									"            .that.is.a('string');",
									"        if (!resourceTypes.includes(resource.type)) {",
									"            resourceTypes.push(resource.type);",
									"        }",
									"    });",
									"    ",
									"    return resourceTypes;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search-suggestions?q={{concrete_sku2}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search-suggestions"
							],
							"query": [
								{
									"key": "q",
									"value": "{{concrete_sku2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - empty search criteria",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f9279ec-df11-404b-8187-35542c758ab2",
								"exec": [
									"let jsonData = pm.response.json();",
									"let resourceType = 'catalog-search-suggestions';",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(resourceType);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct completion returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('completion')",
									"            .that.is.an('array')",
									"            .that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an('array')",
									"            .that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct categories returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('categories')",
									"            .that.is.an('array')",
									"            .that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct cmsPages returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('cmsPages')",
									"            .that.is.an('array')",
									"            .that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.not.have.property('relationships');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct included returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.not.have.property('included');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/\" + resourceType + \"?q=\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search-suggestions?q=",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search-suggestions"
							],
							"query": [
								{
									"key": "q",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - wrong query",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "224ee700-ea9e-44d7-9762-ed30f47a1e87",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error status is 404\", function() {",
									"    pm.expect(jsonData.errors[0].status).to.eql(404);",
									"});",
									"",
									"pm.test(\"Correct details message\", function(){",
									"    pm.expect(jsonData.errors[0].detail).to.eql(\"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalogsearchsuggestion?q={{abstract_sku1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalogsearchsuggestion"
							],
							"query": [
								{
									"key": "q",
									"value": "{{abstract_sku1}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search suggestions for a product by Name",
			"item": [
				{
					"name": "Search a product - search suggestion by abstract name - product available",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f9279ec-df11-404b-8187-35542c758ab2",
								"exec": [
									"let jsonData = pm.response.json();",
									"let resourceType = 'catalog-search-suggestions';",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(resourceType);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct completion returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('completion').that.is.an('array').that.is.not.empty;",
									"        data.attributes.completion.forEach(function (completion) {",
									"            pm.expect(completion).to.include(pm.variables.get('brand_name1').toLowerCase());",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.not.empty;",
									"        data.attributes.abstractProducts.forEach(function (product) {",
									"            pm.expect(product).to.be.an('object');",
									"            pm.expect(product).to.have.property('abstractSku').that.is.a('string');",
									"            pm.expect(product).to.have.property('abstractName').that.is.a('string');",
									"            pm.expect(product).to.have.property('price').that.is.a('number');",
									"            pm.expect(product).to.have.property('images').that.is.a('array');",
									"            product.images.forEach(function (image) {",
									"                pm.expect(image).to.have.property('externalUrlSmall').that.is.a('string');",
									"                pm.expect(image).to.have.property('externalUrlLarge').that.is.a('string');",
									"            });",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct categories returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('categories').that.is.an('array');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct cmsPages returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('cmsPages').that.is.an('array');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct included returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(jsonData).to.have.property('included').that.is.an('array');",
									"        ",
									"        let expectedResourceTypes = [",
									"            'abstract-product-image-sets',",
									"            'abstract-product-availabilities',",
									"            'abstract-product-prices',",
									"            'category-nodes',",
									"            'product-tax-sets',",
									"            'abstract-products',",
									"            'product-labels',",
									"        ];",
									"        let resourceTypes = getIncludedResourceNames(jsonData.included);",
									"        ",
									"        pm.expect(resourceTypes).to.have.members(expectedResourceTypes);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/\" + resourceType + \"?q=\" + pm.variables.get('brand_name1'));",
									"});",
									"",
									"function getIncludedResourceNames(included) {",
									"    let resourceTypes = [];",
									"    included.forEach(function (resource) {",
									"        pm.expect(resource).to.be.an('object')",
									"            .that.have.property('type')",
									"            .that.is.a('string');",
									"        if (!resourceTypes.includes(resource.type)) {",
									"            resourceTypes.push(resource.type);",
									"        }",
									"    });",
									"    ",
									"    return resourceTypes;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search-suggestions?q={{brand_name1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search-suggestions"
							],
							"query": [
								{
									"key": "q",
									"value": "{{brand_name1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - search by abstract name - product doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f9279ec-df11-404b-8187-35542c758ab2",
								"exec": [
									"let jsonData = pm.response.json();",
									"let resourceType = 'catalog-search-suggestions';",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(resourceType);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct completion returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('completion')",
									"            .that.is.an('array')",
									"            .that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an('array')",
									"            .that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct categories returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('categories')",
									"            .that.is.an('array')",
									"            .that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct cmsPages returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('cmsPages')",
									"            .that.is.an('array')",
									"            .that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.not.have.property('relationships');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct included returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.not.have.property('included');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/\" + resourceType + \"?q=test_product_does_not_exist\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search-suggestions?q=test_product_does_not_exist",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search-suggestions"
							],
							"query": [
								{
									"key": "q",
									"value": "test_product_does_not_exist"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - search suggestion by part of name (1 letter)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f9279ec-df11-404b-8187-35542c758ab2",
								"exec": [
									"let jsonData = pm.response.json();",
									"let resourceType = 'catalog-search-suggestions';",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(resourceType);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct completion returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('completion')",
									"            .that.is.an('array')",
									"            .that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an('array')",
									"            .that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct categories returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('categories')",
									"            .that.is.an('array')",
									"            .that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct cmsPages returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('cmsPages')",
									"            .that.is.an('array')",
									"            .that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.not.have.property('relationships');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct included returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.not.have.property('included');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/\" + resourceType + \"?q=S\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search-suggestions?q=S",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search-suggestions"
							],
							"query": [
								{
									"key": "q",
									"value": "S"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - search suggestion by part of name (2 letters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f9279ec-df11-404b-8187-35542c758ab2",
								"exec": [
									"let jsonData = pm.response.json();",
									"let resourceType = 'catalog-search-suggestions';",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(resourceType);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct completion returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('completion').that.is.an('array').that.is.lengthOf(10);",
									"        data.attributes.completion.forEach(function (completion) {",
									"            pm.expect(completion).to.include('So'.toLowerCase());",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.not.empty;",
									"        data.attributes.abstractProducts.forEach(function (product) {",
									"            pm.expect(product).to.be.an('object');",
									"            pm.expect(product).to.have.property('abstractSku').that.is.a('string');",
									"            pm.expect(product).to.have.property('abstractName').that.is.a('string');",
									"            pm.expect(product).to.have.property('price').that.is.a('number');",
									"            pm.expect(product).to.have.property('images').that.is.a('array');",
									"            product.images.forEach(function (image) {",
									"                pm.expect(image).to.have.property('externalUrlSmall').that.is.a('string');",
									"                pm.expect(image).to.have.property('externalUrlLarge').that.is.a('string');",
									"            });",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct categories returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('categories').that.is.an('array');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct cmsPages returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('cmsPages').that.is.an('array');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct included returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(jsonData).to.have.property('included').that.is.an('array');",
									"        ",
									"        let expectedResourceTypes = [",
									"            'abstract-product-image-sets',",
									"            'abstract-product-availabilities',",
									"            'abstract-product-prices',",
									"            'category-nodes',",
									"            'product-tax-sets',",
									"            'abstract-products',",
									"            'product-labels',",
									"        ];",
									"        let resourceTypes = getIncludedResourceNames(jsonData.included);",
									"        ",
									"        pm.expect(resourceTypes).to.have.members(expectedResourceTypes);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/\" + resourceType + \"?q=So\");",
									"});",
									"",
									"function getIncludedResourceNames(included) {",
									"    let resourceTypes = [];",
									"    included.forEach(function (resource) {",
									"        pm.expect(resource).to.be.an('object')",
									"            .that.have.property('type')",
									"            .that.is.a('string');",
									"        if (!resourceTypes.includes(resource.type)) {",
									"            resourceTypes.push(resource.type);",
									"        }",
									"    });",
									"    ",
									"    return resourceTypes;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search-suggestions?q=So",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search-suggestions"
							],
							"query": [
								{
									"key": "q",
									"value": "So"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - search suggestion by part of name (3 letters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f9279ec-df11-404b-8187-35542c758ab2",
								"exec": [
									"let jsonData = pm.response.json();",
									"let resourceType = 'catalog-search-suggestions';",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(resourceType);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct completion returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('completion').that.is.an('array').that.is.lengthOf(10);",
									"        data.attributes.completion.forEach(function (completion) {",
									"            pm.expect(completion).to.include('Son'.toLowerCase());",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.not.empty;",
									"        data.attributes.abstractProducts.forEach(function (product) {",
									"            pm.expect(product).to.be.an('object');",
									"            pm.expect(product).to.have.property('abstractSku').that.is.a('string');",
									"            pm.expect(product).to.have.property('abstractName').that.is.a('string');",
									"            pm.expect(product).to.have.property('price').that.is.a('number');",
									"            pm.expect(product).to.have.property('images').that.is.a('array');",
									"            product.images.forEach(function (image) {",
									"                pm.expect(image).to.have.property('externalUrlSmall').that.is.a('string');",
									"                pm.expect(image).to.have.property('externalUrlLarge').that.is.a('string');",
									"            });",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct categories returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('categories').that.is.an('array');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct cmsPages returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('cmsPages').that.is.an('array');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct included returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(jsonData).to.have.property('included').that.is.an('array');",
									"        ",
									"        let expectedResourceTypes = [",
									"            'abstract-product-image-sets',",
									"            'abstract-product-availabilities',",
									"            'abstract-product-prices',",
									"            'category-nodes',",
									"            'product-tax-sets',",
									"            'abstract-products',",
									"            'product-labels',",
									"        ];",
									"        let resourceTypes = getIncludedResourceNames(jsonData.included);",
									"        ",
									"        pm.expect(resourceTypes).to.have.members(expectedResourceTypes);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/\" + resourceType + \"?q=Son\");",
									"});",
									"",
									"function getIncludedResourceNames(included) {",
									"    let resourceTypes = [];",
									"    included.forEach(function (resource) {",
									"        pm.expect(resource).to.be.an('object')",
									"            .that.have.property('type')",
									"            .that.is.a('string');",
									"        if (!resourceTypes.includes(resource.type)) {",
									"            resourceTypes.push(resource.type);",
									"        }",
									"    });",
									"    ",
									"    return resourceTypes;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search-suggestions?q=Son",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search-suggestions"
							],
							"query": [
								{
									"key": "q",
									"value": "Son"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - search suggestion by part of name (11 symbols)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f9279ec-df11-404b-8187-35542c758ab2",
								"exec": [
									"let jsonData = pm.response.json();",
									"let resourceType = 'catalog-search-suggestions';",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(resourceType);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct completion returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('completion').that.is.an('array').that.is.not.empty;",
									"        data.attributes.completion.forEach(function (completion) {",
									"            pm.expect(completion).to.include('Sony xperia'.toLowerCase());",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.not.empty;",
									"        data.attributes.abstractProducts.forEach(function (product) {",
									"            pm.expect(product).to.be.an('object');",
									"            pm.expect(product).to.have.property('abstractSku').that.is.a('string');",
									"            pm.expect(product).to.have.property('abstractName').that.is.a('string');",
									"            pm.expect(product).to.have.property('price').that.is.a('number');",
									"            pm.expect(product).to.have.property('images').that.is.a('array');",
									"            product.images.forEach(function (image) {",
									"                pm.expect(image).to.have.property('externalUrlSmall').that.is.a('string');",
									"                pm.expect(image).to.have.property('externalUrlLarge').that.is.a('string');",
									"            });",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct categories returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('categories').that.is.an('array');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct cmsPages returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('cmsPages').that.is.an('array');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct included returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(jsonData).to.have.property('included')",
									"            .that.is.an('array')",
									"            .that.is.not.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/\" + resourceType + \"?q=Sony xperia\");",
									"});",
									"",
									"function getIncludedResourceNames(included) {",
									"    let resourceTypes = [];",
									"    included.forEach(function (resource) {",
									"        pm.expect(resource).to.be.an('object')",
									"            .that.have.property('type')",
									"            .that.is.a('string');",
									"        if (!resourceTypes.includes(resource.type)) {",
									"            resourceTypes.push(resource.type);",
									"        }",
									"    });",
									"    ",
									"    return resourceTypes;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search-suggestions?q=Sony+xperia",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search-suggestions"
							],
							"query": [
								{
									"key": "q",
									"value": "Sony+xperia"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search suggestions for a product by attributes",
			"item": [
				{
					"name": "Search a product - search by attribute 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f9279ec-df11-404b-8187-35542c758ab2",
								"exec": [
									"let jsonData = pm.response.json();",
									"let resourceType = 'catalog-search-suggestions';",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(resourceType);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct completion returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('completion').that.is.an('array').that.is.not.empty;",
									"        data.attributes.completion.forEach(function (completion) {",
									"            pm.expect(completion).to.include(pm.variables.get('brand_name1').toLowerCase());",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.not.empty;",
									"        data.attributes.abstractProducts.forEach(function (product) {",
									"            pm.expect(product).to.be.an('object');",
									"            pm.expect(product).to.have.property('abstractSku')",
									"                .that.is.a('string')",
									"                .that.is.not.equal(pm.variables.get('product_sku_bn2_c2'));",
									"            pm.expect(product).to.have.property('abstractName').that.is.a('string');",
									"            pm.expect(product).to.have.property('price').that.is.a('number');",
									"            pm.expect(product).to.have.property('images').that.is.a('array');",
									"            product.images.forEach(function (image) {",
									"                pm.expect(image).to.have.property('externalUrlSmall').that.is.a('string');",
									"                pm.expect(image).to.have.property('externalUrlLarge').that.is.a('string');",
									"            });",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct categories returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('categories').that.is.an('array');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct cmsPages returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('cmsPages').that.is.an('array');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct included returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(jsonData).to.have.property('included').that.is.an('array');",
									"        ",
									"        let expectedResourceTypes = [",
									"            'abstract-product-image-sets',",
									"            'abstract-product-availabilities',",
									"            'abstract-product-prices',",
									"            'category-nodes',",
									"            'product-tax-sets',",
									"            'abstract-products',",
									"            'product-labels',",
									"        ];",
									"        let resourceTypes = getIncludedResourceNames(jsonData.included);",
									"        ",
									"        pm.expect(resourceTypes).to.have.members(expectedResourceTypes);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/\" + resourceType + \"?q=\" + pm.variables.get('brand_name1'));",
									"});",
									"",
									"function getIncludedResourceNames(included) {",
									"    let resourceTypes = [];",
									"    included.forEach(function (resource) {",
									"        pm.expect(resource).to.be.an('object')",
									"            .that.have.property('type')",
									"            .that.is.a('string');",
									"        if (!resourceTypes.includes(resource.type)) {",
									"            resourceTypes.push(resource.type);",
									"        }",
									"    });",
									"    ",
									"    return resourceTypes;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search-suggestions?q={{brand_name1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search-suggestions"
							],
							"query": [
								{
									"key": "q",
									"value": "{{brand_name1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - search by attribute 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f9279ec-df11-404b-8187-35542c758ab2",
								"exec": [
									"let jsonData = pm.response.json();",
									"let resourceType = 'catalog-search-suggestions';",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(resourceType);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct completion returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('completion').that.is.an('array').that.is.not.empty;",
									"        data.attributes.completion.forEach(function (completion) {",
									"            pm.expect(completion).to.include(pm.variables.get('color1').toLowerCase());",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.not.empty;",
									"        data.attributes.abstractProducts.forEach(function (product) {",
									"            pm.expect(product).to.be.an('object');",
									"            pm.expect(product).to.have.property('abstractSku').that.is.a('string');",
									"            pm.expect(product).to.have.property('abstractName').that.is.a('string');",
									"            pm.expect(product).to.have.property('price').that.is.a('number');",
									"            pm.expect(product).to.have.property('images').that.is.a('array');",
									"            product.images.forEach(function (image) {",
									"                pm.expect(image).to.have.property('externalUrlSmall').that.is.a('string');",
									"                pm.expect(image).to.have.property('externalUrlLarge').that.is.a('string');",
									"            });",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct categories returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('categories').that.is.an('array');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct cmsPages returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('cmsPages').that.is.an('array');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct included returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(jsonData).to.have.property('included').that.is.an('array');",
									"        ",
									"        let expectedResourceTypes = [",
									"            'abstract-product-image-sets',",
									"            'abstract-product-availabilities',",
									"            'abstract-product-prices',",
									"            'category-nodes',",
									"            'product-tax-sets',",
									"            'abstract-products',",
									"            'product-labels',",
									"        ];",
									"        let resourceTypes = getIncludedResourceNames(jsonData.included);",
									"        ",
									"        pm.expect(resourceTypes).to.have.members(expectedResourceTypes);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/\" + resourceType + \"?q=\" + pm.variables.get('color1'));",
									"});",
									"",
									"function getIncludedResourceNames(included) {",
									"    let resourceTypes = [];",
									"    included.forEach(function (resource) {",
									"        pm.expect(resource).to.be.an('object')",
									"            .that.have.property('type')",
									"            .that.is.a('string');",
									"        if (!resourceTypes.includes(resource.type)) {",
									"            resourceTypes.push(resource.type);",
									"        }",
									"    });",
									"    ",
									"    return resourceTypes;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search-suggestions?q={{color1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search-suggestions"
							],
							"query": [
								{
									"key": "q",
									"value": "{{color1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - several values in search criteria",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f9279ec-df11-404b-8187-35542c758ab2",
								"exec": [
									"let jsonData = pm.response.json();",
									"let resourceType = 'catalog-search-suggestions';",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(resourceType);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct completion returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('completion').that.is.an('array').that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.not.empty;",
									"        data.attributes.abstractProducts.forEach(function (product) {",
									"            pm.expect(product).to.be.an('object');",
									"            pm.expect(product).to.have.property('abstractSku').that.is.a('string');",
									"            pm.expect(product).to.have.property('abstractName').that.is.a('string');",
									"            pm.expect(product).to.have.property('price').that.is.a('number');",
									"            pm.expect(product).to.have.property('images').that.is.a('array');",
									"            product.images.forEach(function (image) {",
									"                pm.expect(image).to.have.property('externalUrlSmall').that.is.a('string');",
									"                pm.expect(image).to.have.property('externalUrlLarge').that.is.a('string');",
									"            });",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct categories returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('categories').that.is.an('array');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct cmsPages returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('cmsPages').that.is.an('array');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct included returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(jsonData).to.have.property('included').that.is.an('array');",
									"        ",
									"        let expectedResourceTypes = [",
									"            'abstract-product-image-sets',",
									"            'abstract-product-availabilities',",
									"            'abstract-product-prices',",
									"            'category-nodes',",
									"            'product-tax-sets',",
									"            'abstract-products',",
									"            'product-labels',",
									"        ];",
									"        let resourceTypes = getIncludedResourceNames(jsonData.included);",
									"        ",
									"        if(resourceTypes.indexOf('product-labels') < 0){",
									"            expectedResourceTypes.pop();",
									"        }",
									"        ",
									"        pm.expect(expectedResourceTypes).to.have.members(resourceTypes);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/\" + resourceType + \"?q=\" + pm.variables.get('brand_name1') + ' ' + pm.variables.get('color2'));",
									"});",
									"",
									"function getIncludedResourceNames(included) {",
									"    let resourceTypes = [];",
									"    included.forEach(function (resource) {",
									"        pm.expect(resource).to.be.an('object')",
									"            .that.have.property('type')",
									"            .that.is.a('string');",
									"        if (!resourceTypes.includes(resource.type)) {",
									"            resourceTypes.push(resource.type);",
									"        }",
									"    });",
									"    ",
									"    return resourceTypes;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search-suggestions?q={{brand_name1}}+{{color2}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search-suggestions"
							],
							"query": [
								{
									"key": "q",
									"value": "{{brand_name1}}+{{color2}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Currency in search suggestions results",
			"item": [
				{
					"name": "Search a product - set a currency",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f9279ec-df11-404b-8187-35542c758ab2",
								"exec": [
									"let jsonData = pm.response.json();",
									"let resourceType = 'catalog-search-suggestions';",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(resourceType);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct completion returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('completion').that.is.an('array').that.is.not.empty;",
									"        data.attributes.completion.forEach(function (completion) {",
									"            pm.expect(completion).to.include(pm.variables.get('brand_name1').toLowerCase());",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.not.empty;",
									"        data.attributes.abstractProducts.forEach(function (product) {",
									"            pm.expect(product).to.be.an('object');",
									"            pm.expect(product).to.have.property('abstractSku').that.is.a('string');",
									"            pm.expect(product).to.have.property('abstractName').that.is.a('string');",
									"            pm.expect(product).to.have.property('price').that.is.a('number');",
									"            pm.expect(product).to.have.property('images').that.is.a('array');",
									"            product.images.forEach(function (image) {",
									"                pm.expect(image).to.have.property('externalUrlSmall').that.is.a('string');",
									"                pm.expect(image).to.have.property('externalUrlLarge').that.is.a('string');",
									"            });",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct categories returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('categories').that.is.an('array');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct cmsPages returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('cmsPages').that.is.an('array');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct included returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(jsonData).to.have.property('included').that.is.an('array');",
									"        ",
									"        let expectedResourceTypes = [",
									"            'abstract-product-image-sets',",
									"            'abstract-product-availabilities',",
									"            'abstract-product-prices',",
									"            'category-nodes',",
									"            'product-tax-sets',",
									"            'abstract-products',",
									"            'product-labels',",
									"        ];",
									"        let resourceTypes = getIncludedResourceNames(jsonData.included);",
									"        ",
									"        pm.expect(resourceTypes).to.have.members(expectedResourceTypes);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/\" + resourceType + \"?q=\" + pm.variables.get('brand_name1') + '&currency=' + pm.variables.get('currency_chf'));",
									"});",
									"",
									"function getIncludedResourceNames(included) {",
									"    let resourceTypes = [];",
									"    included.forEach(function (resource) {",
									"        pm.expect(resource).to.be.an('object')",
									"            .that.have.property('type')",
									"            .that.is.a('string');",
									"        if (!resourceTypes.includes(resource.type)) {",
									"            resourceTypes.push(resource.type);",
									"        }",
									"    });",
									"    ",
									"    return resourceTypes;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search-suggestions?q={{brand_name1}}&currency={{currency_chf}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search-suggestions"
							],
							"query": [
								{
									"key": "q",
									"value": "{{brand_name1}}"
								},
								{
									"key": "currency",
									"value": "{{currency_chf}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - empty value for currency",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f9279ec-df11-404b-8187-35542c758ab2",
								"exec": [
									"let jsonData = pm.response.json();",
									"let resourceType = 'catalog-search-suggestions';",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(resourceType);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct completion returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('completion').that.is.an('array').that.is.not.empty;",
									"        data.attributes.completion.forEach(function (completion) {",
									"            pm.expect(completion).to.include(pm.variables.get('brand_name1').toLowerCase());",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.not.empty;",
									"        data.attributes.abstractProducts.forEach(function (product) {",
									"            pm.expect(product).to.be.an('object');",
									"            pm.expect(product).to.have.property('abstractSku').that.is.a('string');",
									"            pm.expect(product).to.have.property('abstractName').that.is.a('string');",
									"            pm.expect(product).to.have.property('price').that.is.a('number');",
									"            pm.expect(product).to.have.property('images').that.is.a('array');",
									"            product.images.forEach(function (image) {",
									"                pm.expect(image).to.have.property('externalUrlSmall').that.is.a('string');",
									"                pm.expect(image).to.have.property('externalUrlLarge').that.is.a('string');",
									"            });",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct categories returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('categories').that.is.an('array');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct cmsPages returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('cmsPages').that.is.an('array');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct included returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(jsonData).to.have.property('included').that.is.an('array');",
									"        ",
									"        let expectedResourceTypes = [",
									"            'abstract-product-image-sets',",
									"            'abstract-product-availabilities',",
									"            'abstract-product-prices',",
									"            'category-nodes',",
									"            'product-tax-sets',",
									"            'abstract-products',",
									"            'product-labels',",
									"        ];",
									"        let resourceTypes = getIncludedResourceNames(jsonData.included);",
									"        ",
									"        pm.expect(resourceTypes).to.have.members(expectedResourceTypes);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/\" + resourceType + \"?q=\" + pm.variables.get('brand_name1') + '&currency=');",
									"});",
									"",
									"function getIncludedResourceNames(included) {",
									"    let resourceTypes = [];",
									"    included.forEach(function (resource) {",
									"        pm.expect(resource).to.be.an('object')",
									"            .that.have.property('type')",
									"            .that.is.a('string');",
									"        if (!resourceTypes.includes(resource.type)) {",
									"            resourceTypes.push(resource.type);",
									"        }",
									"    });",
									"    ",
									"    return resourceTypes;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search-suggestions?q={{brand_name1}}&currency=",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search-suggestions"
							],
							"query": [
								{
									"key": "q",
									"value": "{{brand_name1}}"
								},
								{
									"key": "currency",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Category in search suggestions results",
			"item": [
				{
					"name": "Search a product - set category full name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f9279ec-df11-404b-8187-35542c758ab2",
								"exec": [
									"let jsonData = pm.response.json();",
									"let resourceType = 'catalog-search-suggestions';",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(resourceType);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct completion returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('completion').that.is.an('array').that.is.not.empty;",
									"        data.attributes.completion.forEach(function (completion) {",
									"            pm.expect(completion).to.include(pm.variables.get('category_name1').toLowerCase());",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.not.empty;",
									"        data.attributes.abstractProducts.forEach(function (product) {",
									"            pm.expect(product).to.be.an('object');",
									"            pm.expect(product).to.have.property('abstractSku').that.is.a('string');",
									"            pm.expect(product).to.have.property('abstractName').that.is.a('string');",
									"            pm.expect(product).to.have.property('price').that.is.a('number');",
									"            pm.expect(product).to.have.property('images').that.is.a('array');",
									"            product.images.forEach(function (image) {",
									"                pm.expect(image).to.have.property('externalUrlSmall').that.is.a('string');",
									"                pm.expect(image).to.have.property('externalUrlLarge').that.is.a('string');",
									"            });",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct categories returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('categories').that.is.an('array').that.is.not.empty;",
									"        data.attributes.categories.forEach(function (category) {",
									"            pm.expect(category).to.have.property('name').that.include(pm.variables.get('category_name1'));",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct cmsPages returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('cmsPages').that.is.an('array');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct included returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(jsonData).to.have.property('included').that.is.an('array');",
									"        ",
									"        let expectedResourceTypes = [",
									"            'abstract-product-image-sets',",
									"            'abstract-product-availabilities',",
									"            'abstract-product-prices',",
									"            'category-nodes',",
									"            'product-tax-sets',",
									"            'abstract-products',",
									"            \"product-labels\"",
									"        ];",
									"        let resourceTypes = getIncludedResourceNames(jsonData.included);",
									"        ",
									"        pm.expect(resourceTypes).to.have.members(expectedResourceTypes);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/\" + resourceType + \"?q=\" + pm.variables.get('category_name1'));",
									"});",
									"",
									"function getIncludedResourceNames(included) {",
									"    let resourceTypes = [];",
									"    included.forEach(function (resource) {",
									"        pm.expect(resource).to.be.an('object')",
									"            .that.have.property('type')",
									"            .that.is.a('string');",
									"        if (!resourceTypes.includes(resource.type)) {",
									"            resourceTypes.push(resource.type);",
									"        }",
									"    });",
									"    ",
									"    return resourceTypes;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search-suggestions?q={{category_name1}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search-suggestions"
							],
							"query": [
								{
									"key": "q",
									"value": "{{category_name1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - complex category full name 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f9279ec-df11-404b-8187-35542c758ab2",
								"exec": [
									"let jsonData = pm.response.json();",
									"let resourceType = 'catalog-search-suggestions';",
									"let testQueryParameter = 'digital cameras';",
									"let testCategoryName = 'Digital Cameras';",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(resourceType);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct completion returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('completion').that.is.an('array').that.is.not.empty;",
									"        data.attributes.completion.forEach(function (completion) {",
									"            pm.expect(completion).to.include(testQueryParameter.toLowerCase());",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.not.empty;",
									"        data.attributes.abstractProducts.forEach(function (product) {",
									"            pm.expect(product).to.be.an('object');",
									"            pm.expect(product).to.have.property('abstractSku').that.is.a('string');",
									"            pm.expect(product).to.have.property('abstractName').that.is.a('string');",
									"            pm.expect(product).to.have.property('price').that.is.a('number');",
									"            pm.expect(product).to.have.property('images').that.is.a('array');",
									"            product.images.forEach(function (image) {",
									"                pm.expect(image).to.have.property('externalUrlSmall').that.is.a('string');",
									"                pm.expect(image).to.have.property('externalUrlLarge').that.is.a('string');",
									"            });",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct categories returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('categories').that.is.an('array').that.is.not.empty;",
									"        data.attributes.categories.forEach(function (category) {",
									"            pm.expect(category).to.have.property('name').that.is.a('string');",
									"            ",
									"            let categoryNameSplitted = testCategoryName.split(' ');",
									"            let match = false;",
									"            categoryNameSplitted.forEach(function (categoryNamePartial) {",
									"                if (category.name.includes(categoryNamePartial)) {",
									"                    match = true;",
									"                }",
									"            });",
									"            pm.expect(match).to.be.true;",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct cmsPages returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('cmsPages').that.is.an('array');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct included returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(jsonData).to.have.property('included').that.is.an('array');",
									"        ",
									"        let expectedResourceTypes = [",
									"            'abstract-product-image-sets',",
									"            'abstract-product-availabilities',",
									"            'abstract-product-prices',",
									"            'category-nodes',",
									"            'product-tax-sets',",
									"            'abstract-products',",
									"            'product-labels',",
									"        ];",
									"        let resourceTypes = getIncludedResourceNames(jsonData.included);",
									"        ",
									"        pm.expect(resourceTypes).to.have.members(expectedResourceTypes);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/\" + resourceType + \"?q=\" + testQueryParameter);",
									"});",
									"",
									"function getIncludedResourceNames(included) {",
									"    let resourceTypes = [];",
									"    included.forEach(function (resource) {",
									"        pm.expect(resource).to.be.an('object')",
									"            .that.have.property('type')",
									"            .that.is.a('string');",
									"        if (!resourceTypes.includes(resource.type)) {",
									"            resourceTypes.push(resource.type);",
									"        }",
									"    });",
									"    ",
									"    return resourceTypes;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search-suggestions?q=digital+cameras",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search-suggestions"
							],
							"query": [
								{
									"key": "q",
									"value": "digital+cameras"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - complex category full name 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f9279ec-df11-404b-8187-35542c758ab2",
								"exec": [
									"let jsonData = pm.response.json();",
									"let resourceType = 'catalog-search-suggestions';",
									"let testQueryParameter = 'telecom & navigation';",
									"let testCategoryName = 'Telecom & Navigation';",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(resourceType);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct completion returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('completion').that.is.an('array').that.is.not.empty;",
									"        data.attributes.completion.forEach(function (completion) {",
									"            pm.expect(completion).to.include(testQueryParameter.toLowerCase());",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.not.empty;",
									"        data.attributes.abstractProducts.forEach(function (product) {",
									"            pm.expect(product).to.be.an('object');",
									"            pm.expect(product).to.have.property('abstractSku').that.is.a('string');",
									"            pm.expect(product).to.have.property('abstractName').that.is.a('string');",
									"            pm.expect(product).to.have.property('price').that.is.a('number');",
									"            pm.expect(product).to.have.property('images').that.is.a('array');",
									"            product.images.forEach(function (image) {",
									"                pm.expect(image).to.have.property('externalUrlSmall').that.is.a('string');",
									"                pm.expect(image).to.have.property('externalUrlLarge').that.is.a('string');",
									"            });",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct categories returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('categories').that.is.an('array').that.is.not.empty;",
									"        data.attributes.categories.forEach(function (category) {",
									"            pm.expect(category).to.have.property('name').that.is.a('string');",
									"            ",
									"            let categoryNameSplitted = testCategoryName.split(' ');",
									"            let match = false;",
									"            categoryNameSplitted.forEach(function (categoryNamePartial) {",
									"                if (category.name.includes(categoryNamePartial)) {",
									"                    match = true;",
									"                }",
									"            });",
									"            pm.expect(match).to.be.true;",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct cmsPages returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('cmsPages').that.is.an('array');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct included returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(jsonData).to.have.property('included').that.is.an('array');",
									"        ",
									"        let expectedResourceTypes = [",
									"            'abstract-product-image-sets',",
									"            'abstract-product-availabilities',",
									"            'abstract-product-prices',",
									"            'category-nodes',",
									"            'product-tax-sets',",
									"            'abstract-products',",
									"            'product-labels',",
									"        ];",
									"        let resourceTypes = getIncludedResourceNames(jsonData.included);",
									"        ",
									"        pm.expect(resourceTypes).to.have.members(expectedResourceTypes);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/\" + resourceType + \"?q=\" + testQueryParameter);",
									"});",
									"",
									"function getIncludedResourceNames(included) {",
									"    let resourceTypes = [];",
									"    included.forEach(function (resource) {",
									"        pm.expect(resource).to.be.an('object')",
									"            .that.have.property('type')",
									"            .that.is.a('string');",
									"        if (!resourceTypes.includes(resource.type)) {",
									"            resourceTypes.push(resource.type);",
									"        }",
									"    });",
									"    ",
									"    return resourceTypes;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search-suggestions?q=telecom+%26+navigation",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search-suggestions"
							],
							"query": [
								{
									"key": "q",
									"value": "telecom+%26+navigation"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - complex category full name 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f9279ec-df11-404b-8187-35542c758ab2",
								"exec": [
									"let jsonData = pm.response.json();",
									"let resourceType = 'catalog-search-suggestions';",
									"let testQueryParameter = 'digital-cameras';",
									"let testCategoryName = 'Digital Cameras';",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(resourceType);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct completion returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('completion').that.is.an('array').that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.not.empty;",
									"        data.attributes.abstractProducts.forEach(function (product) {",
									"            pm.expect(product).to.be.an('object');",
									"            pm.expect(product).to.have.property('abstractSku').that.is.a('string');",
									"            pm.expect(product).to.have.property('abstractName').that.is.a('string');",
									"            pm.expect(product).to.have.property('price').that.is.a('number');",
									"            pm.expect(product).to.have.property('images').that.is.a('array');",
									"            product.images.forEach(function (image) {",
									"                pm.expect(image).to.have.property('externalUrlSmall').that.is.a('string');",
									"                pm.expect(image).to.have.property('externalUrlLarge').that.is.a('string');",
									"            });",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct categories returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('categories').that.is.an('array').that.is.not.empty;",
									"        data.attributes.categories.forEach(function (category) {",
									"            pm.expect(category).to.have.property('name').that.is.a('string');",
									"            ",
									"            let categoryNameSplitted = testCategoryName.split(' ');",
									"            let match = false;",
									"            categoryNameSplitted.forEach(function (categoryNamePartial) {",
									"                if (category.name.includes(categoryNamePartial)) {",
									"                    match = true;",
									"                }",
									"            });",
									"            pm.expect(match).to.be.true;",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct cmsPages returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('cmsPages').that.is.an('array');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct included returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(jsonData).to.have.property('included').that.is.an('array');",
									"        ",
									"        let expectedResourceTypes = [",
									"            'abstract-product-image-sets',",
									"            'abstract-product-availabilities',",
									"            'abstract-product-prices',",
									"            'category-nodes',",
									"            'product-tax-sets',",
									"            'abstract-products',",
									"            'product-labels',",
									"        ];",
									"        let resourceTypes = getIncludedResourceNames(jsonData.included);",
									"        ",
									"        pm.expect(resourceTypes).to.have.members(expectedResourceTypes);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/\" + resourceType + \"?q=\" + testQueryParameter);",
									"});",
									"",
									"function getIncludedResourceNames(included) {",
									"    let resourceTypes = [];",
									"    included.forEach(function (resource) {",
									"        pm.expect(resource).to.be.an('object')",
									"            .that.have.property('type')",
									"            .that.is.a('string');",
									"        if (!resourceTypes.includes(resource.type)) {",
									"            resourceTypes.push(resource.type);",
									"        }",
									"    });",
									"    ",
									"    return resourceTypes;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search-suggestions?q=digital-cameras",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search-suggestions"
							],
							"query": [
								{
									"key": "q",
									"value": "digital-cameras"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - complex category full name 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f9279ec-df11-404b-8187-35542c758ab2",
								"exec": [
									"let jsonData = pm.response.json();",
									"let resourceType = 'catalog-search-suggestions';",
									"let testQueryParameter = 'telecom-&-navigation';",
									"let testCategoryName = 'Telecom & Navigation';",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(resourceType);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Has correct completion returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('completion').that.is.an('array').that.is.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.not.empty;",
									"        data.attributes.abstractProducts.forEach(function (product) {",
									"            pm.expect(product).to.be.an('object');",
									"            pm.expect(product).to.have.property('abstractSku').that.is.a('string');",
									"            pm.expect(product).to.have.property('abstractName').that.is.a('string');",
									"            pm.expect(product).to.have.property('price').that.is.a('number');",
									"            pm.expect(product).to.have.property('images').that.is.a('array');",
									"            product.images.forEach(function (image) {",
									"                pm.expect(image).to.have.property('externalUrlSmall').that.is.a('string');",
									"                pm.expect(image).to.have.property('externalUrlLarge').that.is.a('string');",
									"            });",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct categories returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('categories').that.is.an('array').that.is.not.empty;",
									"        data.attributes.categories.forEach(function (category) {",
									"            pm.expect(category).to.have.property('name').that.is.a('string');",
									"            ",
									"            let categoryNameSplitted = testCategoryName.split(' ');",
									"            let match = false;",
									"            categoryNameSplitted.forEach(function (categoryNamePartial) {",
									"                if (category.name.includes(categoryNamePartial)) {",
									"                    match = true;",
									"                }",
									"            });",
									"            pm.expect(match).to.be.true;",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct cmsPages returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('cmsPages').that.is.an('array');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct included returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(jsonData).to.have.property('included').that.is.an('array');",
									"        ",
									"        let expectedResourceTypes = [",
									"            'abstract-product-image-sets',",
									"            'abstract-product-availabilities',",
									"            'abstract-product-prices',",
									"            'category-nodes',",
									"            'product-tax-sets',",
									"            'abstract-products',",
									"            'product-labels',",
									"        ];",
									"        let resourceTypes = getIncludedResourceNames(jsonData.included);",
									"        ",
									"        pm.expect(resourceTypes).to.have.members(expectedResourceTypes);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/\" + resourceType + \"?q=\" + testQueryParameter);",
									"});",
									"",
									"function getIncludedResourceNames(included) {",
									"    let resourceTypes = [];",
									"    included.forEach(function (resource) {",
									"        pm.expect(resource).to.be.an('object')",
									"            .that.have.property('type')",
									"            .that.is.a('string');",
									"        if (!resourceTypes.includes(resource.type)) {",
									"            resourceTypes.push(resource.type);",
									"        }",
									"    });",
									"    ",
									"    return resourceTypes;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search-suggestions?q=telecom-%26-navigation",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search-suggestions"
							],
							"query": [
								{
									"key": "q",
									"value": "telecom-%26-navigation"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search a product - part of category name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f9279ec-df11-404b-8187-35542c758ab2",
								"exec": [
									"let jsonData = pm.response.json();",
									"let resourceType = 'catalog-search-suggestions';",
									"let testQueryParameter = 'Smart';",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has correct type returned\", function() {",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.type).to.eql(resourceType);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct id returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.id).to.be.null;",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct completion returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('completion').that.is.an('array').that.is.not.empty;",
									"        data.attributes.completion.forEach(function (completion) {",
									"            pm.expect(completion).to.include(testQueryParameter.toLowerCase());",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct product returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('abstractProducts')",
									"            .that.is.an(\"array\")",
									"            .that.is.not.empty;",
									"        data.attributes.abstractProducts.forEach(function (product) {",
									"            pm.expect(product).to.be.an('object');",
									"            pm.expect(product).to.have.property('abstractSku').that.is.a('string');",
									"            pm.expect(product).to.have.property('abstractName').that.is.a('string');",
									"            pm.expect(product).to.have.property('price').that.is.a('number');",
									"            pm.expect(product).to.have.property('images').that.is.a('array');",
									"            product.images.forEach(function (image) {",
									"                pm.expect(image).to.have.property('externalUrlSmall').that.is.a('string');",
									"                pm.expect(image).to.have.property('externalUrlLarge').that.is.a('string');",
									"            });",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct categories returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('categories').that.is.an('array').that.is.not.empty;",
									"        data.attributes.categories.forEach(function (category) {",
									"            pm.expect(category).to.have.property('name').that.include(testQueryParameter);",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct cmsPages returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data.attributes).to.have.property('cmsPages').that.is.an('array');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct relationships\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(data).to.have.property('relationships').that.is.an(\"object\");",
									"        let relationshipsObj = data.relationships;",
									"        pm.expect(Object.keys(relationshipsObj).length).to.be.equal(1);",
									"        pm.expect(relationshipsObj).to.have.property('abstract-products').that.is.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct included returned\", function() {",
									"    jsonData.data.forEach(function (data) {",
									"        pm.expect(jsonData).to.have.property('included').that.is.an('array');",
									"        ",
									"        let expectedResourceTypes = [",
									"            'abstract-product-image-sets',",
									"            'abstract-product-availabilities',",
									"            'abstract-product-prices',",
									"            'category-nodes',",
									"            'product-tax-sets',",
									"            'abstract-products',",
									"            'product-labels',",
									"        ];",
									"        let resourceTypes = getIncludedResourceNames(jsonData.included);",
									"        ",
									"        pm.expect(resourceTypes).to.have.members(expectedResourceTypes);",
									"    });",
									"});",
									"",
									"pm.test(\"Has correct self link\", function() {",
									"    pm.expect(jsonData.links.self).to.eql(pm.variables.get(\"url\") + \"/\" + resourceType + \"?q=\" + testQueryParameter);",
									"});",
									"",
									"function getIncludedResourceNames(included) {",
									"    let resourceTypes = [];",
									"    included.forEach(function (resource) {",
									"        pm.expect(resource).to.be.an('object')",
									"            .that.have.property('type')",
									"            .that.is.a('string');",
									"        if (!resourceTypes.includes(resource.type)) {",
									"            resourceTypes.push(resource.type);",
									"        }",
									"    });",
									"    ",
									"    return resourceTypes;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog-search-suggestions?q=Smart",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog-search-suggestions"
							],
							"query": [
								{
									"key": "q",
									"value": "Smart"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "eeb25d8c-6fd2-4d7d-9c84-8592cecacb65",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "d72ab2c9-581c-4216-a346-6339e32c49c9",
				"type": "text/javascript",
				"exec": [
					"let jsonData = pm.response.json();",
					"if (jsonData.data) {",
					"    pm.test.skip(\"Don't have a resource self link\", function() {",
					"        jsonData.data.forEach(function (data) {",
					"            pm.expect(data).to.not.have.property('links');",
					"        });",
					"    });",
					"}",
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "cd6c551f-999f-4177-942c-c5ae5af9e220",
			"key": "abstract_sku1",
			"value": "058",
			"type": "string"
		},
		{
			"id": "5c363ffa-63a8-4c75-a6ec-b058757445f7",
			"key": "not_existing_sku",
			"value": "000",
			"type": "string"
		},
		{
			"id": "d1bdb3ce-5012-4ab6-9d0e-8624fe8852bb",
			"key": "concrete_sku1",
			"value": "058_24245592",
			"type": "string"
		},
		{
			"id": "c487fa9d-110e-43bc-9c64-f39e21fd3844",
			"key": "concrete_sku2",
			"value": "058_26175504",
			"type": "string"
		},
		{
			"id": "5ecea876-ab66-49b1-baf1-4279003d5e72",
			"key": "name_abstract_sku1",
			"value": "Acer Liquid Jade",
			"type": "string"
		},
		{
			"id": "49509ccb-b7ab-4474-8cdd-959490899eab",
			"key": "brand_name1",
			"value": "Sony",
			"type": "string"
		},
		{
			"id": "7c4a159f-bded-47d6-8544-67df0983d075",
			"key": "brand_name2",
			"value": "Canon",
			"type": "string"
		},
		{
			"id": "1f6a640c-c4d9-427f-902d-d2e4eec1b399",
			"key": "color1",
			"value": "Blue",
			"type": "string"
		},
		{
			"id": "e1554f87-84a5-45ed-a4f7-98cc0123b808",
			"key": "color2",
			"value": "Red",
			"type": "string"
		},
		{
			"id": "95d4353d-c2da-4531-90a0-19fc0350c384",
			"key": "product_sku_bn1_c1",
			"value": "197",
			"type": "string"
		},
		{
			"id": "6e81bbca-ddee-42bc-9c64-942c0fd8045b",
			"key": "product_sku_bn2_c2",
			"value": "032",
			"type": "string"
		},
		{
			"id": "f3d6ca29-8729-4854-ad59-31ad49629f9c",
			"key": "product_sku_bn1_c2",
			"value": "027",
			"type": "string"
		},
		{
			"id": "2c441df8-48c6-49b1-b227-2260b7a85fb9",
			"key": "min_price",
			"value": "99.99",
			"type": "string"
		},
		{
			"id": "30b83158-c9da-4f4f-a72b-d1e0932d4e20",
			"key": "max_price",
			"value": "150",
			"type": "string"
		},
		{
			"id": "d3032ad2-6b24-473a-82c7-0535d6777a7b",
			"key": "label1",
			"value": "Standard Label",
			"type": "string"
		},
		{
			"id": "a68d6555-0e53-456f-82ee-b7b2ef0fab94",
			"key": "label2",
			"value": "SALE %",
			"type": "string"
		},
		{
			"id": "be523349-d1f6-432e-adb7-819611d8d96b",
			"key": "label1_id",
			"value": "3",
			"type": "string"
		},
		{
			"id": "854c630f-6b2b-4301-a682-6dfb9fa8b32e",
			"key": "product_label1_sku",
			"value": "009",
			"type": "string"
		},
		{
			"id": "fab45b10-12e5-4062-add0-d250d0a50e15",
			"key": "product_label2_sku",
			"value": "015",
			"type": "string"
		},
		{
			"id": "bcaeeaee-1801-416b-b805-68c80ede8e33",
			"key": "product_label12_sku",
			"value": "006",
			"type": "string"
		},
		{
			"id": "a352b4a2-f0f4-4d12-a079-765cce49750f",
			"key": "product_no_label_sku",
			"value": "023",
			"type": "string"
		},
		{
			"id": "538c4368-6506-4a57-9e04-94570c3f9ed8",
			"key": "product_no_color",
			"value": "177",
			"type": "string"
		},
		{
			"id": "d806409b-00e9-46a6-bcd1-2d415ab4c924",
			"key": "weight1",
			"value": "45 g",
			"type": "string"
		},
		{
			"id": "4004f6bf-5cbd-4e5e-beb8-3e4a8fc964d7",
			"key": "weight2",
			"value": "18 g",
			"type": "string"
		},
		{
			"id": "2f0f90e6-211a-491c-a20f-bcbb18938605",
			"key": "storage_capacity1",
			"value": "32 GB",
			"type": "string"
		},
		{
			"id": "5d22c50e-0037-453a-a66f-7795ebaefce1",
			"key": "storage_capacity2",
			"value": "64 GB",
			"type": "string"
		},
		{
			"id": "1bf5c686-1e82-4103-ab1d-1d3aacd1f7e9",
			"key": "rating1",
			"value": "4",
			"type": "string"
		},
		{
			"id": "4893e13c-d453-4066-8b17-81cb280c7461",
			"key": "rating2",
			"value": "10",
			"type": "string"
		},
		{
			"id": "9ae43bfb-cf13-48a2-a673-2eb20356980a",
			"key": "rating3",
			"value": "3.5",
			"type": "string"
		},
		{
			"id": "7479d86a-bfc2-4b69-bbcc-8800498574f6",
			"key": "category1",
			"value": "6",
			"type": "string"
		},
		{
			"id": "56fb958a-498e-4752-b4b4-284737a9f1d5",
			"key": "category2",
			"value": "5",
			"type": "string"
		},
		{
			"id": "b34ad007-6f31-4d4b-9c85-cfa168dd6684",
			"key": "page1",
			"value": "3",
			"type": "string"
		},
		{
			"id": "473af209-a978-4da8-b6b6-fa0f9a10d037",
			"key": "page2",
			"value": "3000",
			"type": "string"
		},
		{
			"id": "922da931-33a3-4bfe-88fb-eeac0608a112",
			"key": "ipp1",
			"value": "24",
			"type": "string"
		},
		{
			"id": "52010def-8b83-498c-a738-9fb018472994",
			"key": "ipp_default",
			"value": "12",
			"type": "string"
		},
		{
			"id": "28f69b3c-231b-4b8d-828b-01c8cca3fce5",
			"key": "page_offset1",
			"value": "24",
			"type": "string"
		},
		{
			"id": "2ff42999-77c4-471e-96b5-a98fe824eb11",
			"key": "sort_order_asc",
			"value": "asc",
			"type": "string"
		},
		{
			"id": "8235c8fc-3e55-498b-abdf-9ed959b6a982",
			"key": "sort_order_desc",
			"value": "desc",
			"type": "string"
		},
		{
			"id": "de616b2c-2f67-4435-992f-3348081bc6ea",
			"key": "sort_name_asc",
			"value": "name_asc",
			"type": "string"
		},
		{
			"id": "2af915f9-b995-4c4a-aec5-4ec97999f580",
			"key": "sort_name_desc",
			"value": "name_desc",
			"type": "string"
		},
		{
			"id": "baffb408-20e3-4c21-8bd9-dcaa82694311",
			"key": "sort_price_asc",
			"value": "price_asc",
			"type": "string"
		},
		{
			"id": "1385c328-320e-4fab-8089-57efe616599f",
			"key": "sort_price_desc",
			"value": "price_desc",
			"type": "string"
		},
		{
			"id": "e9c40e78-abfb-425e-939f-c6a0329ca9f3",
			"key": "sort_rating",
			"value": "rating",
			"type": "string"
		},
		{
			"id": "b71d465e-095b-4410-8bbb-da04bd12036e",
			"key": "currency_eur",
			"value": "EUR",
			"type": "string"
		},
		{
			"id": "ab7af76b-8f7f-4340-80a7-cf99485d1256",
			"key": "currency_chf",
			"value": "CHF",
			"type": "string"
		},
		{
			"id": "9e0bdbca-463c-4129-91a8-7e6d2356b0ff",
			"key": "currency_jpy",
			"value": "JPY",
			"type": "string"
		},
		{
			"id": "80e5f985-5e96-426e-88a0-e829b0e197d8",
			"key": "category_name1",
			"value": "Smartphones",
			"type": "string"
		}
	]
}