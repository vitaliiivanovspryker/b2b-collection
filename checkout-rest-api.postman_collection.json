{
	"info": {
		"_postman_id": "0f67936b-46cd-445f-8b3b-e6ababbd940f",
		"name": "checkout-rest-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Checkout-data for logged customer",
			"item": [
				{
					"name": "Prepare",
					"item": [
						{
							"name": "1.0.1 Create a customer[Checkout/logged customer]",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0276d05-b6e9-4b39-9359-220a64816d55",
										"exec": [
											"if ('errors' in pm.response.json() && pm.response.json().errors[0].code == 400) {",
											"    var email = pm.variables.get(\"email\");",
											"    pm.environment.set(\"email\", new Date().getTime() + email);",
											"    postman.setNextRequest(request.name);",
											"} else {",
											"    pm.test(\"Status code is 201\", function () {",
											"        pm.response.to.have.status(201);",
											"    });",
											"    pm.environment.set(\"customer_reference\", pm.response.json().data.id);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, de;q=0.9, en;q=0.1"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{\"type\":\"customers\",\"attributes\":{\"salutation\":\"{{salutation}}\",\"firstName\":\"{{firstName}}\",\"lastName\":\"{{lastName}}\",\"email\":\"{{email}}\",\"password\":\"{{password}}\",\"confirmPassword\":\"{{password}}\",\"acceptedTerms\":true}}}"
								},
								"url": {
									"raw": "{{url}}/customers",
									"host": [
										"{{url}}"
									],
									"path": [
										"customers"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.2 Request assess token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47e120f5-3cb6-4a40-82a7-3e9a9ff7ed30",
										"exec": [
											"var data = pm.response.json();",
											"postman.setEnvironmentVariable(\"token\", data.data.attributes.accessToken);",
											"postman.setEnvironmentVariable(\"refresh_token\", data.data.attributes.refreshToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\": {\n\t\t\"type\":\"access-tokens\",\n\t\t\"attributes\":{\n\t\t\t\"username\":\"{{email}}\",\n\t\t\t\"password\": \"{{password}}\"\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "{{url}}/access-tokens",
									"host": [
										"{{url}}"
									],
									"path": [
										"access-tokens"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.3 Get authorized customer's cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57faca8f-f7df-49cc-9ae4-607c1b136cca",
										"exec": [
											"var data = pm.response.json();",
											"postman.setEnvironmentVariable(\"cart_uuid\", data.data[0].id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/carts",
									"host": [
										"{{url}}"
									],
									"path": [
										"carts"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.4 Add an item to customer's cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
										"exec": [
											"//add tests to verify that item with required sku is added in relationships and include sections"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9,*;q=0.5"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"sku\": \"{{cart_rule_product_sku}}\",\n            \"quantity\": \"1\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/carts/{{cart_uuid}}/items",
									"host": [
										"{{url}}"
									],
									"path": [
										"carts",
										"{{cart_uuid}}",
										"items"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Execute",
					"item": [
						{
							"name": "1.0.5 Empty request with existed customer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "be0dba76-6257-4bf1-92c2-d684198df7d0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9fb7d2a2-36bc-43b4-af01-b80d0b94606e",
										"exec": [
											"var responseData = pm.response.json().data;",
											"",
											"pm.test(\"Has correct payment attributes\", function() {",
											"    var paymentMethods = responseData.attributes.paymentProviders[0].paymentMethods;",
											"    pm.expect(paymentMethods[1].paymentMethodName).to.be.eql(\"invoice\");",
											"    pm.expect(paymentMethods[1].requiredRequestData).to.have.all.members([",
											"        \"paymentMethod\",",
											"        \"paymentProvider\",",
											"        \"dummyPaymentInvoice.dateOfBirth\"",
											"        ]);",
											"    pm.expect(paymentMethods[0].paymentMethodName).to.be.eql(\"credit card\");",
											"    pm.expect(paymentMethods[0].requiredRequestData).to.have.all.members([",
											"        \"paymentMethod\",",
											"        \"paymentProvider\",",
											"        \"dummyPaymentCreditCard.cardType\",",
											"        \"dummyPaymentCreditCard.cardNumber\",",
											"        \"dummyPaymentCreditCard.nameOnCard\",",
											"        \"dummyPaymentCreditCard.cardExpiresMonth\",",
											"        \"dummyPaymentCreditCard.cardExpiresYear\",",
											"        \"dummyPaymentCreditCard.cardSecurityCode\"",
											"        ]);",
											"});",
											"",
											"pm.test(\"Has correct shipment attributes\", function() {",
											"    var shipmentMethods = responseData.attributes.shipmentMethods;",
											"    var shipmentData = JSON.parse(pm.variables.get(\"shipmentData\"));",
											"    ",
											"    var found = false;",
											"    for (var index in shipmentMethods) {",
											"        for (var testDataIndex in shipmentData) {",
											"            if (testDataIndex == shipmentMethods[index].id) {",
											"                pm.expect(shipmentMethods[index].carrierName).to.be.eql(shipmentData[testDataIndex].carrierName);",
											"                pm.expect(shipmentMethods[index].id).to.be.eql(shipmentData[testDataIndex].id);",
											"                pm.expect(shipmentMethods[index].name).to.be.eql(shipmentData[testDataIndex].name);",
											"                pm.expect(shipmentMethods[index].price).to.be.eql(shipmentData[testDataIndex].price);",
											"                pm.expect(shipmentMethods[index].taxRate).to.be.eql(shipmentData[testDataIndex].taxRate);",
											"                pm.expect(shipmentMethods[index].deliveryTime).to.be.eql(shipmentData[testDataIndex].shipmentDeliveryTime);",
											"                ",
											"                found = true;",
											"            }",
											"        }",
											"    }",
											"    pm.expect(found).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\": \n    {\"type\": \"checkout-data\", \n    \"attributes\": \n        { \n        \t\"idCart\": \"{{cart_uuid}}\",\n            \"payments\": []\n        }\n    }\n}\n"
								},
								"url": {
									"raw": "{{url}}/checkout-data",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.6 Empty request with existed customer and empty body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "be0dba76-6257-4bf1-92c2-d684198df7d0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f81e31f9-dfb6-4ce1-8c3e-52c9a4cd67c2",
										"exec": [
											"if (pm.response.code == 500) {",
											"    console.log(\"Server error\");",
											"} else {",
											"    var data = pm.response.json().data;",
											"   ",
											"    pm.test(\"Has correct address attributes\", function() {",
											"        pm.expect(data.attributes.addresses).to.be.empty;",
											"",
											"    });",
											"    ",
											"pm.test(\"Has correct payment attributes\", function() {",
											"    var paymentMethods = data.attributes.paymentProviders[0].paymentMethods;",
											"    pm.expect(paymentMethods[1].paymentMethodName).to.be.eql(\"invoice\");",
											"    pm.expect(paymentMethods[1].requiredRequestData).to.have.all.members([",
											"        \"paymentMethod\",",
											"        \"paymentProvider\",",
											"        \"dummyPaymentInvoice.dateOfBirth\"",
											"        ]);",
											"    pm.expect(paymentMethods[0].paymentMethodName).to.be.eql(\"credit card\");",
											"    pm.expect(paymentMethods[0].requiredRequestData).to.have.all.members([",
											"        \"paymentMethod\",",
											"        \"paymentProvider\",",
											"        \"dummyPaymentCreditCard.cardType\",",
											"        \"dummyPaymentCreditCard.cardNumber\",",
											"        \"dummyPaymentCreditCard.nameOnCard\",",
											"        \"dummyPaymentCreditCard.cardExpiresMonth\",",
											"        \"dummyPaymentCreditCard.cardExpiresYear\",",
											"        \"dummyPaymentCreditCard.cardSecurityCode\"",
											"        ]);",
											"});",
											"",
											"pm.test(\"Has correct shipment attributes\", function() {",
											"    var shipmentMethods = data.attributes.shipmentMethods;",
											"    var shipmentData = JSON.parse(pm.variables.get(\"shipmentData\"));",
											"    ",
											"    var found = false;",
											"    for (var index in shipmentMethods) {",
											"        for (var testDataIndex in shipmentData) {",
											"            if (testDataIndex == shipmentMethods[index].id) {",
											"                pm.expect(shipmentMethods[index].carrierName).to.be.eql(shipmentData[testDataIndex].carrierName);",
											"                pm.expect(shipmentMethods[index].id).to.be.eql(shipmentData[testDataIndex].id);",
											"                pm.expect(shipmentMethods[index].name).to.be.eql(shipmentData[testDataIndex].name);",
											"                pm.expect(shipmentMethods[index].price).to.be.eql(shipmentData[testDataIndex].price);",
											"                pm.expect(shipmentMethods[index].taxRate).to.be.eql(shipmentData[testDataIndex].taxRate);",
											"                pm.expect(shipmentMethods[index].deliveryTime).to.be.eql(shipmentData[testDataIndex].shipmentDeliveryTime);",
											"                ",
											"                found = true;",
											"            }",
											"        }",
											"    }",
											"    pm.expect(found).to.be.true;",
											"});",
											"",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\": \n    {\"type\": \"checkout-data\", \n    \"attributes\": \n        {\n            \"idCart\": \"{{cart_uuid}}\"\n        }\n    }\n}\n"
								},
								"url": {
									"raw": "{{url}}/checkout-data",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.7 Request with existed customer only billing addresses",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "be0dba76-6257-4bf1-92c2-d684198df7d0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "86f3f04d-8db7-4904-8a7e-79556104d229",
										"exec": [
											"if (pm.response.code == 500) {",
											"    console.log(\"Server error\");",
											"} else {",
											"    var data = pm.response.json().data;",
											"    pm.test(\"Has correct address attributes\", function() {",
											"        pm.expect(data.attributes.addresses).to.be.empty;",
											"",
											"    });",
											"    ",
											"pm.test(\"Has correct payment attributes\", function() {",
											"    var paymentMethods = data.attributes.paymentProviders[0].paymentMethods;",
											"    pm.expect(paymentMethods[1].paymentMethodName).to.be.eql(\"invoice\");",
											"    pm.expect(paymentMethods[1].requiredRequestData).to.have.all.members([",
											"        \"paymentMethod\",",
											"        \"paymentProvider\",",
											"        \"dummyPaymentInvoice.dateOfBirth\"",
											"        ]);",
											"    pm.expect(paymentMethods[0].paymentMethodName).to.be.eql(\"credit card\");",
											"    pm.expect(paymentMethods[0].requiredRequestData).to.have.all.members([",
											"        \"paymentMethod\",",
											"        \"paymentProvider\",",
											"        \"dummyPaymentCreditCard.cardType\",",
											"        \"dummyPaymentCreditCard.cardNumber\",",
											"        \"dummyPaymentCreditCard.nameOnCard\",",
											"        \"dummyPaymentCreditCard.cardExpiresMonth\",",
											"        \"dummyPaymentCreditCard.cardExpiresYear\",",
											"        \"dummyPaymentCreditCard.cardSecurityCode\"",
											"        ]);",
											"});",
											"",
											"pm.test(\"Has correct shipment attributes\", function() {",
											"    var shipmentMethods = data.attributes.shipmentMethods;",
											"    var shipmentData = JSON.parse(pm.variables.get(\"shipmentData\"));",
											"    ",
											"    var found = false;",
											"    for (var index in shipmentMethods) {",
											"        for (var testDataIndex in shipmentData) {",
											"            if (testDataIndex == shipmentMethods[index].id) {",
											"                pm.expect(shipmentMethods[index].carrierName).to.be.eql(shipmentData[testDataIndex].carrierName);",
											"                pm.expect(shipmentMethods[index].id).to.be.eql(shipmentData[testDataIndex].id);",
											"                pm.expect(shipmentMethods[index].name).to.be.eql(shipmentData[testDataIndex].name);",
											"                pm.expect(shipmentMethods[index].price).to.be.eql(shipmentData[testDataIndex].price);",
											"                pm.expect(shipmentMethods[index].taxRate).to.be.eql(shipmentData[testDataIndex].taxRate);",
											"                pm.expect(shipmentMethods[index].deliveryTime).to.be.eql(shipmentData[testDataIndex].shipmentDeliveryTime);",
											"                ",
											"                found = true;",
											"            }",
											"        }",
											"    }",
											"    pm.expect(found).to.be.true;",
											"});",
											"",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\": \n    {\"type\": \"checkout-data\", \n    \"attributes\": \n        {\n        \t\"idCart\": \"{{cart_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\"\n            }\n        }\n        \n    }\n}\n"
								},
								"url": {
									"raw": "{{url}}/checkout-data",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.8 Request with existed customer without payment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "be0dba76-6257-4bf1-92c2-d684198df7d0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "77dc970f-99cc-4b1e-adf0-536961bcd34b",
										"exec": [
											"var data = pm.response.json();",
											"",
											"pm.test(\"Has correct address attributes\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.addresses).to.be.empty;",
											"});",
											"",
											"pm.test(\"Has correct payment attributes\", function() {",
											"    var paymentMethods = data.data.attributes.paymentProviders[0].paymentMethods;",
											"    pm.expect(paymentMethods[1].paymentMethodName).to.be.eql(\"invoice\");",
											"    pm.expect(paymentMethods[1].requiredRequestData).to.have.all.members([",
											"        \"paymentMethod\",",
											"        \"paymentProvider\",",
											"        \"dummyPaymentInvoice.dateOfBirth\"",
											"        ]);",
											"    pm.expect(paymentMethods[0].paymentMethodName).to.be.eql(\"credit card\");",
											"    pm.expect(paymentMethods[0].requiredRequestData).to.have.all.members([",
											"        \"paymentMethod\",",
											"        \"paymentProvider\",",
											"        \"dummyPaymentCreditCard.cardType\",",
											"        \"dummyPaymentCreditCard.cardNumber\",",
											"        \"dummyPaymentCreditCard.nameOnCard\",",
											"        \"dummyPaymentCreditCard.cardExpiresMonth\",",
											"        \"dummyPaymentCreditCard.cardExpiresYear\",",
											"        \"dummyPaymentCreditCard.cardSecurityCode\"",
											"        ]);",
											"});",
											"",
											"pm.test(\"Has correct shipment attributes\", function() {",
											"    var shipmentMethods = data.data.attributes.shipmentMethods;",
											"    var shipmentData = JSON.parse(pm.variables.get(\"shipmentData\"));",
											"    ",
											"    var found = false;",
											"    for (var index in shipmentMethods) {",
											"        for (var testDataIndex in shipmentData) {",
											"            if (testDataIndex == shipmentMethods[index].id) {",
											"                pm.expect(shipmentMethods[index].carrierName).to.be.eql(shipmentData[testDataIndex].carrierName);",
											"                pm.expect(shipmentMethods[index].id).to.be.eql(shipmentData[testDataIndex].id);",
											"                pm.expect(shipmentMethods[index].name).to.be.eql(shipmentData[testDataIndex].name);",
											"                pm.expect(shipmentMethods[index].price).to.be.eql(shipmentData[testDataIndex].price);",
											"                pm.expect(shipmentMethods[index].taxRate).to.be.eql(shipmentData[testDataIndex].taxRate);",
											"                pm.expect(shipmentMethods[index].deliveryTime).to.be.eql(shipmentData[testDataIndex].shipmentDeliveryTime);",
											"                ",
											"                found = true;",
											"            }",
											"        }",
											"    }",
											"    pm.expect(found).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\": \n    {\"type\": \"checkout-data\", \n    \"attributes\": \n        {\n        \t\"idCart\": \"{{cart_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\"\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\"\n            },\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            }\n        }\n    }\n}\n"
								},
								"url": {
									"raw": "{{url}}/checkout-data",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.9 Request with existed customer without shipment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "be0dba76-6257-4bf1-92c2-d684198df7d0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "abf15f02-30ca-40bb-9e1e-7a379eefd19d",
										"exec": [
											"var data = pm.response.json();",
											"",
											"pm.test(\"Has correct address attributes\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.addresses).to.be.empty;",
											"});",
											"",
											"pm.test(\"Has correct payment attributes\", function() {",
											"    var paymentMethods = data.data.attributes.paymentProviders[0].paymentMethods;",
											"    pm.expect(paymentMethods[1].paymentMethodName).to.be.eql(\"invoice\");",
											"    pm.expect(paymentMethods[1].requiredRequestData).to.have.all.members([",
											"        \"paymentMethod\",",
											"        \"paymentProvider\",",
											"        \"dummyPaymentInvoice.dateOfBirth\"",
											"        ]);",
											"    pm.expect(paymentMethods[0].paymentMethodName).to.be.eql(\"credit card\");",
											"    pm.expect(paymentMethods[0].requiredRequestData).to.have.all.members([",
											"        \"paymentMethod\",",
											"        \"paymentProvider\",",
											"        \"dummyPaymentCreditCard.cardType\",",
											"        \"dummyPaymentCreditCard.cardNumber\",",
											"        \"dummyPaymentCreditCard.nameOnCard\",",
											"        \"dummyPaymentCreditCard.cardExpiresMonth\",",
											"        \"dummyPaymentCreditCard.cardExpiresYear\",",
											"        \"dummyPaymentCreditCard.cardSecurityCode\"",
											"        ]);",
											"});",
											"",
											"pm.test(\"Has correct shipment attributes\", function() {",
											"    var shipmentMethods = data.data.attributes.shipmentMethods;",
											"    var shipmentData = JSON.parse(pm.variables.get(\"shipmentData\"));",
											"    ",
											"    var found = false;",
											"    for (var index in shipmentMethods) {",
											"        for (var testDataIndex in shipmentData) {",
											"            if (testDataIndex == shipmentMethods[index].id) {",
											"                pm.expect(shipmentMethods[index].carrierName).to.be.eql(shipmentData[testDataIndex].carrierName);",
											"                pm.expect(shipmentMethods[index].id).to.be.eql(shipmentData[testDataIndex].id);",
											"                pm.expect(shipmentMethods[index].name).to.be.eql(shipmentData[testDataIndex].name);",
											"                pm.expect(shipmentMethods[index].price).to.be.eql(shipmentData[testDataIndex].price);",
											"                pm.expect(shipmentMethods[index].taxRate).to.be.eql(shipmentData[testDataIndex].taxRate);",
											"                pm.expect(shipmentMethods[index].deliveryTime).to.be.eql(shipmentData[testDataIndex].shipmentDeliveryTime);",
											"                ",
											"                found = true;",
											"            }",
											"        }",
											"    }",
											"    pm.expect(found).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\": \n    {\"type\": \"checkout-data\", \n    \"attributes\": \n        {\n        \t\"idCart\": \"{{cart_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\"\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\"\n            },\n            \"payments\": []\n        }\n    }\n}\n"
								},
								"url": {
									"raw": "{{url}}/checkout-data",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.10 Request with existed customer without voucher code",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "be0dba76-6257-4bf1-92c2-d684198df7d0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "50af4945-babb-4222-8b7c-116d965c9b48",
										"exec": [
											"var data = pm.response.json();",
											"",
											"pm.test(\"Has correct address attributes\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.addresses).to.be.empty;",
											"});",
											"",
											" pm.test(\"Has correct payment attributes\", function() {",
											"    var paymentMethods = data.data.attributes.paymentProviders[0].paymentMethods;",
											"    pm.expect(paymentMethods[1].paymentMethodName).to.be.eql(\"invoice\");",
											"    pm.expect(paymentMethods[1].requiredRequestData).to.have.all.members([",
											"        \"paymentMethod\",",
											"        \"paymentProvider\",",
											"        \"dummyPaymentInvoice.dateOfBirth\"",
											"        ]);",
											"    pm.expect(paymentMethods[0].paymentMethodName).to.be.eql(\"credit card\");",
											"    pm.expect(paymentMethods[0].requiredRequestData).to.have.all.members([",
											"        \"paymentMethod\",",
											"        \"paymentProvider\",",
											"        \"dummyPaymentCreditCard.cardType\",",
											"        \"dummyPaymentCreditCard.cardNumber\",",
											"        \"dummyPaymentCreditCard.nameOnCard\",",
											"        \"dummyPaymentCreditCard.cardExpiresMonth\",",
											"        \"dummyPaymentCreditCard.cardExpiresYear\",",
											"        \"dummyPaymentCreditCard.cardSecurityCode\"",
											"        ]);",
											"});",
											"",
											"pm.test(\"Has correct shipment attributes\", function() {",
											"    var shipmentMethods = data.data.attributes.shipmentMethods;",
											"    var shipmentData = JSON.parse(pm.variables.get(\"shipmentData\"));",
											"    ",
											"    var found = false;",
											"    for (var index in shipmentMethods) {",
											"        for (var testDataIndex in shipmentData) {",
											"            if (testDataIndex == shipmentMethods[index].id) {",
											"                pm.expect(shipmentMethods[index].carrierName).to.be.eql(shipmentData[testDataIndex].carrierName);",
											"                pm.expect(shipmentMethods[index].id).to.be.eql(shipmentData[testDataIndex].id);",
											"                pm.expect(shipmentMethods[index].name).to.be.eql(shipmentData[testDataIndex].name);",
											"                pm.expect(shipmentMethods[index].price).to.be.eql(shipmentData[testDataIndex].price);",
											"                pm.expect(shipmentMethods[index].taxRate).to.be.eql(shipmentData[testDataIndex].taxRate);",
											"                pm.expect(shipmentMethods[index].deliveryTime).to.be.eql(shipmentData[testDataIndex].shipmentDeliveryTime);",
											"                ",
											"                found = true;",
											"            }",
											"        }",
											"    }",
											"    pm.expect(found).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\": \n    {\"type\": \"checkout-data\", \n    \"attributes\": \n        {\n        \t\"idCart\": \"{{cart_uuid}}\",\n        \t\"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\"\n        \t},\n        \t\"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\"\n        \t},\n        \t\"payments\": [],\n        \t\"shipment\": {\n                \"idShipmentMethod\": 1\n        \t}\n        }\n    }\n}\n"
								},
								"url": {
									"raw": "{{url}}/checkout-data",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "[UPD test] 1.0.5 Request for checkout-data with customer, addresess and cart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f2d3e4dd-c73d-467a-a4f1-00bed7976f76",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c90113eb-295a-47a2-827a-9ec6d9015650",
										"exec": [
											"var data = pm.response.json();",
											"",
											"pm.test(\"Has correct address attributes\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.attributes.addresses).to.be.empty;",
											"});",
											"",
											"  pm.test(\"Has correct payment attributes\", function() {",
											"    var paymentMethods = data.data.attributes.paymentProviders[0].paymentMethods;",
											"    pm.expect(paymentMethods[1].paymentMethodName).to.be.eql(\"invoice\");",
											"    pm.expect(paymentMethods[1].requiredRequestData).to.have.all.members([",
											"        \"paymentMethod\",",
											"        \"paymentProvider\",",
											"        \"dummyPaymentInvoice.dateOfBirth\"",
											"        ]);",
											"    pm.expect(paymentMethods[0].paymentMethodName).to.be.eql(\"credit card\");",
											"    pm.expect(paymentMethods[0].requiredRequestData).to.have.all.members([",
											"        \"paymentMethod\",",
											"        \"paymentProvider\",",
											"        \"dummyPaymentCreditCard.cardType\",",
											"        \"dummyPaymentCreditCard.cardNumber\",",
											"        \"dummyPaymentCreditCard.nameOnCard\",",
											"        \"dummyPaymentCreditCard.cardExpiresMonth\",",
											"        \"dummyPaymentCreditCard.cardExpiresYear\",",
											"        \"dummyPaymentCreditCard.cardSecurityCode\"",
											"        ]);",
											"});",
											"",
											"pm.test(\"Has correct shipment attributes\", function() {",
											"    var shipmentMethods = data.data.attributes.shipmentMethods;",
											"    var shipmentData = JSON.parse(pm.variables.get(\"shipmentData\"));",
											"    ",
											"    var found = false;",
											"    for (var index in shipmentMethods) {",
											"        for (var testDataIndex in shipmentData) {",
											"            if (testDataIndex == shipmentMethods[index].id) {",
											"                pm.expect(shipmentMethods[index].carrierName).to.be.eql(shipmentData[testDataIndex].carrierName);",
											"                pm.expect(shipmentMethods[index].id).to.be.eql(shipmentData[testDataIndex].id);",
											"                pm.expect(shipmentMethods[index].name).to.be.eql(shipmentData[testDataIndex].name);",
											"                pm.expect(shipmentMethods[index].price).to.be.eql(shipmentData[testDataIndex].price);",
											"                pm.expect(shipmentMethods[index].taxRate).to.be.eql(shipmentData[testDataIndex].taxRate);",
											"                pm.expect(shipmentMethods[index].deliveryTime).to.be.eql(shipmentData[testDataIndex].shipmentDeliveryTime);",
											"                ",
											"                found = true;",
											"            }",
											"        }",
											"    }",
											"    pm.expect(found).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":\n    {\"type\": \"checkout-data\", \"attributes\":\n        {\n        \t\"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"idCart\": \"{{cart_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            }\n        }\n    }\n}\n"
								},
								"url": {
									"raw": "{{url}}/checkout-data",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "[UPD test] 1.0.6 Request for checkout-data with full body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f2d3e4dd-c73d-467a-a4f1-00bed7976f76",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c90113eb-295a-47a2-827a-9ec6d9015650",
										"exec": [
											"var responseData = pm.response.json().data;",
											"",
											"pm.test(\"Has correct payment attributes\", function() {",
											"    var paymentMethods = responseData.attributes.paymentProviders[0].paymentMethods;",
											"    pm.expect(paymentMethods[1].paymentMethodName).to.be.eql(\"invoice\");",
											"    pm.expect(paymentMethods[1].requiredRequestData).to.have.all.members([",
											"        \"paymentMethod\",",
											"        \"paymentProvider\",",
											"        \"dummyPaymentInvoice.dateOfBirth\"",
											"        ]);",
											"    pm.expect(paymentMethods[0].paymentMethodName).to.be.eql(\"credit card\");",
											"    pm.expect(paymentMethods[0].requiredRequestData).to.have.all.members([",
											"        \"paymentMethod\",",
											"        \"paymentProvider\",",
											"        \"dummyPaymentCreditCard.cardType\",",
											"        \"dummyPaymentCreditCard.cardNumber\",",
											"        \"dummyPaymentCreditCard.nameOnCard\",",
											"        \"dummyPaymentCreditCard.cardExpiresMonth\",",
											"        \"dummyPaymentCreditCard.cardExpiresYear\",",
											"        \"dummyPaymentCreditCard.cardSecurityCode\"",
											"        ]);",
											"});",
											"",
											"pm.test(\"Has correct shipment attributes\", function() {",
											"    var shipmentMethods = responseData.attributes.shipmentMethods;",
											"    var shipmentData = JSON.parse(pm.variables.get(\"shipmentData\"));",
											"    ",
											"    var found = false;",
											"    for (var index in shipmentMethods) {",
											"        for (var testDataIndex in shipmentData) {",
											"            if (testDataIndex == shipmentMethods[index].id) {",
											"                pm.expect(shipmentMethods[index].carrierName).to.be.eql(shipmentData[testDataIndex].carrierName);",
											"                pm.expect(shipmentMethods[index].id).to.be.eql(shipmentData[testDataIndex].id);",
											"                pm.expect(shipmentMethods[index].name).to.be.eql(shipmentData[testDataIndex].name);",
											"                pm.expect(shipmentMethods[index].price).to.be.eql(shipmentData[testDataIndex].price);",
											"                pm.expect(shipmentMethods[index].taxRate).to.be.eql(shipmentData[testDataIndex].taxRate);",
											"                pm.expect(shipmentMethods[index].deliveryTime).to.be.eql(shipmentData[testDataIndex].shipmentDeliveryTime);",
											"                ",
											"                found = true;",
											"            }",
											"        }",
											"    }",
											"    pm.expect(found).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":\n    {\"type\": \"checkout-data\", \"attributes\":\n        {\n        \t\"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"idCart\": \"{{cart_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"payments\": [\n                    {\n                        \"paymentMethodName\": \"credit card\",\n                        \"paymentProviderName\": \"DummyPayment\"\n                    }\n                ],\n                \"shipment\": {\n                    \"idShipmentMethod\": 1\n                }\n        }\n    }\n}\n"
								},
								"url": {
									"raw": "{{url}}/checkout-data",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout-data"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0ac9035f-4e41-4c1c-9567-c05567507154",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b554c4ab-dbcf-4e4d-8644-cd026fff15a7",
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code !== 500) {",
									"    var responseData = pm.response.json().data;",
									"",
									"    pm.test(\"Response should have a `200` status code\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    pm.test(\"Response is json\", function () {",
									"        pm.response.to.have.jsonBody(); ",
									"    });",
									"    ",
									"    pm.test(\"Response should be successful response\", function () {",
									"        pm.response.to.not.be.error;",
									"    });",
									"    ",
									"    pm.test(\"Response should have a `checkout-data` type\", function () {",
									"        pm.expect(responseData.type).to.equal(\"checkout-data\");",
									"    });",
									"    ",
									"    pm.test(\"Response should not have a resource id\", function () {",
									"        pm.expect(responseData.id).to.be.null;",
									"    });",
									"    ",
									"    pm.test(\"Response should have proper attributes\", function () {",
									"        pm.expect(responseData).to.have.keys(",
									"            \"type\",",
									"            \"id\",",
									"            \"attributes\",",
									"            \"links\"",
									"        );",
									"        pm.expect(responseData.attributes).to.have.all.keys(",
									"            \"addresses\",",
									"            \"paymentProviders\",",
									"            \"shipmentMethods\"",
									"        );",
									"    });",
									"    ",
									"    pm.test(\"Has self link\", function() {",
									"        pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/checkout-data\");",
									"    });",
									"}"
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative cases",
					"item": [
						{
							"name": "1.0.7 Negative. Request for checkout-data with broken URL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f2d3e4dd-c73d-467a-a4f1-00bed7976f76",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c90113eb-295a-47a2-827a-9ec6d9015650",
										"exec": [
											"var data = pm.response.json();",
											"pm.test(\"Response should have a `404` status code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response should be an error response\", function () {",
											"    pm.response.to.be.error;",
											"});",
											"",
											"pm.test(\"Response should have an `errors` object\", function () {",
											"    pm.response.to.be.json;",
											"    pm.expect(data).to.have.property(\"errors\");",
											"});",
											"",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"status\");",
											"    pm.expect(data.errors[0].status).to.equal(404);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
											"    pm.expect(data.errors[0].detail).to.equal(\"Not Found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"checkout-data\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"idCart\": \"{{cart_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/checkoutdata",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkoutdata"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.8 Negative. Request for checkout-data with wrong type in body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f2d3e4dd-c73d-467a-a4f1-00bed7976f76",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c90113eb-295a-47a2-827a-9ec6d9015650",
										"exec": [
											"var data = pm.response.json();",
											"pm.test(\"Response should have a `400` status code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response should be an error response\", function () {",
											"    pm.response.to.be.error;",
											"});",
											"",
											"pm.test(\"Response should have an `errors` object\", function () {",
											"    pm.response.to.be.json;",
											"    pm.expect(data).to.have.property(\"errors\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"status\");",
											"    pm.expect(data.errors[0].status).to.equal(400);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
											"    pm.expect(data.errors[0].detail).to.equal(\"Invalid type.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"blabla-data\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"idCart\": \"{{cart_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/checkout-data",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.9 Negative. Request for checkout-data with empty body ",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f2d3e4dd-c73d-467a-a4f1-00bed7976f76",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c90113eb-295a-47a2-827a-9ec6d9015650",
										"exec": [
											"var data = pm.response.json();",
											"pm.test(\"Response should have a `400` status code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response should be an error response\", function () {",
											"    pm.response.to.be.error;",
											"});",
											"",
											"pm.test(\"Response should have an `errors` object\", function () {",
											"    pm.response.to.be.json;",
											"    pm.expect(data).to.have.property(\"errors\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"status\");",
											"    pm.expect(data.errors[0].status).to.equal(400);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
											"    pm.expect(data.errors[0].detail).to.equal(\"Post data is invalid.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/checkout-data",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.10 Negative. Post checkout data without auth token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
										"exec": [
											"if (pm.response.code == 500) {",
											"    console.log(\"Server error\");",
											"} else {",
											"    var data = pm.response.json();",
											"    pm.test(\"Response should have a `400` status code\", function () {",
											"        pm.response.to.have.status(400);",
											"    });",
											"    ",
											"    pm.test(\"Response should be an error response\", function () {",
											"        pm.response.to.be.error;",
											"    });",
											"    ",
											"    pm.test(\"Response should have an `errors` object\", function () {",
											"        pm.response.to.be.json;",
											"        pm.expect(data).to.have.property(\"errors\");",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"Response should have a correct error status\", function () {",
											"        pm.expect(data.errors[0]).to.have.property(\"status\");",
											"        pm.expect(data.errors[0].status).to.equal(400);",
											"    });",
											"    ",
											"    pm.test(\"Response should have a correct error code\", function () {",
											"        pm.expect(data.errors[0]).to.have.property(\"code\");",
											"        pm.expect(data.errors[0].code).to.equal(\"1105\");",
											"    });",
											"    ",
											"    pm.test(\"Response should have a correct error detail\", function () {",
											"        pm.expect(data.errors[0]).to.have.property(\"detail\");",
											"        pm.expect(data.errors[0].detail).to.equal(\"One of Authorization or X-Anonymous-Customer-Unique-Id headers is required.\");",
											"    });",
											"",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9,*;q=0.5"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":\n    {\"type\": \"checkout-data\", \"attributes\":\n        {\n        \t\"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \n            \"idCart\": \"{{cart_uuid}}\",\n            \n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            }\n        }\n    }\n}\n"
								},
								"url": {
									"raw": "{{url}}/checkout-data",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.11 Negative Post checkout data without cart UUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
										"exec": [
											"if (pm.response.code == 500) {",
											"    console.log(\"Server error\");",
											"} else {",
											"    var data = pm.response.json();",
											"    pm.test(\"Response should have a `422` status code\", function () {",
											"        pm.response.to.have.status(422);",
											"    });",
											"    ",
											"    pm.test(\"Response should be an error response\", function () {",
											"        pm.response.to.be.error;",
											"    });",
											"    ",
											"    pm.test(\"Response should have an `errors` object\", function () {",
											"        pm.response.to.be.json;",
											"        pm.expect(data).to.have.property(\"errors\");",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"Response should have a correct error status\", function () {",
											"        pm.expect(data.errors[0]).to.have.property(\"status\");",
											"        pm.expect(data.errors[0].status).to.equal(422);",
											"    });",
											"    ",
											"    pm.test(\"Response should have a correct error code\", function () {",
											"        pm.expect(data.errors[0]).to.have.property(\"code\");",
											"        pm.expect(data.errors[0].code).to.equal(\"901\");",
											"    });",
											"    ",
											"    pm.test(\"Response should have a correct error detail\", function () {",
											"        pm.expect(data.errors[0]).to.have.property(\"detail\");",
											"        pm.expect(data.errors[0].detail).to.equal(\"idCart => This field is missing.\");",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b0e04376-5abf-467a-bf47-bbbdf19afca6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9,*;q=0.5"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":\n    {\"type\": \"checkout-data\", \"attributes\":\n        {\n        \t\"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            }\n        }\n    }\n}\n"
								},
								"url": {
									"raw": "{{url}}/checkout-data",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.12 Negative Post checkout data with wrong method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
										"exec": [
											"var data = pm.response.json();",
											"pm.test(\"Response should have a `404` status code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response should be an error response\", function () {",
											"    pm.response.to.be.error;",
											"});",
											"",
											"pm.test(\"Response should have an `errors` object\", function () {",
											"    pm.response.to.be.json;",
											"    pm.expect(data).to.have.property(\"errors\");",
											"});",
											"",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"status\");",
											"    pm.expect(data.errors[0].status).to.equal(404);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
											"    pm.expect(data.errors[0].detail).to.equal(\"Not Found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9,*;q=0.5"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"checkout-data\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/checkout-data",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.13 Negative Post checkout data with wrong method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
										"exec": [
											"var data = pm.response.json();",
											"pm.test(\"Response should have a `404` status code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response should be an error response\", function () {",
											"    pm.response.to.be.error;",
											"});",
											"",
											"pm.test(\"Response should have an `errors` object\", function () {",
											"    pm.response.to.be.json;",
											"    pm.expect(data).to.have.property(\"errors\");",
											"});",
											"",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"status\");",
											"    pm.expect(data.errors[0].status).to.equal(404);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
											"    pm.expect(data.errors[0].detail).to.equal(\"Not Found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9,*;q=0.5"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/checkout-data",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.14 Negative Post checkout data with wrong method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
										"exec": [
											"var data = pm.response.json();",
											"pm.test(\"Response should have a `404` status code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response should be error response\", function () {",
											"    pm.response.to.be.error;",
											"});",
											"",
											"pm.test(\"Response should have an `errors` object\", function () {",
											"    pm.response.to.be.json;",
											"    pm.expect(data).to.have.property(\"errors\");",
											"});",
											"",
											"pm.test(\"Response should not have an error code\", function () {",
											"    pm.expect(data.errors[0]).not.to.have.property(\"code\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"status\");",
											"    pm.expect(data.errors[0].status).to.equal(404);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
											"    pm.expect(data.errors[0].detail).to.equal(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9,*;q=0.5"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"value": "{{unique_anonymous_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/checkout",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Cleanup",
					"item": [
						{
							"name": "Delete customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68749e00-c774-4b55-9b9a-ce0462740b61",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.environment.unset(\"customer_reference\");",
											"pm.environment.unset(\"refresh_token\");",
											"pm.environment.unset(\"token\");",
											"pm.environment.unset(\"cart_uuid\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b4e77322-2686-4984-806b-d32b21ab994c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/customers/{{customer_reference}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"customers",
										"{{customer_reference}}"
									]
								},
								"description": "This test is to verify that request returns valid message and status code if customer does not have any addresses"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "82da4bee-2ea1-4326-ba76-aa47d2155003",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fa1dd332-0e5f-4997-886a-9aa1c1a39a06",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Checkout-data for Anonymous customer",
			"item": [
				{
					"name": "Prepare",
					"item": [
						{
							"name": "Request for list of guest cart for 01",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "576388b4-f522-4956-b104-aa8718ad2851",
										"exec": [
											"",
											"// pm.test(\"X-Anonymous-Customer-Unique-Id is present\", function () {",
											"//     pm.response.to.have.header(\"X-Anonymous-Customer-Unique-Id\");",
											"// });",
											"",
											"pm.test(\"Response time is less than 2000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has array returned \", function (){",
											"    pm.expect(pm.response.json().data).to.eql([]);",
											"});",
											"",
											"pm.test(\"Has self link to the cart\", function(){",
											"    pm.expect(pm.response.json().links.self).to.eql(pm.variables.get(\"url\") + \"/guest-carts\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c1d19957-23bb-44ce-bda3-05e035e88adc",
										"exec": [
											"pm.variables.set(\"unique_anonymous_id\", new Date().getTime());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"type": "text",
										"value": "{{unique_anonymous_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/guest-carts",
									"host": [
										"{{url}}"
									],
									"path": [
										"guest-carts"
									]
								}
							},
							"response": []
						},
						{
							"name": "[UPD test] 1.0.1 Request to cretea/add an item to guest cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d32e652-e2ec-4cff-8dd4-de3fa29cf904",
										"exec": [
											"// update tests with valid  structure verify that correct item exists in releations and include sections",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"guest_cart_uuid\", jsonData.data.id);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Has type and cart's uud returned \", function (){",
											"    pm.expect(jsonData.data.type).to.eql(\"guest-carts\");",
											"});",
											"",
											"pm.test(\"Has cart description returned \", function (){",
											"    pm.expect(pm.response.json().data.attributes.priceMode).to.eql(\"GROSS_MODE\");",
											"    pm.expect(pm.response.json().data.attributes.currency).to.eql(\"EUR\");",
											"    pm.expect(pm.response.json().data.attributes.store).to.eql(\"DE\");",
											"    //pm.expect(pm.response.json().data.attributes.discounts).to.eql({});",
											"    //pm.expect(pm.response.json().data.attributes.totals).to.eql(null);",
											"});",
											"",
											"pm.test(\"Has self link to the cart\", function(){",
											"    pm.expect(jsonData.data.links.self).to.eql(pm.variables.get(\"url\") + \"/guest-carts/\" + pm.variables.get(\"guest_cart_uuid\"));",
											"});",
											"",
											"//Relationships ",
											"",
											"pm.test(\"Has relation returned\", function () {",
											"    pm.expect(jsonData.data.relationships[\"guest-cart-items\"].data[0].type).to.eql(\"guest-cart-items\");",
											"    pm.expect(jsonData.data.relationships[\"guest-cart-items\"].data[0].id).to.eql(pm.variables.get(\"concrete_sku\"));",
											"});",
											"",
											"// Included ",
											"",
											"pm.test(\"Has include guest-cart-items returned\", function() {",
											"    pm.expect(jsonData.included[4].type).to.eql(\"guest-cart-items\"); ",
											"    pm.expect(jsonData.included[4].id).to.eql(pm.variables.get(\"concrete_sku\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"type": "text",
										"value": "{{unique_anonymous_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\": { \"type\": \"guest-cart-items\", \"attributes\": {\"sku\":\"{{concrete_sku}}\", \"quantity\": \"1\"}}}"
								},
								"url": {
									"raw": "{{url}}/guest-cart-items",
									"host": [
										"{{url}}"
									],
									"path": [
										"guest-cart-items"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Execute",
					"item": [
						{
							"name": "Empty request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64c49f5b-14a9-488e-abec-218f67edee43",
										"exec": [
											"var responseData = pm.response.json().data;",
											"",
											"pm.test(\"Has correct address attributes\", function() {",
											"    pm.expect(responseData.attributes.addresses).to.be.empty;",
											"});",
											"",
											"pm.test(\"Has correct payment attributes\", function() {",
											"    var paymentMethods = responseData.attributes.paymentProviders[0].paymentMethods;",
											"    pm.expect(paymentMethods[1].paymentMethodName).to.be.eql(\"invoice\");",
											"    pm.expect(paymentMethods[1].requiredRequestData).to.have.all.members([",
											"        \"paymentMethod\",",
											"        \"paymentProvider\",",
											"        \"dummyPaymentInvoice.dateOfBirth\"",
											"        ]);",
											"    pm.expect(paymentMethods[0].paymentMethodName).to.be.eql(\"credit card\");",
											"    pm.expect(paymentMethods[0].requiredRequestData).to.have.all.members([",
											"        \"paymentMethod\",",
											"        \"paymentProvider\",",
											"        \"dummyPaymentCreditCard.cardType\",",
											"        \"dummyPaymentCreditCard.cardNumber\",",
											"        \"dummyPaymentCreditCard.nameOnCard\",",
											"        \"dummyPaymentCreditCard.cardExpiresMonth\",",
											"        \"dummyPaymentCreditCard.cardExpiresYear\",",
											"        \"dummyPaymentCreditCard.cardSecurityCode\"",
											"        ]);",
											"});",
											"",
											"pm.test(\"Has correct shipment attributes\", function() {",
											"    var shipmentMethods = responseData.attributes.shipmentMethods;",
											"    var shipmentData = JSON.parse(pm.variables.get(\"shipmentData\"));",
											"    ",
											"    var found = false;",
											"    for (var index in shipmentMethods) {",
											"        for (var testDataIndex in shipmentData) {",
											"            if (testDataIndex == shipmentMethods[index].id) {",
											"                pm.expect(shipmentMethods[index].carrierName).to.be.eql(shipmentData[testDataIndex].carrierName);",
											"                pm.expect(shipmentMethods[index].id).to.be.eql(shipmentData[testDataIndex].id);",
											"                pm.expect(shipmentMethods[index].name).to.be.eql(shipmentData[testDataIndex].name);",
											"                pm.expect(shipmentMethods[index].price).to.be.eql(shipmentData[testDataIndex].price);",
											"                pm.expect(shipmentMethods[index].taxRate).to.be.eql(shipmentData[testDataIndex].taxRate);",
											"                pm.expect(shipmentMethods[index].deliveryTime).to.be.eql(shipmentData[testDataIndex].shipmentDeliveryTime);",
											"                ",
											"                found = true;",
											"            }",
											"        }",
											"    }",
											"    pm.expect(found).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"value": "{{unique_anonymous_id}}",
										"type": "text"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\": \n    {\"type\": \"checkout-data\", \n    \"attributes\": \n        {\n        \t\"idCart\": \"{{guest_cart_uuid}}\"\n        }\n    }\n}\n"
								},
								"url": {
									"raw": "{{url}}/checkout-data",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "[UPD test] Request only addresses",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64c49f5b-14a9-488e-abec-218f67edee43",
										"exec": [
											"var responseData = pm.response.json().data;",
											"",
											"pm.test(\"Has correct address attributes\", function() {",
											"    pm.expect(responseData.attributes.addresses).to.be.empty;",
											"});",
											"",
											"pm.test(\"Has correct payment attributes\", function() {",
											"    var paymentMethods = responseData.attributes.paymentProviders[0].paymentMethods;",
											"    pm.expect(paymentMethods[1].paymentMethodName).to.be.eql(\"invoice\");",
											"    pm.expect(paymentMethods[1].requiredRequestData).to.have.all.members([",
											"        \"paymentMethod\",",
											"        \"paymentProvider\",",
											"        \"dummyPaymentInvoice.dateOfBirth\"",
											"        ]);",
											"    pm.expect(paymentMethods[0].paymentMethodName).to.be.eql(\"credit card\");",
											"    pm.expect(paymentMethods[0].requiredRequestData).to.have.all.members([",
											"        \"paymentMethod\",",
											"        \"paymentProvider\",",
											"        \"dummyPaymentCreditCard.cardType\",",
											"        \"dummyPaymentCreditCard.cardNumber\",",
											"        \"dummyPaymentCreditCard.nameOnCard\",",
											"        \"dummyPaymentCreditCard.cardExpiresMonth\",",
											"        \"dummyPaymentCreditCard.cardExpiresYear\",",
											"        \"dummyPaymentCreditCard.cardSecurityCode\"",
											"        ]);",
											"});",
											"",
											"pm.test(\"Has correct shipment attributes\", function() {",
											"    var shipmentMethods = responseData.attributes.shipmentMethods;",
											"    var shipmentData = JSON.parse(pm.variables.get(\"shipmentData\"));",
											"    ",
											"    var found = false;",
											"    for (var index in shipmentMethods) {",
											"        for (var testDataIndex in shipmentData) {",
											"            if (testDataIndex == shipmentMethods[index].id) {",
											"                pm.expect(shipmentMethods[index].carrierName).to.be.eql(shipmentData[testDataIndex].carrierName);",
											"                pm.expect(shipmentMethods[index].id).to.be.eql(shipmentData[testDataIndex].id);",
											"                pm.expect(shipmentMethods[index].name).to.be.eql(shipmentData[testDataIndex].name);",
											"                pm.expect(shipmentMethods[index].price).to.be.eql(shipmentData[testDataIndex].price);",
											"                pm.expect(shipmentMethods[index].taxRate).to.be.eql(shipmentData[testDataIndex].taxRate);",
											"                pm.expect(shipmentMethods[index].deliveryTime).to.be.eql(shipmentData[testDataIndex].shipmentDeliveryTime);",
											"                ",
											"                found = true;",
											"            }",
											"        }",
											"    }",
											"    pm.expect(found).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"value": "{{unique_anonymous_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\": \n    {\"type\": \"checkout-data\", \n    \"attributes\": \n        {\n        \t\"idCart\": \"{{guest_cart_uuid}}\",\n        \t\"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"firstName\": \"Spencor\",\n                \"lastName\": \"Hopkin\",\n                \"address1\": \"Julie-Wolfthorn-Straße\",\n                \"address2\": \"1\",\n                \"address3\": null,\n                \"zipCode\": \"10115\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"spryker\",\n                \"phone\": \"+49 (30) 2084 98350\",\n                \"isDefaultShipping\": null,\n                \"isDefaultBilling\": null\n            },\n\t\t\t\"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"firstName\": \"Spencor\",\n                \"lastName\": \"Hopkin\",\n                \"address1\": \"Julie-Wolfthorn-Straße\",\n                \"address2\": \"1\",\n                \"address3\": null,\n                \"zipCode\": \"10115\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"spryker\",\n                \"phone\": \"+49 (30) 2084 98350\",\n                \"isDefaultShipping\": null,\n                \"isDefaultBilling\": null\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/checkout-data",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "[UPD test] Empty request without shipment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64c49f5b-14a9-488e-abec-218f67edee43",
										"exec": [
											"var responseData = pm.response.json().data;",
											"",
											"pm.test(\"Has correct address attributes\", function() {",
											"    pm.expect(responseData.attributes.addresses).to.be.empty;",
											"});",
											"",
											"pm.test(\"Has correct payment attributes\", function() {",
											"    var paymentMethods = responseData.attributes.paymentProviders[0].paymentMethods;",
											"    pm.expect(paymentMethods[1].paymentMethodName).to.be.eql(\"invoice\");",
											"    pm.expect(paymentMethods[1].requiredRequestData).to.have.all.members([",
											"        \"paymentMethod\",",
											"        \"paymentProvider\",",
											"        \"dummyPaymentInvoice.dateOfBirth\"",
											"        ]);",
											"    pm.expect(paymentMethods[0].paymentMethodName).to.be.eql(\"credit card\");",
											"    pm.expect(paymentMethods[0].requiredRequestData).to.have.all.members([",
											"        \"paymentMethod\",",
											"        \"paymentProvider\",",
											"        \"dummyPaymentCreditCard.cardType\",",
											"        \"dummyPaymentCreditCard.cardNumber\",",
											"        \"dummyPaymentCreditCard.nameOnCard\",",
											"        \"dummyPaymentCreditCard.cardExpiresMonth\",",
											"        \"dummyPaymentCreditCard.cardExpiresYear\",",
											"        \"dummyPaymentCreditCard.cardSecurityCode\"",
											"        ]);",
											"});",
											"",
											"pm.test(\"Has correct shipment attributes\", function() {",
											"    var shipmentMethods = responseData.attributes.shipmentMethods;",
											"    var shipmentData = JSON.parse(pm.variables.get(\"shipmentData\"));",
											"    ",
											"    var found = false;",
											"    for (var index in shipmentMethods) {",
											"        for (var testDataIndex in shipmentData) {",
											"            if (testDataIndex == shipmentMethods[index].id) {",
											"                pm.expect(shipmentMethods[index].carrierName).to.be.eql(shipmentData[testDataIndex].carrierName);",
											"                pm.expect(shipmentMethods[index].id).to.be.eql(shipmentData[testDataIndex].id);",
											"                pm.expect(shipmentMethods[index].name).to.be.eql(shipmentData[testDataIndex].name);",
											"                pm.expect(shipmentMethods[index].price).to.be.eql(shipmentData[testDataIndex].price);",
											"                pm.expect(shipmentMethods[index].taxRate).to.be.eql(shipmentData[testDataIndex].taxRate);",
											"                pm.expect(shipmentMethods[index].deliveryTime).to.be.eql(shipmentData[testDataIndex].shipmentDeliveryTime);",
											"                ",
											"                found = true;",
											"            }",
											"        }",
											"    }",
											"    pm.expect(found).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"value": "{{unique_anonymous_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\": \n    {\"type\": \"checkout-data\", \n    \"attributes\": \n        {\n        \t\"idCart\": \"{{guest_cart_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"firstName\": \"Spencor\",\n                \"lastName\": \"Hopkin\",\n                \"address1\": \"Julie-Wolfthorn-Straße\",\n                \"address2\": \"1\",\n                \"address3\": null,\n                \"zipCode\": \"10115\",\n                \"city\": \"Berlin\",\n                \"country\": {\n                    \"id_country\": 60,\n                    \"iso2_code\": \"DE\",\n                    \"iso3_code\": \"DEU\",\n                    \"name\": \"Germany\",\n                    \"postal_code_mandatory\": true,\n                    \"postal_code_regex\": \"\\\\d{5}\",\n                    \"regions\": {}\n                },\n                \"iso2Code\": \"DE\",\n                \"company\": \"spryker\",\n                \"phone\": \"+49 (30) 2084 98350\",\n                \"isDefaultShipping\": null,\n                \"isDefaultBilling\": null\n            },\n\t\t\t\"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"firstName\": \"Spencor\",\n                \"lastName\": \"Hopkin\",\n                \"address1\": \"Julie-Wolfthorn-Straße\",\n                \"address2\": \"1\",\n                \"address3\": null,\n                \"zipCode\": \"10115\",\n                \"city\": \"Berlin\",\n                \"country\": {\n                    \"id_country\": 60,\n                    \"iso2_code\": \"DE\",\n                    \"iso3_code\": \"DEU\",\n                    \"name\": \"Germany\",\n                    \"postal_code_mandatory\": true,\n                    \"postal_code_regex\": \"\\\\d{5}\",\n                    \"regions\": {}\n                },\n                \"iso2Code\": \"DE\",\n                \"company\": \"spryker\",\n                \"phone\": \"+49 (30) 2084 98350\",\n                \"isDefaultShipping\": null,\n                \"isDefaultBilling\": null\n            },\n            \"payments\": []\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/checkout-data",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "[UPD test] Empty request  without payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64c49f5b-14a9-488e-abec-218f67edee43",
										"exec": [
											"var responseData = pm.response.json().data;",
											"",
											"pm.test(\"Has correct address attributes\", function() {",
											"    pm.expect(responseData.attributes.addresses).to.be.empty;",
											"});",
											"",
											"pm.test(\"Has correct payment attributes\", function() {",
											"    var paymentMethods = responseData.attributes.paymentProviders[0].paymentMethods;",
											"    pm.expect(paymentMethods[1].paymentMethodName).to.be.eql(\"invoice\");",
											"    pm.expect(paymentMethods[1].requiredRequestData).to.have.all.members([",
											"        \"paymentMethod\",",
											"        \"paymentProvider\",",
											"        \"dummyPaymentInvoice.dateOfBirth\"",
											"        ]);",
											"    pm.expect(paymentMethods[0].paymentMethodName).to.be.eql(\"credit card\");",
											"    pm.expect(paymentMethods[0].requiredRequestData).to.have.all.members([",
											"        \"paymentMethod\",",
											"        \"paymentProvider\",",
											"        \"dummyPaymentCreditCard.cardType\",",
											"        \"dummyPaymentCreditCard.cardNumber\",",
											"        \"dummyPaymentCreditCard.nameOnCard\",",
											"        \"dummyPaymentCreditCard.cardExpiresMonth\",",
											"        \"dummyPaymentCreditCard.cardExpiresYear\",",
											"        \"dummyPaymentCreditCard.cardSecurityCode\"",
											"        ]);",
											"});",
											"",
											"pm.test(\"Has correct shipment attributes\", function() {",
											"    var shipmentMethods = responseData.attributes.shipmentMethods;",
											"    var shipmentData = JSON.parse(pm.variables.get(\"shipmentData\"));",
											"    ",
											"    var found = false;",
											"    for (var index in shipmentMethods) {",
											"        for (var testDataIndex in shipmentData) {",
											"            if (testDataIndex == shipmentMethods[index].id) {",
											"                pm.expect(shipmentMethods[index].carrierName).to.be.eql(shipmentData[testDataIndex].carrierName);",
											"                pm.expect(shipmentMethods[index].id).to.be.eql(shipmentData[testDataIndex].id);",
											"                pm.expect(shipmentMethods[index].name).to.be.eql(shipmentData[testDataIndex].name);",
											"                pm.expect(shipmentMethods[index].price).to.be.eql(shipmentData[testDataIndex].price);",
											"                pm.expect(shipmentMethods[index].taxRate).to.be.eql(shipmentData[testDataIndex].taxRate);",
											"                pm.expect(shipmentMethods[index].deliveryTime).to.be.eql(shipmentData[testDataIndex].shipmentDeliveryTime);",
											"                ",
											"                found = true;",
											"            }",
											"        }",
											"    }",
											"    pm.expect(found).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"value": "{{unique_anonymous_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\": \n    {\"type\": \"checkout-data\", \n    \"attributes\": \n        {\n        \t\"idCart\": \"{{guest_cart_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"firstName\": \"Spencor\",\n                \"lastName\": \"Hopkin\",\n                \"address1\": \"Julie-Wolfthorn-Straße\",\n                \"address2\": \"1\",\n                \"address3\": null,\n                \"zipCode\": \"10115\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"spryker\",\n                \"phone\": \"+49 (30) 2084 98350\",\n                \"isDefaultShipping\": null,\n                \"isDefaultBilling\": null\n            },\n\t\t\t\"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"firstName\": \"Spencor\",\n                \"lastName\": \"Hopkin\",\n                \"address1\": \"Julie-Wolfthorn-Straße\",\n                \"address2\": \"1\",\n                \"address3\": null,\n                \"zipCode\": \"10115\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"spryker\",\n                \"phone\": \"+49 (30) 2084 98350\",\n                \"isDefaultShipping\": null,\n                \"isDefaultBilling\": null\n            },\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/checkout-data",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "[UPD test] Request empty addresses only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64c49f5b-14a9-488e-abec-218f67edee43",
										"exec": [
											"var responseData = pm.response.json().data;",
											"",
											"pm.test(\"Has correct address attributes\", function() {",
											"    pm.expect(responseData.attributes.addresses).to.be.empty;",
											"});",
											"",
											"pm.test(\"Has correct payment attributes\", function() {",
											"    var paymentMethods = responseData.attributes.paymentProviders[0].paymentMethods;",
											"    pm.expect(paymentMethods[1].paymentMethodName).to.be.eql(\"invoice\");",
											"    pm.expect(paymentMethods[1].requiredRequestData).to.have.all.members([",
											"        \"paymentMethod\",",
											"        \"paymentProvider\",",
											"        \"dummyPaymentInvoice.dateOfBirth\"",
											"        ]);",
											"    pm.expect(paymentMethods[0].paymentMethodName).to.be.eql(\"credit card\");",
											"    pm.expect(paymentMethods[0].requiredRequestData).to.have.all.members([",
											"        \"paymentMethod\",",
											"        \"paymentProvider\",",
											"        \"dummyPaymentCreditCard.cardType\",",
											"        \"dummyPaymentCreditCard.cardNumber\",",
											"        \"dummyPaymentCreditCard.nameOnCard\",",
											"        \"dummyPaymentCreditCard.cardExpiresMonth\",",
											"        \"dummyPaymentCreditCard.cardExpiresYear\",",
											"        \"dummyPaymentCreditCard.cardSecurityCode\"",
											"        ]);",
											"});",
											"",
											"pm.test(\"Has correct shipment attributes\", function() {",
											"    var shipmentMethods = responseData.attributes.shipmentMethods;",
											"    var shipmentData = JSON.parse(pm.variables.get(\"shipmentData\"));",
											"    ",
											"    var found = false;",
											"    for (var index in shipmentMethods) {",
											"        for (var testDataIndex in shipmentData) {",
											"            if (testDataIndex == shipmentMethods[index].id) {",
											"                pm.expect(shipmentMethods[index].carrierName).to.be.eql(shipmentData[testDataIndex].carrierName);",
											"                pm.expect(shipmentMethods[index].id).to.be.eql(shipmentData[testDataIndex].id);",
											"                pm.expect(shipmentMethods[index].name).to.be.eql(shipmentData[testDataIndex].name);",
											"                pm.expect(shipmentMethods[index].price).to.be.eql(shipmentData[testDataIndex].price);",
											"                pm.expect(shipmentMethods[index].taxRate).to.be.eql(shipmentData[testDataIndex].taxRate);",
											"                pm.expect(shipmentMethods[index].deliveryTime).to.be.eql(shipmentData[testDataIndex].shipmentDeliveryTime);",
											"                ",
											"                found = true;",
											"            }",
											"        }",
											"    }",
											"    pm.expect(found).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"value": "{{unique_anonymous_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\": \n    {\"type\": \"checkout-data\", \n    \"attributes\": \n        {\n        \t\"idCart\": \"{{guest_cart_uuid}}\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/checkout-data",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "[UPD test] 1.0.2 Request for guest checkout-data with customer, addresses and cart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f2d3e4dd-c73d-467a-a4f1-00bed7976f76",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c90113eb-295a-47a2-827a-9ec6d9015650",
										"exec": [
											"var responseData = pm.response.json().data;",
											"",
											"pm.test(\"Has correct address attributes\", function() {",
											"    pm.expect(responseData.attributes.addresses).to.be.empty;",
											"});",
											"",
											"pm.test(\"Has correct payment attributes\", function() {",
											"    var paymentMethods = responseData.attributes.paymentProviders[0].paymentMethods;",
											"    pm.expect(paymentMethods[1].paymentMethodName).to.be.eql(\"invoice\");",
											"    pm.expect(paymentMethods[1].requiredRequestData).to.have.all.members([",
											"        \"paymentMethod\",",
											"        \"paymentProvider\",",
											"        \"dummyPaymentInvoice.dateOfBirth\"",
											"        ]);",
											"    pm.expect(paymentMethods[0].paymentMethodName).to.be.eql(\"credit card\");",
											"    pm.expect(paymentMethods[0].requiredRequestData).to.have.all.members([",
											"        \"paymentMethod\",",
											"        \"paymentProvider\",",
											"        \"dummyPaymentCreditCard.cardType\",",
											"        \"dummyPaymentCreditCard.cardNumber\",",
											"        \"dummyPaymentCreditCard.nameOnCard\",",
											"        \"dummyPaymentCreditCard.cardExpiresMonth\",",
											"        \"dummyPaymentCreditCard.cardExpiresYear\",",
											"        \"dummyPaymentCreditCard.cardSecurityCode\"",
											"        ]);",
											"});",
											"",
											"pm.test(\"Has correct shipment attributes\", function() {",
											"    var shipmentMethods = responseData.attributes.shipmentMethods;",
											"    var shipmentData = JSON.parse(pm.variables.get(\"shipmentData\"));",
											"    ",
											"    var found = false;",
											"    for (var index in shipmentMethods) {",
											"        for (var testDataIndex in shipmentData) {",
											"            if (testDataIndex == shipmentMethods[index].id) {",
											"                pm.expect(shipmentMethods[index].carrierName).to.be.eql(shipmentData[testDataIndex].carrierName);",
											"                pm.expect(shipmentMethods[index].id).to.be.eql(shipmentData[testDataIndex].id);",
											"                pm.expect(shipmentMethods[index].name).to.be.eql(shipmentData[testDataIndex].name);",
											"                pm.expect(shipmentMethods[index].price).to.be.eql(shipmentData[testDataIndex].price);",
											"                pm.expect(shipmentMethods[index].taxRate).to.be.eql(shipmentData[testDataIndex].taxRate);",
											"                pm.expect(shipmentMethods[index].deliveryTime).to.be.eql(shipmentData[testDataIndex].shipmentDeliveryTime);",
											"                ",
											"                found = true;",
											"            }",
											"        }",
											"    }",
											"    pm.expect(found).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"type": "text",
										"value": "{{unique_anonymous_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":\n    {\"type\": \"checkout-data\", \"attributes\":\n        {\n        \t\"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"geust@test.com\",\n                \"firstName\": \"guestName\",\n                \"lastName\": \"gusetLast\"\n            },\n            \n            \"idCart\": \"{{guest_cart_uuid}}\",\n            \n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"geust@test.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"geust@test.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            }\n        }\n    }\n}\n"
								},
								"url": {
									"raw": "{{url}}/checkout-data",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "[UPD test] 1.0.3 Request for checkout-data with full body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f2d3e4dd-c73d-467a-a4f1-00bed7976f76",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c90113eb-295a-47a2-827a-9ec6d9015650",
										"exec": [
											"var responseData = pm.response.json().data;",
											"",
											"pm.test(\"Has correct address attributes\", function() {",
											"    pm.expect(responseData.attributes.addresses).to.be.empty;",
											"});",
											"",
											"pm.test(\"Has correct payment attributes\", function() {",
											"    var paymentMethods = responseData.attributes.paymentProviders[0].paymentMethods;",
											"    pm.expect(paymentMethods[1].paymentMethodName).to.be.eql(\"invoice\");",
											"    pm.expect(paymentMethods[1].requiredRequestData).to.have.all.members([",
											"        \"paymentMethod\",",
											"        \"paymentProvider\",",
											"        \"dummyPaymentInvoice.dateOfBirth\"",
											"        ]);",
											"    pm.expect(paymentMethods[0].paymentMethodName).to.be.eql(\"credit card\");",
											"    pm.expect(paymentMethods[0].requiredRequestData).to.have.all.members([",
											"        \"paymentMethod\",",
											"        \"paymentProvider\",",
											"        \"dummyPaymentCreditCard.cardType\",",
											"        \"dummyPaymentCreditCard.cardNumber\",",
											"        \"dummyPaymentCreditCard.nameOnCard\",",
											"        \"dummyPaymentCreditCard.cardExpiresMonth\",",
											"        \"dummyPaymentCreditCard.cardExpiresYear\",",
											"        \"dummyPaymentCreditCard.cardSecurityCode\"",
											"        ]);",
											"});",
											"",
											"pm.test(\"Has correct shipment attributes\", function() {",
											"    var shipmentMethods = responseData.attributes.shipmentMethods;",
											"    var shipmentData = JSON.parse(pm.variables.get(\"shipmentData\"));",
											"    ",
											"    var found = false;",
											"    for (var index in shipmentMethods) {",
											"        for (var testDataIndex in shipmentData) {",
											"            if (testDataIndex == shipmentMethods[index].id) {",
											"                pm.expect(shipmentMethods[index].carrierName).to.be.eql(shipmentData[testDataIndex].carrierName);",
											"                pm.expect(shipmentMethods[index].id).to.be.eql(shipmentData[testDataIndex].id);",
											"                pm.expect(shipmentMethods[index].name).to.be.eql(shipmentData[testDataIndex].name);",
											"                pm.expect(shipmentMethods[index].price).to.be.eql(shipmentData[testDataIndex].price);",
											"                pm.expect(shipmentMethods[index].taxRate).to.be.eql(shipmentData[testDataIndex].taxRate);",
											"                pm.expect(shipmentMethods[index].deliveryTime).to.be.eql(shipmentData[testDataIndex].shipmentDeliveryTime);",
											"                ",
											"                found = true;",
											"            }",
											"        }",
											"    }",
											"    pm.expect(found).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"value": "{{unique_anonymous_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":\n    {\"type\": \"checkout-data\", \"attributes\":\n        {\n        \t\"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"geust@test.com\",\n                \"firstName\": \"guestName\",\n                \"lastName\": \"gusetLast\"\n            },\n            \n            \"idCart\": \"{{guest_cart_uuid}}\",\n            \n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \n             \"payments\": [\n                {\n                    \"paymentProviderName\": \"DummyPayment\",\n                    \"paymentMethodName\": \"invoice\"\n                  \n                }\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            }\n            \n        }\n    }\n}\n"
								},
								"url": {
									"raw": "{{url}}/checkout-data",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout-data"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "99a15383-728e-482c-8db2-a0506a35ac17",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "197b4cea-eaaf-4ab7-a1de-0c69f96e720f",
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code !== 500) {",
									"    var responseData = pm.response.json().data;",
									"",
									"    pm.test(\"Response should have a `200` status code\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    pm.test(\"Response is json\", function () {",
									"        pm.response.to.have.jsonBody(); ",
									"    });",
									"    ",
									"    pm.test(\"Response should be successful response\", function () {",
									"        pm.response.to.not.be.error;",
									"    });",
									"    ",
									"    pm.test(\"Response should have a `checkout-data` type\", function () {",
									"        pm.expect(responseData.type).to.equal(\"checkout-data\");",
									"    });",
									"    ",
									"    pm.test(\"Response should not have a resource id\", function () {",
									"        pm.expect(responseData.id).to.be.null;",
									"    });",
									"    ",
									"    pm.test(\"Response should have proper attributes\", function () {",
									"        pm.expect(responseData).to.have.keys(",
									"            \"type\",",
									"            \"id\",",
									"            \"attributes\",",
									"            \"links\"",
									"        );",
									"        pm.expect(responseData.attributes).to.have.all.keys(",
									"            \"addresses\",",
									"            \"paymentProviders\",",
									"            \"shipmentMethods\"",
									"        );",
									"    });",
									"    ",
									"    pm.test(\"Has self link\", function() {",
									"        pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/checkout-data\");",
									"    });",
									"}"
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative cases",
					"item": [
						{
							"name": "1.0.4 Negative. Request for checkout-data with broken URL ",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f2d3e4dd-c73d-467a-a4f1-00bed7976f76",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c90113eb-295a-47a2-827a-9ec6d9015650",
										"exec": [
											"var data = pm.response.json();",
											"pm.test(\"Response should have a `404` status code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response should be an error response\", function () {",
											"    pm.response.to.be.error;",
											"});",
											"",
											"pm.test(\"Response should have an `errors` object\", function () {",
											"    pm.response.to.be.json;",
											"    pm.expect(data).to.have.property(\"errors\");",
											"});",
											"",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"status\");",
											"    pm.expect(data.errors[0].status).to.equal(404);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
											"    pm.expect(data.errors[0].detail).to.equal(\"Not Found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"value": "{{unique_anonymous_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"checkout-data\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"idCart\": \"{{cart_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/checkoutdata",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkoutdata"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.5 Negative. Request for checkout-data with wrong type in body ",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f2d3e4dd-c73d-467a-a4f1-00bed7976f76",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c90113eb-295a-47a2-827a-9ec6d9015650",
										"exec": [
											"var data = pm.response.json();",
											"pm.test(\"Response should have a `400` status code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response should be an error response\", function () {",
											"    pm.response.to.be.error;",
											"});",
											"",
											"pm.test(\"Response should have an `errors` object\", function () {",
											"    pm.response.to.be.json;",
											"    pm.expect(data).to.have.property(\"errors\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"status\");",
											"    pm.expect(data.errors[0].status).to.equal(400);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
											"    pm.expect(data.errors[0].detail).to.equal(\"Invalid type.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"value": "{{unique_anonymous_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"blabla-data\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"idCart\": \"{{cart_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/checkout-data",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.6 Negative. Request for checkout-data with empty body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f2d3e4dd-c73d-467a-a4f1-00bed7976f76",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c90113eb-295a-47a2-827a-9ec6d9015650",
										"exec": [
											"var data = pm.response.json();",
											"pm.test(\"Response should have a `400` status code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response should be an error response\", function () {",
											"    pm.response.to.be.error;",
											"});",
											"",
											"pm.test(\"Response should have an `errors` object\", function () {",
											"    pm.response.to.be.json;",
											"    pm.expect(data).to.have.property(\"errors\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"status\");",
											"    pm.expect(data.errors[0].status).to.equal(400);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
											"    pm.expect(data.errors[0].detail).to.equal(\"Post data is invalid.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"type": "text",
										"value": "{{unique_anonymous_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/checkout-data",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.7 Negative Post checkout data without cart UUID ",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
										"exec": [
											"if (pm.response.code == 500) {",
											"    console.log(\"Server error\");",
											"} else {",
											"    var data = pm.response.json();",
											"    pm.test(\"Response should have a `422` status code\", function () {",
											"        pm.response.to.have.status(422);",
											"    });",
											"    ",
											"    pm.test(\"Response should be an error response\", function () {",
											"        pm.response.to.be.error;",
											"    });",
											"    ",
											"    pm.test(\"Response should have an `errors` object\", function () {",
											"        pm.response.to.be.json;",
											"        pm.expect(data).to.have.property(\"errors\");",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"Response should have a correct error status\", function () {",
											"        pm.expect(data.errors[0]).to.have.property(\"status\");",
											"        pm.expect(data.errors[0].status).to.equal(422);",
											"    });",
											"    ",
											"    pm.test(\"Response should have a correct error code\", function () {",
											"        pm.expect(data.errors[0]).to.have.property(\"code\");",
											"        pm.expect(data.errors[0].code).to.equal(\"901\");",
											"    });",
											"    ",
											"    pm.test(\"Response should have a correct error detail\", function () {",
											"        pm.expect(data.errors[0]).to.have.property(\"detail\");",
											"        pm.expect(data.errors[0].detail).to.equal(\"idCart => This field is missing.\");",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9,*;q=0.5"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"value": "{{unique_anonymous_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"checkout-data\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/checkout-data",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.12 Negative Post checkout data with wrong method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
										"exec": [
											"var data = pm.response.json();",
											"pm.test(\"Response should have a `404` status code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response should be an error response\", function () {",
											"    pm.response.to.be.error;",
											"});",
											"",
											"pm.test(\"Response should have an `errors` object\", function () {",
											"    pm.response.to.be.json;",
											"    pm.expect(data).to.have.property(\"errors\");",
											"});",
											"",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"status\");",
											"    pm.expect(data.errors[0].status).to.equal(404);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
											"    pm.expect(data.errors[0].detail).to.equal(\"Not Found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9,*;q=0.5"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"type": "text",
										"value": "{{unique_anonymous_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"checkout-data\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/checkout-data",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.13 Negative Post checkout data with wrong method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
										"exec": [
											"var data = pm.response.json();",
											"pm.test(\"Response should have a `404` status code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response should be an error response\", function () {",
											"    pm.response.to.be.error;",
											"});",
											"",
											"pm.test(\"Response should have an `errors` object\", function () {",
											"    pm.response.to.be.json;",
											"    pm.expect(data).to.have.property(\"errors\");",
											"});",
											"",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"status\");",
											"    pm.expect(data.errors[0].status).to.equal(404);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
											"    pm.expect(data.errors[0].detail).to.equal(\"Not Found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9,*;q=0.5"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"type": "text",
										"value": "{{unique_anonymous_id}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/checkout-data",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.14 Negative Post checkout data with wrong method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
										"exec": [
											"var data = pm.response.json();",
											"pm.test(\"Response should have a `404` status code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response should be an error response\", function () {",
											"    pm.response.to.be.error;",
											"});",
											"",
											"pm.test(\"Response should have an `errors` object\", function () {",
											"    pm.response.to.be.json;",
											"    pm.expect(data).to.have.property(\"errors\");",
											"});",
											"",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"status\");",
											"    pm.expect(data.errors[0].status).to.equal(404);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
											"    pm.expect(data.errors[0].detail).to.equal(\"Not Found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9,*;q=0.5",
										"type": "text"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"value": "{{unique_anonymous_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/checkout-data",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout-data"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7343c4e8-6d49-48b8-84fa-8a8c6c2e7f14",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "042129ee-d3e2-43db-995b-f977cd4a0b2d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Checkout process with logged customer \"Invoice and Cart rule\"",
			"item": [
				{
					"name": "Prepare",
					"item": [
						{
							"name": "3.0.0 Create a customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0276d05-b6e9-4b39-9359-220a64816d55",
										"exec": [
											"if ('errors' in pm.response.json() && pm.response.json().errors[0].code == 400) {",
											"    var email = pm.variables.get(\"email\");",
											"    pm.environment.set(\"email\", new Date().getTime() + email);",
											"    postman.setNextRequest(request.name);",
											"} else {",
											"    pm.test(\"Status code is 201\", function () {",
											"        pm.response.to.have.status(201);",
											"    });",
											"    pm.environment.set(\"customer_reference\", pm.response.json().data.id);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, de;q=0.9, en;q=0.1"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\":{\"type\":\"customers\",\"attributes\":{\"salutation\":\"{{salutation}}\",\"firstName\":\"{{firstName}}\",\"lastName\":\"{{lastName}}\",\"email\":\"{{email}}\",\"password\":\"{{password}}\",\"confirmPassword\":\"{{password}}\",\"acceptedTerms\":true}}}"
								},
								"url": {
									"raw": "{{url}}/customers",
									"host": [
										"{{url}}"
									],
									"path": [
										"customers"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.0.1 Request access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47e120f5-3cb6-4a40-82a7-3e9a9ff7ed30",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"token\", jsonData.data.attributes.accessToken);",
											"pm.environment.set(\"refresh_token\", jsonData.data.attributes.refreshToken);",
											"",
											"pm.test(\"Has correct type and self links returned\", function () {",
											"    pm.expect(jsonData.data.type).to.eql(\"access-tokens\"); ",
											"    pm.expect(jsonData.data.links.self).to.eql(pm.variables.get(\"url\") + \"/access-tokens\" ); ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\": {\n\t\t\"type\":\"access-tokens\",\n\t\t\"attributes\":{\n\t\t\t\"username\":\"{{email}}\",\n\t\t\t\"password\": \"{{password}}\"\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "{{url}}/access-tokens",
									"host": [
										"{{url}}"
									],
									"path": [
										"access-tokens"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Execute",
					"item": [
						{
							"name": "Step#1",
							"item": [
								{
									"name": "3.1.0 Get authorized customer's cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57faca8f-f7df-49cc-9ae4-607c1b136cca",
												"exec": [
													"var data = pm.response.json();",
													"pm.environment.set(\"cart_uuid\", data.data[0].id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "de-DE, en;q=0.9"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/carts",
											"host": [
												"{{url}}"
											],
											"path": [
												"carts"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.1 Post checkout for quote without items",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
												"exec": [
													"var data = pm.response.json();",
													"pm.test(\"Response should have a `422` status code\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response should be an error response\", function () {",
													"    pm.response.to.be.error;",
													"});",
													"",
													"pm.test(\"Response should have an `errors` object\", function () {",
													"    pm.response.to.be.json;",
													"    pm.expect(data).to.have.property(\"errors\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"code\");",
													"    pm.expect(data.errors[0].code).to.equal(\"1104\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"status\");",
													"    pm.expect(data.errors[0].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
													"    pm.expect(data.errors[0].detail).to.equal(\"Cart is empty.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Accept-Language",
												"value": "de-DE, en;q=0.9,*;q=0.5"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"data\":\n    {\"type\": \"checkout\", \"attributes\":\n        {\n        \t\"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \n            \"idCart\": \"{{cart_uuid}}\",\n            \n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \n             \"payments\": [\n                {\n                    \"dummyPaymentInvoice\": {\n                        \"dateOfBirth\": \"08.04.1986\"\n                    },\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\",\n                    \"paymentSelection\": \"dummyPaymentInvoice\",\n                    \"amount\": \"899910\"\n                }\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 1,\n                \"method\": {\n                    \"carrierName\": \"Spryker Dummy Shipment\",\n                    \"id\": 1,\n                    \"name\": \"Standard\",\n                    \"price\": 490,\n                    \"taxRate\": null,\n                    \"shipmentDeliveryTime\": null\n                }\n            }\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "{{url}}/checkout",
											"host": [
												"{{url}}"
											],
											"path": [
												"checkout"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.2 Add an item to customer's cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Accept-Language",
												"value": "de-DE, en;q=0.9,*;q=0.5"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"sku\": \"{{cart_rule_product_sku}}\",\n            \"quantity\": 2\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{url}}/carts/{{cart_uuid}}/items",
											"host": [
												"{{url}}"
											],
											"path": [
												"carts",
												"{{cart_uuid}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.3 Post checkout for quote with item",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
												"exec": [
													"// TODO Find a way to set to some product available quantity equal to 1 in order to run this scenarios",
													"",
													"",
													"",
													"var data = pm.response.json();",
													"pm.test(\"Response should have a `201` status code\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response should be successful response\", function () {",
													"    pm.response.to.not.be.error;",
													"});",
													"",
													"pm.test(\"Response should have a valid structure\", function () {",
													"    pm.expect(data).to.have.all.keys(\"data\", \"included\");",
													"    pm.expect(data.data).to.have.all.keys(\"type\", \"id\", \"attributes\", \"links\", \"relationships\");",
													"});",
													"",
													"pm.test(\"Response should have a `checkout` type\", function () {",
													"    pm.expect(data.data.type).to.equal(\"checkout\");",
													"});",
													"",
													"pm.test(\"Response should not have a resource id\", function () {",
													"    pm.expect(data.data.id).to.be.null;",
													"});",
													"",
													"pm.test(\"Response should have an order reference\", function () {",
													"    pm.expect(data.data.attributes).to.have.property(\"orderReference\");",
													"    pm.expect(data.data.attributes.orderReference).to.not.be.empty;",
													"});",
													"",
													"pm.test(\"Order reference in resource attributes should be equal to related order\", function () {",
													"    pm.expect(data).to.have.nested.property(\"data.relationships.orders.data[0].id\");",
													"    pm.expect(data.data.attributes.orderReference).to.equal(data.data.relationships.orders.data[0].id);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Accept-Language",
												"value": "de-DE, en;q=0.9,*;q=0.5"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"data\":\n    {\"type\": \"checkout\", \"attributes\":\n        {\n        \t\"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \n            \"idCart\": \"{{cart_uuid}}\",\n            \n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \n             \"payments\": [\n                {\n                    \n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\"\n                }\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            }\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "{{url}}/checkout",
											"host": [
												"{{url}}"
											],
											"path": [
												"checkout"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Step#2",
							"item": [
								{
									"name": "3.1.4 Get authorized customer's cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57faca8f-f7df-49cc-9ae4-607c1b136cca",
												"exec": [
													"var data = pm.response.json();",
													"pm.environment.set(\"cart_uuid\", data.data[0].id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "de-DE, en;q=0.9"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/carts",
											"host": [
												"{{url}}"
											],
											"path": [
												"carts"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.5 Post checkout for quote without items",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
												"exec": [
													"var data = pm.response.json();",
													"pm.test(\"Response should have a `422` status code\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response should be an error response\", function () {",
													"    pm.response.to.be.error;",
													"});",
													"",
													"pm.test(\"Response should have an `errors` object\", function () {",
													"    pm.response.to.be.json;",
													"    pm.expect(data).to.have.property(\"errors\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"code\");",
													"    pm.expect(data.errors[0].code).to.equal(\"1104\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"status\");",
													"    pm.expect(data.errors[0].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
													"    pm.expect(data.errors[0].detail).to.equal(\"Cart is empty.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Accept-Language",
												"value": "de-DE, en;q=0.9,*;q=0.5"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"data\":\n    {\"type\": \"checkout\", \"attributes\":\n        {\n        \t\"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \n            \"idCart\": \"{{cart_uuid}}\",\n            \n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \n             \"payments\": [\n                {\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\"\n                }\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n                }\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "{{url}}/checkout",
											"host": [
												"{{url}}"
											],
											"path": [
												"checkout"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.2 Add an item to customer's cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
												"exec": [
													"postman.setNextRequest(\"3.1.10 Post checkout data with invalid cart UUID or other customer\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Accept-Language",
												"value": "de-DE, en;q=0.9,*;q=0.5"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"sku\": \"{{cart_rule_product_sku}}\",\n            \"quantity\": 2\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{url}}/carts/{{cart_uuid}}/items",
											"host": [
												"{{url}}"
											],
											"path": [
												"carts",
												"{{cart_uuid}}",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "[skip] 3.1.6 Post checkout data with invalid shipping method",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
												"exec": [
													"var data = pm.response.json();",
													"pm.test(\"Response should have a `422` status code\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response should be an error response\", function () {",
													"    pm.response.to.be.error;",
													"});",
													"",
													"pm.test(\"Response should have an `errors` object\", function () {",
													"    pm.response.to.be.json;",
													"    pm.expect(data).to.have.property(\"errors\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"code\");",
													"    pm.expect(data.errors[0].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"status\");",
													"    pm.expect(data.errors[0].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
													"    pm.expect(data.errors[0].detail).to.equal(\"shipment.shipmentSelection => This field is missing.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Accept-Language",
												"value": "de-DE, en;q=0.9,*;q=0.5"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"idCart\": \"{{cart_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"payments\": [\n                {\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\"\n                }\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 10\n            }\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{url}}/checkout",
											"host": [
												"{{url}}"
											],
											"path": [
												"checkout"
											]
										}
									},
									"response": []
								},
								{
									"name": "[skip] 3.1.7 Post checkout data with invalid ISO code in shipmentAddress",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
												"exec": [
													"var data = pm.response.json();",
													"pm.test(\"Response should have a `422` status code\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response should be an error response\", function () {",
													"    pm.response.to.be.error;",
													"});",
													"",
													"pm.test(\"Response should have an `errors` object\", function () {",
													"    pm.response.to.be.json;",
													"    pm.expect(data).to.have.property(\"errors\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"code\");",
													"    pm.expect(data.errors[0].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"status\");",
													"    pm.expect(data.errors[0].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
													"    pm.expect(data.errors[0].detail).to.equal(\"shippingAddress.iso2Code => The value you selected is not a valid choice.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Accept-Language",
												"value": "de-DE, en;q=0.9,*;q=0.5"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"idCart\": \"{{cart_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": 0,\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DR\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"payments\": [\n                {\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\"\n                }\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            }\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{url}}/checkout",
											"host": [
												"{{url}}"
											],
											"path": [
												"checkout"
											]
										}
									},
									"response": []
								},
								{
									"name": "[skip] 3.1.8 Post checkout data with invalid ISO code in billingAddress",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "815471f2-32c5-4f25-aec8-30f543e890af",
												"exec": [
													"var data = pm.response.json();",
													"pm.test(\"Response should have a `422` status code\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response should be an error response\", function () {",
													"    pm.response.to.be.error;",
													"});",
													"",
													"pm.test(\"Response should have an `errors` object\", function () {",
													"    pm.response.to.be.json;",
													"    pm.expect(data).to.have.property(\"errors\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"code\");",
													"    pm.expect(data.errors[0].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"status\");",
													"    pm.expect(data.errors[0].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
													"    pm.expect(data.errors[0].detail).to.equal(\"billingAddress.iso2Code => The value you selected is not a valid choice.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Accept-Language",
												"value": "de-DE, en;q=0.9,*;q=0.5"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"idCart\": \"{{cart_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": 0,\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DR\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": 0,\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DR\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"payments\": [\n                {\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\"\n                }\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            }\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{url}}/checkout",
											"host": [
												"{{url}}"
											],
											"path": [
												"checkout"
											]
										}
									},
									"response": []
								},
								{
									"name": "[skip] 3.1.9 Post checkout data with invalid salutation in customer data",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
												"exec": [
													"var data = pm.response.json();",
													"pm.test(\"Response should have a `422` status code\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response should be an error response\", function () {",
													"    pm.response.to.be.error;",
													"});",
													"",
													"pm.test(\"Response should have an `errors` object\", function () {",
													"    pm.response.to.be.json;",
													"    pm.expect(data).to.have.property(\"errors\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"code\");",
													"    pm.expect(data.errors[0].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"status\");",
													"    pm.expect(data.errors[0].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
													"    pm.expect(data.errors[0].detail).to.equal(\"customer.salutation => The value you selected is not a valid choice.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Accept-Language",
												"value": "de-DE, en;q=0.9,*;q=0.5"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"bla-bla\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"idCart\": \"{{cart_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"payments\": [\n                {\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\"\n                }\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            }\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{url}}/checkout",
											"host": [
												"{{url}}"
											],
											"path": [
												"checkout"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.10 Post checkout data with invalid cart UUID or other customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
												"exec": [
													"var data = pm.response.json();",
													"pm.test(\"Response should have a `422` status code\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response should be an error response\", function () {",
													"    pm.response.to.be.error;",
													"});",
													"",
													"pm.test(\"Response should have an `errors` object\", function () {",
													"    pm.response.to.be.json;",
													"    pm.expect(data).to.have.property(\"errors\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"code\");",
													"    pm.expect(data.errors[0].code).to.equal(\"1103\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"status\");",
													"    pm.expect(data.errors[0].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
													"    pm.expect(data.errors[0].detail).to.equal(\"Cart not found.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Accept-Language",
												"value": "de-DE, en;q=0.9,*;q=0.5"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"idCart\": \"wrong uuid or uuid from other customer\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"payments\": [\n                {\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\"\n                }\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            }\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{url}}/checkout",
											"host": [
												"{{url}}"
											],
											"path": [
												"checkout"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.11  Post checkout data with empty customer data",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
												"exec": [
													"var data = pm.response.json();",
													"pm.test(\"Response should have a `422` status code\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response should be an error response\", function () {",
													"    pm.response.to.be.error;",
													"});",
													"",
													"pm.test(\"Response should have an `errors` object\", function () {",
													"    pm.response.to.be.json;",
													"    pm.expect(data).to.have.property(\"errors\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"code\");",
													"    pm.expect(data.errors[0].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"status\");",
													"    pm.expect(data.errors[0].status).to.equal(422);",
													"});",
													"",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
													"    pm.expect(data.errors[0].detail).to.equal(\"customer.salutation => This field is missing.\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"    pm.expect(data.errors[1]).to.have.property(\"code\");",
													"    pm.expect(data.errors[1].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"    pm.expect(data.errors[1]).to.have.property(\"status\");",
													"    pm.expect(data.errors[1].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"    pm.expect(data.errors[1]).to.have.property(\"detail\");",
													"    pm.expect(data.errors[1].detail).to.equal(\"customer.email => This field is missing.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Accept-Language",
												"value": "de-DE, en;q=0.9,*;q=0.5"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {},\n            \"idCart\": \"{{cart_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"payments\": [\n                {\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\"\n                }\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            }\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{url}}/checkout",
											"host": [
												"{{url}}"
											],
											"path": [
												"checkout"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.12 Post checkout data with empty cart data",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
												"exec": [
													"var data = pm.response.json();",
													"pm.test(\"Response should have a `422` status code\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response should be an error response\", function () {",
													"    pm.response.to.be.error;",
													"});",
													"",
													"pm.test(\"Response should have an `errors` object\", function () {",
													"    pm.response.to.be.json;",
													"    pm.expect(data).to.have.property(\"errors\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"code\");",
													"    pm.expect(data.errors[0].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"status\");",
													"    pm.expect(data.errors[0].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
													"    pm.expect(data.errors[0].detail).to.equal(\"idCart => This value should not be blank.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Accept-Language",
												"value": "de-DE, en;q=0.9,*;q=0.5"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"idCart\": \"\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"payments\": [\n                {\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\"\n                }\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            }\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{url}}/checkout",
											"host": [
												"{{url}}"
											],
											"path": [
												"checkout"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.13 Post checkout data with empty addresses",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
												"exec": [
													"//update tests according to validation concept",
													"",
													"var data = pm.response.json();",
													"pm.test(\"Response should have a `422` status code\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response should be an error response\", function () {",
													"    pm.response.to.be.error;",
													"});",
													"",
													"pm.test(\"Response should have an `errors` object\", function () {",
													"    pm.response.to.be.json;",
													"    pm.expect(data).to.have.property(\"errors\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"code\");",
													"    pm.expect(data.errors[0].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"status\");",
													"    pm.expect(data.errors[0].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
													"    pm.expect(data.errors[0].detail).to.equal(\"billingAddress.salutation => This field is missing.\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"    pm.expect(data.errors[1]).to.have.property(\"code\");",
													"    pm.expect(data.errors[1].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"    pm.expect(data.errors[1]).to.have.property(\"status\");",
													"    pm.expect(data.errors[1].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"    pm.expect(data.errors[1]).to.have.property(\"detail\");",
													"    pm.expect(data.errors[1].detail).to.equal(\"billingAddress.firstName => This field is missing.\");",
													"});",
													"",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"pm.expect(data.errors[2]).to.have.property(\"code\");",
													"pm.expect(data.errors[2].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"pm.expect(data.errors[2]).to.have.property(\"status\");",
													"pm.expect(data.errors[2].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"pm.expect(data.errors[2]).to.have.property(\"detail\");",
													"pm.expect(data.errors[2].detail).to.equal(\"billingAddress.lastName => This field is missing.\");",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"pm.expect(data.errors[3]).to.have.property(\"code\");",
													"pm.expect(data.errors[3].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"pm.expect(data.errors[3]).to.have.property(\"status\");",
													"pm.expect(data.errors[3].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"pm.expect(data.errors[3]).to.have.property(\"detail\");",
													"pm.expect(data.errors[3].detail).to.equal(\"billingAddress.address1 => This field is missing.\");",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"pm.expect(data.errors[4]).to.have.property(\"code\");",
													"pm.expect(data.errors[4].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"pm.expect(data.errors[4]).to.have.property(\"status\");",
													"pm.expect(data.errors[4].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"pm.expect(data.errors[4]).to.have.property(\"detail\");",
													"pm.expect(data.errors[4].detail).to.equal(\"billingAddress.address2 => This field is missing.\");",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"pm.expect(data.errors[5]).to.have.property(\"code\");",
													"pm.expect(data.errors[5].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"pm.expect(data.errors[5]).to.have.property(\"status\");",
													"pm.expect(data.errors[5].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"pm.expect(data.errors[5]).to.have.property(\"detail\");",
													"pm.expect(data.errors[5].detail).to.equal(\"billingAddress.zipCode => This field is missing.\");",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"pm.expect(data.errors[6]).to.have.property(\"code\");",
													"pm.expect(data.errors[6].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"pm.expect(data.errors[6]).to.have.property(\"status\");",
													"pm.expect(data.errors[6].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"pm.expect(data.errors[6]).to.have.property(\"detail\");",
													"pm.expect(data.errors[6].detail).to.equal(\"billingAddress.city => This field is missing.\");",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"pm.expect(data.errors[7]).to.have.property(\"code\");",
													"pm.expect(data.errors[7].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"pm.expect(data.errors[7]).to.have.property(\"status\");",
													"pm.expect(data.errors[7].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"pm.expect(data.errors[7]).to.have.property(\"detail\");",
													"pm.expect(data.errors[7].detail).to.equal(\"billingAddress.iso2Code => This field is missing.\");",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"pm.expect(data.errors[8]).to.have.property(\"code\");",
													"pm.expect(data.errors[8].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"pm.expect(data.errors[8]).to.have.property(\"status\");",
													"pm.expect(data.errors[8].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"pm.expect(data.errors[8]).to.have.property(\"detail\");",
													"pm.expect(data.errors[8].detail).to.equal(\"shippingAddress.salutation => This field is missing.\");",
													"});",
													"",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"pm.expect(data.errors[9]).to.have.property(\"code\");",
													"pm.expect(data.errors[9].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"pm.expect(data.errors[9]).to.have.property(\"status\");",
													"pm.expect(data.errors[9].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"pm.expect(data.errors[9]).to.have.property(\"detail\");",
													"pm.expect(data.errors[9].detail).to.equal(\"shippingAddress.firstName => This field is missing.\");",
													"});",
													"",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"pm.expect(data.errors[10]).to.have.property(\"code\");",
													"pm.expect(data.errors[10].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"pm.expect(data.errors[10]).to.have.property(\"status\");",
													"pm.expect(data.errors[10].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"pm.expect(data.errors[10]).to.have.property(\"detail\");",
													"pm.expect(data.errors[10].detail).to.equal(\"shippingAddress.lastName => This field is missing.\");",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"pm.expect(data.errors[11]).to.have.property(\"code\");",
													"pm.expect(data.errors[11].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"pm.expect(data.errors[11]).to.have.property(\"status\");",
													"pm.expect(data.errors[11].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"pm.expect(data.errors[11]).to.have.property(\"detail\");",
													"pm.expect(data.errors[11].detail).to.equal(\"shippingAddress.address1 => This field is missing.\");",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"pm.expect(data.errors[12]).to.have.property(\"code\");",
													"pm.expect(data.errors[12].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"pm.expect(data.errors[12]).to.have.property(\"status\");",
													"pm.expect(data.errors[12].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"pm.expect(data.errors[12]).to.have.property(\"detail\");",
													"pm.expect(data.errors[12].detail).to.equal(\"shippingAddress.address2 => This field is missing.\");",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"pm.expect(data.errors[13]).to.have.property(\"code\");",
													"pm.expect(data.errors[13].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"pm.expect(data.errors[13]).to.have.property(\"status\");",
													"pm.expect(data.errors[13].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"pm.expect(data.errors[13]).to.have.property(\"detail\");",
													"pm.expect(data.errors[13].detail).to.equal(\"shippingAddress.zipCode => This field is missing.\");",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"pm.expect(data.errors[14]).to.have.property(\"code\");",
													"pm.expect(data.errors[14].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"pm.expect(data.errors[14]).to.have.property(\"status\");",
													"pm.expect(data.errors[14].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"pm.expect(data.errors[14]).to.have.property(\"detail\");",
													"pm.expect(data.errors[14].detail).to.equal(\"shippingAddress.city => This field is missing.\");",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"pm.expect(data.errors[15]).to.have.property(\"code\");",
													"pm.expect(data.errors[15].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"pm.expect(data.errors[15]).to.have.property(\"status\");",
													"pm.expect(data.errors[15].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"pm.expect(data.errors[15]).to.have.property(\"detail\");",
													"pm.expect(data.errors[15].detail).to.equal(\"shippingAddress.iso2Code => This field is missing.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Accept-Language",
												"value": "de-DE, en;q=0.9,*;q=0.5"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"idCart\": \"{{cart_uuid}}\",\n            \"billingAddress\": {},\n            \"shippingAddress\": {},\n            \"payments\": [\n                {\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\"\n                }\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            }\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{url}}/checkout",
											"host": [
												"{{url}}"
											],
											"path": [
												"checkout"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.14 Post checkout data with empty billing address",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
												"exec": [
													"//update tests according to validation concept",
													"",
													"var data = pm.response.json();",
													"pm.test(\"Response should have a `422` status code\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response should be an error response\", function () {",
													"    pm.response.to.be.error;",
													"});",
													"",
													"pm.test(\"Response should have an `errors` object\", function () {",
													"    pm.response.to.be.json;",
													"    pm.expect(data).to.have.property(\"errors\");",
													"});",
													"",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"code\");",
													"    pm.expect(data.errors[0].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"status\");",
													"    pm.expect(data.errors[0].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
													"    pm.expect(data.errors[0].detail).to.equal(\"billingAddress.salutation => This field is missing.\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"    pm.expect(data.errors[1]).to.have.property(\"code\");",
													"    pm.expect(data.errors[1].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"    pm.expect(data.errors[1]).to.have.property(\"status\");",
													"    pm.expect(data.errors[1].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"    pm.expect(data.errors[1]).to.have.property(\"detail\");",
													"    pm.expect(data.errors[1].detail).to.equal(\"billingAddress.firstName => This field is missing.\");",
													"});",
													"",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"pm.expect(data.errors[2]).to.have.property(\"code\");",
													"pm.expect(data.errors[2].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"pm.expect(data.errors[2]).to.have.property(\"status\");",
													"pm.expect(data.errors[2].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"pm.expect(data.errors[2]).to.have.property(\"detail\");",
													"pm.expect(data.errors[2].detail).to.equal(\"billingAddress.lastName => This field is missing.\");",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"pm.expect(data.errors[3]).to.have.property(\"code\");",
													"pm.expect(data.errors[3].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"pm.expect(data.errors[3]).to.have.property(\"status\");",
													"pm.expect(data.errors[3].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"pm.expect(data.errors[3]).to.have.property(\"detail\");",
													"pm.expect(data.errors[3].detail).to.equal(\"billingAddress.address1 => This field is missing.\");",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"pm.expect(data.errors[4]).to.have.property(\"code\");",
													"pm.expect(data.errors[4].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"pm.expect(data.errors[4]).to.have.property(\"status\");",
													"pm.expect(data.errors[4].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"pm.expect(data.errors[4]).to.have.property(\"detail\");",
													"pm.expect(data.errors[4].detail).to.equal(\"billingAddress.address2 => This field is missing.\");",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"pm.expect(data.errors[5]).to.have.property(\"code\");",
													"pm.expect(data.errors[5].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"pm.expect(data.errors[5]).to.have.property(\"status\");",
													"pm.expect(data.errors[5].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"pm.expect(data.errors[5]).to.have.property(\"detail\");",
													"pm.expect(data.errors[5].detail).to.equal(\"billingAddress.zipCode => This field is missing.\");",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"pm.expect(data.errors[6]).to.have.property(\"code\");",
													"pm.expect(data.errors[6].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"pm.expect(data.errors[6]).to.have.property(\"status\");",
													"pm.expect(data.errors[6].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"pm.expect(data.errors[6]).to.have.property(\"detail\");",
													"pm.expect(data.errors[6].detail).to.equal(\"billingAddress.city => This field is missing.\");",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"pm.expect(data.errors[7]).to.have.property(\"code\");",
													"pm.expect(data.errors[7].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"pm.expect(data.errors[7]).to.have.property(\"status\");",
													"pm.expect(data.errors[7].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"pm.expect(data.errors[7]).to.have.property(\"detail\");",
													"pm.expect(data.errors[7].detail).to.equal(\"billingAddress.iso2Code => This field is missing.\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Accept-Language",
												"value": "de-DE, en;q=0.9,*;q=0.5"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"idCart\": \"{{cart_uuid}}\",\n            \"billingAddress\": {},\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"payments\": [\n                {\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\"\n                }\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            }\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{url}}/checkout",
											"host": [
												"{{url}}"
											],
											"path": [
												"checkout"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.15 Post checkout data with empty shipping address",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
												"exec": [
													"//update tests according to validation concept",
													"",
													"var data = pm.response.json();",
													"pm.test(\"Response should have a `422` status code\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response should be an error response\", function () {",
													"    pm.response.to.be.error;",
													"});",
													"",
													"pm.test(\"Response should have an `errors` object\", function () {",
													"    pm.response.to.be.json;",
													"    pm.expect(data).to.have.property(\"errors\");",
													"});",
													"",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"pm.expect(data.errors[0]).to.have.property(\"code\");",
													"pm.expect(data.errors[0].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"pm.expect(data.errors[0]).to.have.property(\"status\");",
													"pm.expect(data.errors[0].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"pm.expect(data.errors[0]).to.have.property(\"detail\");",
													"pm.expect(data.errors[0].detail).to.equal(\"shippingAddress.salutation => This field is missing.\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"pm.expect(data.errors[1]).to.have.property(\"code\");",
													"pm.expect(data.errors[1].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"pm.expect(data.errors[1]).to.have.property(\"status\");",
													"pm.expect(data.errors[1].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"pm.expect(data.errors[1]).to.have.property(\"detail\");",
													"pm.expect(data.errors[1].detail).to.equal(\"shippingAddress.firstName => This field is missing.\");",
													"});",
													"",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"pm.expect(data.errors[2]).to.have.property(\"code\");",
													"pm.expect(data.errors[2].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"pm.expect(data.errors[2]).to.have.property(\"status\");",
													"pm.expect(data.errors[2].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"pm.expect(data.errors[2]).to.have.property(\"detail\");",
													"pm.expect(data.errors[2].detail).to.equal(\"shippingAddress.lastName => This field is missing.\");",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"pm.expect(data.errors[3]).to.have.property(\"code\");",
													"pm.expect(data.errors[3].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"pm.expect(data.errors[3]).to.have.property(\"status\");",
													"pm.expect(data.errors[3].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"pm.expect(data.errors[3]).to.have.property(\"detail\");",
													"pm.expect(data.errors[3].detail).to.equal(\"shippingAddress.address1 => This field is missing.\");",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"pm.expect(data.errors[4]).to.have.property(\"code\");",
													"pm.expect(data.errors[4].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"pm.expect(data.errors[4]).to.have.property(\"status\");",
													"pm.expect(data.errors[4].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"pm.expect(data.errors[4]).to.have.property(\"detail\");",
													"pm.expect(data.errors[4].detail).to.equal(\"shippingAddress.address2 => This field is missing.\");",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"pm.expect(data.errors[5]).to.have.property(\"code\");",
													"pm.expect(data.errors[5].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"pm.expect(data.errors[5]).to.have.property(\"status\");",
													"pm.expect(data.errors[5].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"pm.expect(data.errors[5]).to.have.property(\"detail\");",
													"pm.expect(data.errors[5].detail).to.equal(\"shippingAddress.zipCode => This field is missing.\");",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"pm.expect(data.errors[6]).to.have.property(\"code\");",
													"pm.expect(data.errors[6].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"pm.expect(data.errors[6]).to.have.property(\"status\");",
													"pm.expect(data.errors[6].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"pm.expect(data.errors[6]).to.have.property(\"detail\");",
													"pm.expect(data.errors[6].detail).to.equal(\"shippingAddress.city => This field is missing.\");",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"pm.expect(data.errors[7]).to.have.property(\"code\");",
													"pm.expect(data.errors[7].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"pm.expect(data.errors[7]).to.have.property(\"status\");",
													"pm.expect(data.errors[7].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"pm.expect(data.errors[7]).to.have.property(\"detail\");",
													"pm.expect(data.errors[7].detail).to.equal(\"shippingAddress.iso2Code => This field is missing.\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Accept-Language",
												"value": "de-DE, en;q=0.9,*;q=0.5"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"idCart\": \"{{cart_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {},\n            \"payments\": [\n                {\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\"\n                }\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            }\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{url}}/checkout",
											"host": [
												"{{url}}"
											],
											"path": [
												"checkout"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.16 Post checkout data with empty payments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
												"exec": [
													"//update tests according to validation concept",
													"",
													"var data = pm.response.json();",
													"pm.test(\"Response should have a `422` status code\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response should be an error response\", function () {",
													"    pm.response.to.be.error;",
													"});",
													"",
													"pm.test(\"Response should have an `errors` object\", function () {",
													"    pm.response.to.be.json;",
													"    pm.expect(data).to.have.property(\"errors\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"code\");",
													"    pm.expect(data.errors[0].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"status\");",
													"    pm.expect(data.errors[0].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
													"    pm.expect(data.errors[0].detail).to.equal(\"payments.0.paymentMethodName => This field is missing.\");",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"    pm.expect(data.errors[1]).to.have.property(\"code\");",
													"    pm.expect(data.errors[1].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"    pm.expect(data.errors[1]).to.have.property(\"status\");",
													"    pm.expect(data.errors[1].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"    pm.expect(data.errors[1]).to.have.property(\"detail\");",
													"    pm.expect(data.errors[1].detail).to.equal(\"payments.0.paymentProviderName => This field is missing.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Accept-Language",
												"value": "de-DE, en;q=0.9,*;q=0.5"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"idCart\": \"{{cart_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"payments\": [\n                {}\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            }\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{url}}/checkout",
											"host": [
												"{{url}}"
											],
											"path": [
												"checkout"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.17 Post checkout data with empty shipments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
												"exec": [
													"//update tests according to validation concept",
													"",
													"var data = pm.response.json();",
													"pm.test(\"Response should have a `422` status code\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response should be an error response\", function () {",
													"    pm.response.to.be.error;",
													"});",
													"",
													"pm.test(\"Response should have an `errors` object\", function () {",
													"    pm.response.to.be.json;",
													"    pm.expect(data).to.have.property(\"errors\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"code\");",
													"    pm.expect(data.errors[0].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"status\");",
													"    pm.expect(data.errors[0].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
													"    pm.expect(data.errors[0].detail).to.equal(\"shipment.idShipmentMethod => This field is missing.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Accept-Language",
												"value": "de-DE, en;q=0.9,*;q=0.5"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"idCart\": \"{{cart_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"payments\": [\n                {\n                    \"dummyPaymentInvoice\": {\n                        \"dateOfBirth\": \"08.04.1986\"\n                    },\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\",\n                    \"paymentSelection\": \"dummyPaymentInvoice\",\n                    \"amount\": \"899910\"\n                }\n            ],\n            \"shipment\": {}\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{url}}/checkout",
											"host": [
												"{{url}}"
											],
											"path": [
												"checkout"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.18 Post checkout data without customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
												"exec": [
													"//update tests according to validation concept",
													"",
													"var data = pm.response.json();",
													"pm.test(\"Response should have a `422` status code\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response should be an error response\", function () {",
													"    pm.response.to.be.error;",
													"});",
													"",
													"pm.test(\"Response should have an `errors` object\", function () {",
													"    pm.response.to.be.json;",
													"    pm.expect(data).to.have.property(\"errors\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"code\");",
													"    pm.expect(data.errors[0].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"status\");",
													"    pm.expect(data.errors[0].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
													"    pm.expect(data.errors[0].detail).to.equal(\"customer => This field is missing.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Accept-Language",
												"value": "de-DE, en;q=0.9,*;q=0.5"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"idCart\": \"{{cart_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"payments\": [\n                {\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\"\n                }\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            }\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{url}}/checkout",
											"host": [
												"{{url}}"
											],
											"path": [
												"checkout"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.19 Post checkout data without cart UUID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
												"exec": [
													"//update tests according to validation concept",
													"",
													"var data = pm.response.json();",
													"pm.test(\"Response should have a `422` status code\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response should be an error response\", function () {",
													"    pm.response.to.be.error;",
													"});",
													"",
													"pm.test(\"Response should have an `errors` object\", function () {",
													"    pm.response.to.be.json;",
													"    pm.expect(data).to.have.property(\"errors\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"code\");",
													"    pm.expect(data.errors[0].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"status\");",
													"    pm.expect(data.errors[0].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
													"    pm.expect(data.errors[0].detail).to.equal(\"idCart => This field is missing.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Accept-Language",
												"value": "de-DE, en;q=0.9,*;q=0.5"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"payments\": [\n                {\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\"\n                }\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            }\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{url}}/checkout",
											"host": [
												"{{url}}"
											],
											"path": [
												"checkout"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.20 Post checkout data without shipping address",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
												"exec": [
													"//update tests according to validation concept",
													"",
													"var data = pm.response.json();",
													"pm.test(\"Response should have a `422` status code\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response should be an error response\", function () {",
													"    pm.response.to.be.error;",
													"});",
													"",
													"pm.test(\"Response should have an `errors` object\", function () {",
													"    pm.response.to.be.json;",
													"    pm.expect(data).to.have.property(\"errors\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"code\");",
													"    pm.expect(data.errors[0].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"status\");",
													"    pm.expect(data.errors[0].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
													"    pm.expect(data.errors[0].detail).to.equal(\"shippingAddress => This field is missing.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Accept-Language",
												"value": "de-DE, en;q=0.9,*;q=0.5"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"idCart\": \"{{cart_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"payments\": [\n                {\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\"\n                }\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            }\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{url}}/checkout",
											"host": [
												"{{url}}"
											],
											"path": [
												"checkout"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.21 Negative Post checkout data without billing address",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
												"exec": [
													"//update tests according to validation concept",
													"",
													"var data = pm.response.json();",
													"pm.test(\"Response should have a `422` status code\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response should be an error response\", function () {",
													"    pm.response.to.be.error;",
													"});",
													"",
													"pm.test(\"Response should have an `errors` object\", function () {",
													"    pm.response.to.be.json;",
													"    pm.expect(data).to.have.property(\"errors\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"code\");",
													"    pm.expect(data.errors[0].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"status\");",
													"    pm.expect(data.errors[0].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
													"    pm.expect(data.errors[0].detail).to.equal(\"billingAddress => This field is missing.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Accept-Language",
												"value": "de-DE, en;q=0.9,*;q=0.5"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"idCart\": \"{{cart_uuid}}\",\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"payments\": [\n                {\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\"\n                }\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            }\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{url}}/checkout",
											"host": [
												"{{url}}"
											],
											"path": [
												"checkout"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.22 Negative Post checkout data without shipment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
												"exec": [
													"//update tests according to validation concept",
													"",
													"var data = pm.response.json();",
													"pm.test(\"Response should have a `422` status code\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response should be an error response\", function () {",
													"    pm.response.to.be.error;",
													"});",
													"",
													"pm.test(\"Response should have an `errors` object\", function () {",
													"    pm.response.to.be.json;",
													"    pm.expect(data).to.have.property(\"errors\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"code\");",
													"    pm.expect(data.errors[0].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"status\");",
													"    pm.expect(data.errors[0].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
													"    pm.expect(data.errors[0].detail).to.equal(\"shipment => This field is missing.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Accept-Language",
												"value": "de-DE, en;q=0.9,*;q=0.5"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"idCart\": \"{{cart_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"payments\": [\n                {\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\"\n                }\n            ]\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{url}}/checkout",
											"host": [
												"{{url}}"
											],
											"path": [
												"checkout"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.23 Post checkout data without payment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
												"exec": [
													"//update tests according to validation concept",
													"",
													"var data = pm.response.json();",
													"pm.test(\"Response should have a `422` status code\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response should be an error response\", function () {",
													"    pm.response.to.be.error;",
													"});",
													"",
													"pm.test(\"Response should have an `errors` object\", function () {",
													"    pm.response.to.be.json;",
													"    pm.expect(data).to.have.property(\"errors\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"code\");",
													"    pm.expect(data.errors[0].code).to.equal(\"901\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"status\");",
													"    pm.expect(data.errors[0].status).to.equal(422);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
													"    pm.expect(data.errors[0].detail).to.equal(\"payments => This field is missing.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Accept-Language",
												"value": "de-DE, en;q=0.9,*;q=0.5"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"idCart\": \"{{cart_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            }\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{url}}/checkout",
											"host": [
												"{{url}}"
											],
											"path": [
												"checkout"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.24 Post checkout data without auth token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
												"exec": [
													"if (pm.response.code == 500) {",
													"    console.log(\"Server error\");",
													"} else {",
													"    var data = pm.response.json();",
													"    pm.test(\"Response should have a `400` status code\", function () {",
													"        pm.response.to.have.status(400);",
													"    });",
													"    ",
													"    pm.test(\"Response should be an error response\", function () {",
													"        pm.response.to.be.error;",
													"    });",
													"    ",
													"    pm.test(\"Response should have an `errors` object\", function () {",
													"        pm.response.to.be.json;",
													"        pm.expect(data).to.have.property(\"errors\");",
													"    });",
													"    ",
													"    pm.test(\"Response should have a correct error code\", function () {",
													"        pm.expect(data.errors[0]).to.have.property(\"code\");",
													"        pm.expect(data.errors[0].code).to.equal(\"1105\");",
													"    });",
													"    ",
													"    pm.test(\"Response should have a correct error status\", function () {",
													"        pm.expect(data.errors[0]).to.have.property(\"status\");",
													"        pm.expect(data.errors[0].status).to.equal(400);",
													"    });",
													"    ",
													"    pm.test(\"Response should have a correct error detail\", function () {",
													"        pm.expect(data.errors[0]).to.have.property(\"detail\");",
													"        pm.expect(data.errors[0].detail).to.equal(\"One of Authorization or X-Anonymous-Customer-Unique-Id headers is required.\");",
													"    });",
													"",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Accept-Language",
												"value": "de-DE, en;q=0.9,*;q=0.5"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"idCart\": \"{{cart_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"payments\": [\n                {\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\"\n                }\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            }\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{url}}/checkout",
											"host": [
												"{{url}}"
											],
											"path": [
												"checkout"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.25 Negaitve. Post checkout with two payments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
												"exec": [
													"//update tests according to validation concept",
													"",
													"var data = pm.response.json();",
													"pm.test(\"Response should have a `400` status code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response should be an error response\", function () {",
													"    pm.response.to.be.error;",
													"});",
													"",
													"pm.test(\"Response should have an `errors` object\", function () {",
													"    pm.response.to.be.json;",
													"    pm.expect(data).to.have.property(\"errors\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error code\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"code\");",
													"    pm.expect(data.errors[0].code).to.equal(\"1107\");",
													"});",
													"",
													"pm.test(\"Response should have a correct error status\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"status\");",
													"    pm.expect(data.errors[0].status).to.equal(400);",
													"});",
													"",
													"pm.test(\"Response should have a correct error detail\", function () {",
													"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
													"    pm.expect(data.errors[0].detail).to.equal(\"Multiple payments are not allowed.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.api+json"
											},
											{
												"key": "Accept-Language",
												"value": "de-DE, en;q=0.9,*;q=0.5"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"idCart\": \"{{cart_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"payments\": [\n                {\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\"\n                },\n                {\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\"\n                }\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            }\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{url}}/checkout",
											"host": [
												"{{url}}"
											],
											"path": [
												"checkout"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Cleanup",
					"item": [
						{
							"name": "Delete customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68749e00-c774-4b55-9b9a-ce0462740b61",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.environment.unset(\"customer_reference\");",
											"pm.environment.unset(\"refresh_token\");",
											"pm.environment.unset(\"token\");",
											"pm.environment.unset(\"cart_uuid\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b4e77322-2686-4984-806b-d32b21ab994c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/customers/{{customer_reference}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"customers",
										"{{customer_reference}}"
									]
								},
								"description": "This test is to verify that request returns valid message and status code if customer does not have any addresses"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1178b21e-76ab-46a9-8f2b-0d184d8351a0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a41a1785-d95c-49ac-a833-c76ae95ec4ca",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Checkout process with logged customer \"Credit cart and no cart rule\"",
			"item": [
				{
					"name": "Prepare",
					"item": [
						{
							"name": "1.0.1 Request for create new customer/\"Credit cart and no cart rule\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0276d05-b6e9-4b39-9359-220a64816d55",
										"exec": [
											"if ('errors' in pm.response.json() && pm.response.json().errors[0].code == 400) {",
											"    var email = pm.variables.get(\"email\");",
											"    pm.environment.set(\"email\", new Date().getTime() + email);",
											"    postman.setNextRequest(request.name);",
											"} else {",
											"    pm.test(\"Status code is 201\", function () {",
											"        pm.response.to.have.status(201);",
											"    });",
											"    pm.environment.set(\"customer_reference\", pm.response.json().data.id);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, de;q=0.9, en;q=0.1"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"customers\",\n        \"attributes\": {\n            \"salutation\": \"{{salutation}}\",\n            \"firstName\": \"{{firstName}}\",\n            \"lastName\": \"{{lastName}}\",\n            \"email\": \"{{email}}\",\n            \"password\": \"{{password}}\",\n            \"confirmPassword\": \"{{password}}\",\n            \"acceptedTerms\": true\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/customers",
									"host": [
										"{{url}}"
									],
									"path": [
										"customers"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.2 Request for assess token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47e120f5-3cb6-4a40-82a7-3e9a9ff7ed30",
										"exec": [
											"var data = pm.response.json();",
											"pm.environment.set(\"token\", data.data.attributes.accessToken);",
											"pm.environment.set(\"refresh_token\", data.data.attributes.refreshToken);",
											"",
											"pm.test(\"Has correct type and self links returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.type).to.eql(\"access-tokens\"); ",
											"    pm.expect(jsonData.data.links.self).to.eql(pm.variables.get(\"url\") + \"/access-tokens\" ); ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"access-tokens\",\n        \"attributes\": {\n            \"username\": \"{{email}}\",\n            \"password\": \"{{password}}\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/access-tokens",
									"host": [
										"{{url}}"
									],
									"path": [
										"access-tokens"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.3 Request for retrieve regular cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57faca8f-f7df-49cc-9ae4-607c1b136cca",
										"exec": [
											"var data = pm.response.json();",
											"pm.environment.set(\"cart_uuid\", data.data[0].id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/carts",
									"host": [
										"{{url}}"
									],
									"path": [
										"carts"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.4 Request for adding an item to regular cart ",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9,*;q=0.5"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"sku\": \"{{concrete_sku}}\",\n            \"quantity\": \"15\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/carts/{{cart_uuid}}/items",
									"host": [
										"{{url}}"
									],
									"path": [
										"carts",
										"{{cart_uuid}}",
										"items"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Execute",
					"item": [
						{
							"name": "1.0.5 Checkout proccess",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
										"exec": [
											"if (pm.response.code == 500) {",
											"    console.log(\"Server error\");",
											"} else {",
											"    var data = pm.response.json();",
											"    pm.test(\"Response should have a `201` status code\", function () {",
											"        pm.response.to.have.status(201);",
											"    });",
											"    ",
											"    pm.test(\"Response should be successful response\", function () {",
											"        pm.response.to.not.be.error;",
											"    });",
											"    ",
											"    pm.test(\"Response should have a valid structure\", function () {",
											"        pm.expect(data).to.have.all.keys(\"data\", \"included\");",
											"        pm.expect(data.data).to.have.all.keys(\"type\", \"id\", \"attributes\", \"links\", \"relationships\");",
											"    });",
											"    ",
											"    pm.test(\"Response should have a `checkout` type\", function () {",
											"        pm.expect(data.data.type).to.equal(\"checkout\");",
											"    });",
											"    ",
											"    pm.test(\"Response should not have a resource id\", function () {",
											"        pm.expect(data.data.id).to.be.null;",
											"    });",
											"    ",
											"    pm.test(\"Response should have an order reference\", function () {",
											"        pm.expect(data.data.attributes).to.have.property(\"orderReference\");",
											"        pm.expect(data.data.attributes.orderReference).to.not.be.empty;",
											"    });",
											"    ",
											"    pm.test(\"Order reference in resource attributes should be equal to related order\", function () {",
											"        pm.expect(data).to.have.nested.property(\"data.relationships.orders.data[0].id\");",
											"        pm.expect(data.data.attributes.orderReference).to.equal(data.data.relationships.orders.data[0].id);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9,*;q=0.5"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"idCart\": \"{{cart_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"payments\": [\n                {\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\"\n                }\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/checkout",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Cleanup",
					"item": [
						{
							"name": "Delete customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68749e00-c774-4b55-9b9a-ce0462740b61",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.environment.unset(\"customer_reference\");",
											"pm.environment.unset(\"refresh_token\");",
											"pm.environment.unset(\"token\");",
											"pm.environment.unset(\"cart_uuid\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b4e77322-2686-4984-806b-d32b21ab994c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/customers/{{customer_reference}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"customers",
										"{{customer_reference}}"
									]
								},
								"description": "This test is to verify that request returns valid message and status code if customer does not have any addresses"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Checkout process with logged customer \" Product is not available\"",
			"item": [
				{
					"name": "1.0.1Request for create new customer/\"simultaneous checkout\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0276d05-b6e9-4b39-9359-220a64816d55",
								"exec": [
									"if ('errors' in pm.response.json() && pm.response.json().errors[0].code == 400) {",
									"    var email = pm.variables.get(\"email\");",
									"    pm.environment.set(\"email\", new Date().getTime() + email);",
									"    postman.setNextRequest(request.name);",
									"} else {",
									"    pm.test(\"Status code is 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"    ",
									"    pm.environment.set(\"customer_reference\", pm.response.json().data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9, en;q=0.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"customers\",\n        \"attributes\": {\n            \"salutation\": \"{{salutation}}\",\n            \"firstName\": \"{{firstName}}\",\n            \"lastName\": \"{{lastName}}\",\n            \"email\": \"{{email}}\",\n            \"password\": \"{{password}}\",\n            \"confirmPassword\": \"{{password}}\",\n            \"acceptedTerms\": true\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.0.1Request for create new customer/\"simultaneous checkout\" Second user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0276d05-b6e9-4b39-9359-220a64816d55",
								"exec": [
									"if ('errors' in pm.response.json() && pm.response.json().errors[0].code == 400) {",
									"    var email = pm.variables.get(\"secondEmail\");",
									"    pm.environment.set(\"secondEmail\", new Date().getTime() + email);",
									"    postman.setNextRequest(request.name);",
									"} else {",
									"    pm.test(\"Status code is 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"    ",
									"    pm.environment.set(\"second_customer_reference\", pm.response.json().data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "549ae636-0935-43cd-ac99-f296775acc7e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, de;q=0.9, en;q=0.1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"customers\",\n        \"attributes\": {\n            \"salutation\": \"{{salutation}}\",\n            \"firstName\": \"{{firstName}}\",\n            \"lastName\": \"{{lastName}}\",\n            \"email\": \"{{secondEmail}}\",\n            \"password\": \"{{password}}\",\n            \"confirmPassword\": \"{{password}}\",\n            \"acceptedTerms\": true\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.0.2 Request for assess token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "47e120f5-3cb6-4a40-82a7-3e9a9ff7ed30",
								"exec": [
									"var data = pm.response.json();",
									"pm.environment.set(\"token\", data.data.attributes.accessToken);",
									"pm.environment.set(\"refresh_token\", data.data.attributes.refreshToken);",
									"",
									"pm.test(\"Has correct type and self links returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.type).to.eql(\"access-tokens\"); ",
									"    pm.expect(jsonData.data.links.self).to.eql(pm.variables.get(\"url\") + \"/access-tokens\" ); ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"access-tokens\",\n        \"attributes\": {\n            \"username\": \"{{email}}\",\n            \"password\": \"{{password}}\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.0.2 Request for assess token Second user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "47e120f5-3cb6-4a40-82a7-3e9a9ff7ed30",
								"exec": [
									"var data = pm.response.json();",
									"pm.environment.set(\"second_token\", data.data.attributes.accessToken);",
									"",
									"pm.test(\"Has correct type and self links returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.type).to.eql(\"access-tokens\"); ",
									"    pm.expect(jsonData.data.links.self).to.eql(pm.variables.get(\"url\") + \"/access-tokens\" ); ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"access-tokens\",\n        \"attributes\": {\n            \"username\": \"{{secondEmail}}\",\n            \"password\": \"{{password}}\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/access-tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"access-tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.0.3 Request for retrieve regular cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "57faca8f-f7df-49cc-9ae4-607c1b136cca",
								"exec": [
									"var data = pm.response.json();",
									"pm.environment.set(\"cart_uuid\", data.data[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.0.3 Request for retrieve regular cart Second user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "57faca8f-f7df-49cc-9ae4-607c1b136cca",
								"exec": [
									"var data = pm.response.json();",
									"pm.environment.set(\"second_cart_uuid\", data.data[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{second_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/carts",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.0.4 Request for adding an item to regular cart ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9,*;q=0.5"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"sku\": \"{{concrete_sku}}\",\n            \"quantity\": \"10\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{cart_uuid}}/items",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{cart_uuid}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.0.4 Request for adding an item to regular cart  Second user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{second_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9,*;q=0.5"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"sku\": \"{{concrete_sku}}\",\n            \"quantity\": \"10\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/carts/{{second_cart_uuid}}/items",
							"host": [
								"{{url}}"
							],
							"path": [
								"carts",
								"{{second_cart_uuid}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.0.5 Checkout proccess ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
								"exec": [
									"if (pm.response.code == 500) {",
									"    console.log(\"Server error\");",
									"} else {",
									"    var data = pm.response.json();",
									"    pm.test(\"Response should have a `201` status code\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"    ",
									"    pm.test(\"Response should be successful response\", function () {",
									"        pm.response.to.not.be.error;",
									"    });",
									"    ",
									"    pm.test(\"Response should have a valid structure\", function () {",
									"        pm.expect(data).to.have.all.keys(\"data\", \"included\");",
									"        pm.expect(data.data).to.have.all.keys(\"type\", \"id\", \"attributes\", \"links\", \"relationships\");",
									"    });",
									"    ",
									"    pm.test(\"Response should have a `checkout` type\", function () {",
									"        pm.expect(data.data.type).to.equal(\"checkout\");",
									"    });",
									"    ",
									"    pm.test(\"Response should not have a resource id\", function () {",
									"        pm.expect(data.data.id).to.be.null;",
									"    });",
									"    ",
									"    pm.test(\"Response should have an order reference\", function () {",
									"        pm.expect(data.data.attributes).to.have.property(\"orderReference\");",
									"        pm.expect(data.data.attributes.orderReference).to.not.be.empty;",
									"    });",
									"    ",
									"    pm.test(\"Order reference in resource attributes should be equal to related order\", function () {",
									"        pm.expect(data).to.have.nested.property(\"data.relationships.orders.data[0].id\");",
									"        pm.expect(data.data.attributes.orderReference).to.equal(data.data.relationships.orders.data[0].id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9,*;q=0.5"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"idCart\": \"{{cart_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"payments\": [\n                {\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\"\n                }\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            }\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/checkout",
							"host": [
								"{{url}}"
							],
							"path": [
								"checkout"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.0.5 Checkout proccess  Second user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
								"exec": [
									"if (pm.response.code == 500) {",
									"    console.log(\"Server error\");",
									"} else {",
									"    var data = pm.response.json();",
									"    pm.test(\"Response should have a `201` status code\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"    ",
									"    pm.test(\"Response should be successful response\", function () {",
									"        pm.response.to.not.be.error;",
									"    });",
									"    ",
									"    pm.test(\"Response should have a valid structure\", function () {",
									"        pm.expect(data).to.have.all.keys(\"data\", \"included\");",
									"        pm.expect(data.data).to.have.all.keys(\"type\", \"id\", \"attributes\", \"links\", \"relationships\");",
									"    });",
									"    ",
									"    pm.test(\"Response should have a `checkout` type\", function () {",
									"        pm.expect(data.data.type).to.equal(\"checkout\");",
									"    });",
									"    ",
									"    pm.test(\"Response should not have a resource id\", function () {",
									"        pm.expect(data.data.id).to.be.null;",
									"    });",
									"    ",
									"    pm.test(\"Response should have an order reference\", function () {",
									"        pm.expect(data.data.attributes).to.have.property(\"orderReference\");",
									"        pm.expect(data.data.attributes.orderReference).to.not.be.empty;",
									"    });",
									"    ",
									"    pm.test(\"Order reference in resource attributes should be equal to related order\", function () {",
									"        pm.expect(data).to.have.nested.property(\"data.relationships.orders.data[0].id\");",
									"        pm.expect(data.data.attributes.orderReference).to.equal(data.data.relationships.orders.data[0].id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{second_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept-Language",
								"value": "de-DE, en;q=0.9,*;q=0.5"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{secondEmail}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"idCart\": \"{{second_cart_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"payments\": [\n                {\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\"\n                }\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            }\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/checkout",
							"host": [
								"{{url}}"
							],
							"path": [
								"checkout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "68749e00-c774-4b55-9b9a-ce0462740b61",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.environment.unset(\"customer_reference\");",
									"pm.environment.unset(\"refresh_token\");",
									"pm.environment.unset(\"token\");",
									"pm.environment.unset(\"cart_uuid\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b4e77322-2686-4984-806b-d32b21ab994c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{customer_reference}}"
							]
						},
						"description": "This test is to verify that request returns valid message and status code if customer does not have any addresses"
					},
					"response": []
				},
				{
					"name": "Delete customer Second user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "68749e00-c774-4b55-9b9a-ce0462740b61",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.environment.unset(\"customer_reference\");",
									"pm.environment.unset(\"second_customer_reference\");",
									"pm.environment.unset(\"second_token\");",
									"pm.environment.unset(\"second_cart_uuid\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b4e77322-2686-4984-806b-d32b21ab994c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{second_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/customers/{{second_customer_reference}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"customers",
								"{{second_customer_reference}}"
							]
						},
						"description": "This test is to verify that request returns valid message and status code if customer does not have any addresses"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e20d0495-7439-4725-ab6c-a0bebbf3c051",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3549bf11-2de3-42a2-b6ee-f146f41f9276",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Checkout process with logged customer \" Customer has addresses\"",
			"item": [
				{
					"name": "Prepare",
					"item": [
						{
							"name": "1.0.1Request for create new customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0276d05-b6e9-4b39-9359-220a64816d55",
										"exec": [
											"if ('errors' in pm.response.json() && pm.response.json().errors[0].code == 400) {",
											"    var email = pm.variables.get(\"email\");",
											"    pm.environment.set(\"email\", new Date().getTime() + email);",
											"    postman.setNextRequest(request.name);",
											"} else {",
											"    pm.test(\"Status code is 201\", function () {",
											"        pm.response.to.have.status(201);",
											"    });",
											"    ",
											"    pm.environment.set(\"customer_reference\", pm.response.json().data.id);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, de;q=0.9, en;q=0.1"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"customers\",\n        \"attributes\": {\n            \"salutation\": \"{{salutation}}\",\n            \"firstName\": \"{{firstName}}\",\n            \"lastName\": \"{{lastName}}\",\n            \"email\": \"{{email}}\",\n            \"password\": \"{{password}}\",\n            \"confirmPassword\": \"{{password}}\",\n            \"acceptedTerms\": true\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/customers",
									"host": [
										"{{url}}"
									],
									"path": [
										"customers"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.2 Request for assess token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47e120f5-3cb6-4a40-82a7-3e9a9ff7ed30",
										"exec": [
											"var responseData = pm.response.json().data;",
											"",
											"pm.environment.set(\"token\", responseData.attributes.accessToken);",
											"pm.environment.set(\"refresh_token\", responseData.attributes.refreshToken);",
											"",
											"pm.test(\"Has correct type and self links returned\", function () {",
											"    pm.expect(responseData.type).to.eql(\"access-tokens\"); ",
											"    pm.expect(responseData.links.self).to.eql(pm.variables.get(\"url\") + \"/access-tokens\" ); ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"access-tokens\",\n        \"attributes\": {\n            \"username\": \"{{email}}\",\n            \"password\": \"{{password}}\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/access-tokens",
									"host": [
										"{{url}}"
									],
									"path": [
										"access-tokens"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.3 Request for create new address ",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7851500-d8d5-46de-b1c8-795ddefd9b69",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Response is json\", function () {",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.environment.set(\"customer_address_uuid_1\", pm.response.json().data.id);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Has correct type returned\", function() {",
											"    pm.expect(jsonData.data.type).to.eql(\"addresses\");",
											"    pm.expect(jsonData.data.type).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has id returned\", function() {",
											"    pm.expect(jsonData.data.id).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Has correct addresses attributes\", function() {",
											"    var attributes = pm.response.json().data.attributes;",
											"    ",
											"    pm.expect(attributes.salutation).to.be.eql(\"Mr\");",
											"    pm.expect(attributes.firstName).to.be.eql(\"John\");",
											"    pm.expect(attributes.lastName).to.be.eql(\"Doe\");",
											"    pm.expect(attributes.address1).to.be.eql(\"Default, 33, 11\");",
											"    pm.expect(attributes.address2).to.be.eql(\"b\");",
											"    pm.expect(attributes.address3).to.be.eql(\"aaa\");",
											"    pm.expect(attributes.zipCode).to.be.eql(\"12312\");",
											"    pm.expect(attributes.city).to.be.eql(\"Berlin\");",
											"    pm.expect(attributes.country).to.be.eql(\"Germany\");",
											"    pm.expect(attributes.iso2Code).to.be.eql(\"DE\");",
											"    pm.expect(attributes.company).to.be.eql(null);",
											"    pm.expect(attributes.phone).to.be.eql(\"22111-3-4-5\");",
											"    pm.expect(attributes.isDefaultShipping).to.be.eql(true);",
											"    pm.expect(attributes.isDefaultBilling).to.be.eql(true);",
											"});  ",
											"",
											"// if this address is first we always have true for Shipping and Billing ",
											"",
											"pm.test(\"Has self link\", function() {",
											"    pm.expect(jsonData.data.links.self).to.eql(pm.variables.get(\"url\") + \"/customers/\" + pm.variables.get(\"customer_reference\") +\"/addresses/\"+ pm.variables.get(\"customer_address_uuid_1\") );",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"addresses\",\n        \"attributes\": {\n            \"salutation\": \"Mr\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address1\": \"Default, 33, 11\",\n            \"address2\": \"b\",\n            \"address3\": \"aaa\",\n            \"zipCode\": \"12312\",\n            \"city\": \"Berlin\",\n            \"country\": \"Germany\",\n            \"iso2Code\": \"DE\",\n            \"phone\": \"22111-3-4-5\",\n            \"isDefaultShipping\": false,\n            \"isDefaultBilling\": false\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/customers/{{customer_reference}}/addresses",
									"host": [
										"{{url}}"
									],
									"path": [
										"customers",
										"{{customer_reference}}",
										"addresses"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.3 Request for retrieve regular cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57faca8f-f7df-49cc-9ae4-607c1b136cca",
										"exec": [
											"pm.environment.set(\"cart_uuid\", pm.response.json().data[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/carts",
									"host": [
										"{{url}}"
									],
									"path": [
										"carts"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.4 Request for adding an item to regular cart ",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9,*;q=0.5"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"items\",\n        \"attributes\": {\n            \"sku\": \"{{concrete_sku}}\",\n            \"quantity\": \"15\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/carts/{{cart_uuid}}/items",
									"host": [
										"{{url}}"
									],
									"path": [
										"carts",
										"{{cart_uuid}}",
										"items"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Execute",
					"item": [
						{
							"name": "[Upd tests]1.0.5 Checkout proccess",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
										"exec": [
											"//need update test scenario after GLUE-1889 will be released",
											"",
											"var data = pm.response.json();",
											"pm.test(\"Response should have a `201` status code\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response should be successful response\", function () {",
											"    pm.response.to.not.be.error;",
											"});",
											"",
											"pm.test(\"Response should have a valid structure\", function () {",
											"    pm.expect(data).to.have.all.keys(\"data\", \"included\");",
											"    pm.expect(data.data).to.have.all.keys(\"type\", \"id\", \"attributes\", \"links\", \"relationships\");",
											"});",
											"",
											"pm.test(\"Response should have a `checkout` type\", function () {",
											"    pm.expect(data.data.type).to.equal(\"checkout\");",
											"});",
											"",
											"pm.test(\"Response should not have a resource id\", function () {",
											"    pm.expect(data.data.id).to.be.null;",
											"});",
											"",
											"pm.test(\"Response should have an order reference\", function () {",
											"    pm.expect(data.data.attributes).to.have.property(\"orderReference\");",
											"    pm.expect(data.data.attributes.orderReference).to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Order reference in resource attributes should be equal to related order\", function () {",
											"    pm.expect(data).to.have.nested.property(\"data.relationships.orders.data[0].id\");",
											"    pm.expect(data.data.attributes.orderReference).to.equal(data.data.relationships.orders.data[0].id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9,*;q=0.5"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"idCart\": \"{{cart_uuid}}\",\n            \"billingAddress\": {\n                \"idCart\": \"{{customer_address_uuid_1}}\",\n                \"salutation\": \"Mr\",\n                \"firstName\": \"John\",\n                \"lastName\": \"Doe\",\n                \"address1\": \"Default, 33, 11\",\n                \"address2\": \"b\",\n                \"address3\": \"aaa\",\n                \"zipCode\": \"12312\",\n                \"city\": \"Berlin\",\n                \"country\": \"Germany\",\n                \"iso2Code\": \"DE\",\n                \"phone\": \"22111-3-4-5\"\n            },\n            \"shippingAddress\": {\n                \"idCart\": \"{{customer_address_uuid_1}}\",\n                \"salutation\": \"Mr\",\n                \"firstName\": \"John\",\n                \"lastName\": \"Doe\",\n                \"address1\": \"Default, 33, 11\",\n                \"address2\": \"b\",\n                \"address3\": \"aaa\",\n                \"zipCode\": \"12312\",\n                \"city\": \"Berlin\",\n                \"country\": \"Germany\",\n                \"iso2Code\": \"DE\",\n                \"phone\": \"22111-3-4-5\"\n            },\n            \"payments\": [\n                {\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\"\n                }\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/checkout",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Cleanup",
					"item": [
						{
							"name": "Delete customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68749e00-c774-4b55-9b9a-ce0462740b61",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.environment.unset(\"customer_reference\");",
											"pm.environment.unset(\"refresh_token\");",
											"pm.environment.unset(\"token\");",
											"pm.environment.unset(\"cart_uuid\");",
											"pm.environment.unset(\"customer_address_uuid_1\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b4e77322-2686-4984-806b-d32b21ab994c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/customers/{{customer_reference}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"customers",
										"{{customer_reference}}"
									]
								},
								"description": "This test is to verify that request returns valid message and status code if customer does not have any addresses"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e20d0495-7439-4725-ab6c-a0bebbf3c051",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3549bf11-2de3-42a2-b6ee-f146f41f9276",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Checkout procces with anonymous customer",
			"item": [
				{
					"name": "Prepare",
					"item": [
						{
							"name": "1.0.0 Add an item to customer's cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
										"exec": [
											"var data = pm.response.json();",
											"pm.environment.set(\"guest_carts_uuid\", data.data.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "48d1d76b-b9b6-4b94-ad3a-c0ef6b283dca",
										"exec": [
											"pm.environment.set(\"unique_anonymous_id\", new Date().getTime());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9,*;q=0.5"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"value": "{{unique_anonymous_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"guest-cart-items\",\n        \"attributes\": {\n            \"sku\": \"{{concrete_sku_2}}\",\n            \"quantity\": \"300\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/guest-cart-items",
									"host": [
										"{{url}}"
									],
									"path": [
										"guest-cart-items"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Execute",
					"item": [
						{
							"name": "1.0.4 Post checkout  with cart rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
										"exec": [
											"if (pm.response.code == 500) {",
											"    console.log(\"Server error\");",
											"} else {",
											"    var data = pm.response.json();",
											"    pm.test(\"Response should have a `201` status code\", function () {",
											"        pm.response.to.have.status(201);",
											"    });",
											"    ",
											"    pm.test(\"Response should be successful response\", function () {",
											"        pm.response.to.not.be.error;",
											"    });",
											"    ",
											"    pm.test(\"Response should have a valid structure\", function () {",
											"        pm.expect(data).to.have.all.keys(\"data\", \"included\");",
											"        pm.expect(data.data).to.have.all.keys(\"type\", \"id\", \"attributes\", \"links\", \"relationships\");",
											"    });",
											"    ",
											"    pm.test(\"Response should have a `checkout` type\", function () {",
											"        pm.expect(data.data.type).to.equal(\"checkout\");",
											"    });",
											"    ",
											"    pm.test(\"Response should not have a resource id\", function () {",
											"        pm.expect(data.data.id).to.be.null;",
											"    });",
											"    ",
											"    pm.test(\"Response should have an order reference\", function () {",
											"        pm.expect(data.data.attributes).to.have.property(\"orderReference\");",
											"        pm.expect(data.data.attributes.orderReference).to.not.be.empty;",
											"    });",
											"    ",
											"    pm.test(\"Order reference in resource attributes should be equal to related order\", function () {",
											"        pm.expect(data).to.have.nested.property(\"data.relationships.orders.data[0].id\");",
											"        pm.expect(data.data.attributes.orderReference).to.equal(data.data.relationships.orders.data[0].id);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9,*;q=0.5"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"value": "{{unique_anonymous_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"idCart\": \"{{guest_carts_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"payments\": [\n                {\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\"\n                }\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/checkout",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.5 Post checkout  with cart rule Second try",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
										"exec": [
											"if (pm.response.code == 500) {",
											"    console.log(\"Server error\");",
											"} else {",
											"    var data = pm.response.json();",
											"    pm.test(\"Response should have a `422` status code\", function () {",
											"        pm.response.to.have.status(422);",
											"    });",
											"    ",
											"    pm.test(\"Response should be an error response\", function () {",
											"        pm.response.to.be.error;",
											"    });",
											"    ",
											"    pm.test(\"Response should have an `errors` object\", function () {",
											"        pm.response.to.be.json;",
											"        pm.expect(data).to.have.property(\"errors\");",
											"    });",
											"    ",
											"    pm.test(\"Response should have a correct error code\", function () {",
											"        pm.expect(data.errors[0]).to.have.property(\"code\");",
											"        pm.expect(data.errors[0].code).to.equal(\"1103\");",
											"    });",
											"    ",
											"    pm.test(\"Response should have a correct error status\", function () {",
											"        pm.expect(data.errors[0]).to.have.property(\"status\");",
											"        pm.expect(data.errors[0].status).to.equal(422);",
											"    });",
											"    ",
											"    pm.test(\"Response should have a correct error detail\", function () {",
											"        pm.expect(data.errors[0]).to.have.property(\"detail\");",
											"        pm.expect(data.errors[0].detail).to.equal(\"Cart not found.\");",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9,*;q=0.5"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"type": "text",
										"value": "{{unique_anonymous_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"{{email}}\",\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"idCart\": \"{{guest_carts_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"payments\": [\n                {\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\"\n                }\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/checkout",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.0.6 Add an item to customer's cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
										"exec": [
											"var data = pm.response.json();",
											"pm.variables.set(\"guest_carts_uuid\", data.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9,*;q=0.5"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"value": "{{unique_anonymous_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"guest-cart-items\",\n        \"attributes\": {\n            \"sku\": \"{{concrete_sku_2}}\",\n            \"quantity\": \"300\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/guest-cart-items",
									"host": [
										"{{url}}"
									],
									"path": [
										"guest-cart-items"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.1.2 Post checkout data without cart ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
										"exec": [
											"var data = pm.response.json();",
											"pm.test(\"Response should have a `422` status code\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Response should be an error response\", function () {",
											"    pm.response.to.be.error;",
											"});",
											"",
											"pm.test(\"Response should have an `errors` object\", function () {",
											"    pm.response.to.be.json;",
											"    pm.expect(data).to.have.property(\"errors\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"code\");",
											"    pm.expect(data.errors[0].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"status\");",
											"    pm.expect(data.errors[0].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
											"    pm.expect(data.errors[0].detail).to.equal(\"idCart => This field is missing.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9,*;q=0.5"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"type": "text",
										"value": "{{unique_anonymous_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\"\n            },\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"payments\": [\n                {\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\"\n                }\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/checkout",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.1.3 Post checkout data with empty addresses",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
										"exec": [
											"//update tests according to validation concept",
											"",
											"var data = pm.response.json();",
											"pm.test(\"Response should have a `422` status code\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Response should be an error response\", function () {",
											"    pm.response.to.be.error;",
											"});",
											"",
											"pm.test(\"Response should have an `errors` object\", function () {",
											"    pm.response.to.be.json;",
											"    pm.expect(data).to.have.property(\"errors\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"code\");",
											"    pm.expect(data.errors[0].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"status\");",
											"    pm.expect(data.errors[0].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
											"    pm.expect(data.errors[0].detail).to.equal(\"billingAddress.salutation => This field is missing.\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"    pm.expect(data.errors[1]).to.have.property(\"code\");",
											"    pm.expect(data.errors[1].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"    pm.expect(data.errors[1]).to.have.property(\"status\");",
											"    pm.expect(data.errors[1].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"    pm.expect(data.errors[1]).to.have.property(\"detail\");",
											"    pm.expect(data.errors[1].detail).to.equal(\"billingAddress.firstName => This field is missing.\");",
											"});",
											"",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"pm.expect(data.errors[2]).to.have.property(\"code\");",
											"pm.expect(data.errors[2].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"pm.expect(data.errors[2]).to.have.property(\"status\");",
											"pm.expect(data.errors[2].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"pm.expect(data.errors[2]).to.have.property(\"detail\");",
											"pm.expect(data.errors[2].detail).to.equal(\"billingAddress.lastName => This field is missing.\");",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"pm.expect(data.errors[3]).to.have.property(\"code\");",
											"pm.expect(data.errors[3].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"pm.expect(data.errors[3]).to.have.property(\"status\");",
											"pm.expect(data.errors[3].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"pm.expect(data.errors[3]).to.have.property(\"detail\");",
											"pm.expect(data.errors[3].detail).to.equal(\"billingAddress.address1 => This field is missing.\");",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"pm.expect(data.errors[4]).to.have.property(\"code\");",
											"pm.expect(data.errors[4].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"pm.expect(data.errors[4]).to.have.property(\"status\");",
											"pm.expect(data.errors[4].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"pm.expect(data.errors[4]).to.have.property(\"detail\");",
											"pm.expect(data.errors[4].detail).to.equal(\"billingAddress.address2 => This field is missing.\");",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"pm.expect(data.errors[5]).to.have.property(\"code\");",
											"pm.expect(data.errors[5].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"pm.expect(data.errors[5]).to.have.property(\"status\");",
											"pm.expect(data.errors[5].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"pm.expect(data.errors[5]).to.have.property(\"detail\");",
											"pm.expect(data.errors[5].detail).to.equal(\"billingAddress.zipCode => This field is missing.\");",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"pm.expect(data.errors[6]).to.have.property(\"code\");",
											"pm.expect(data.errors[6].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"pm.expect(data.errors[6]).to.have.property(\"status\");",
											"pm.expect(data.errors[6].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"pm.expect(data.errors[6]).to.have.property(\"detail\");",
											"pm.expect(data.errors[6].detail).to.equal(\"billingAddress.city => This field is missing.\");",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"pm.expect(data.errors[7]).to.have.property(\"code\");",
											"pm.expect(data.errors[7].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"pm.expect(data.errors[7]).to.have.property(\"status\");",
											"pm.expect(data.errors[7].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"pm.expect(data.errors[7]).to.have.property(\"detail\");",
											"pm.expect(data.errors[7].detail).to.equal(\"billingAddress.iso2Code => This field is missing.\");",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"pm.expect(data.errors[8]).to.have.property(\"code\");",
											"pm.expect(data.errors[8].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"pm.expect(data.errors[8]).to.have.property(\"status\");",
											"pm.expect(data.errors[8].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"pm.expect(data.errors[8]).to.have.property(\"detail\");",
											"pm.expect(data.errors[8].detail).to.equal(\"shippingAddress.salutation => This field is missing.\");",
											"});",
											"",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"pm.expect(data.errors[9]).to.have.property(\"code\");",
											"pm.expect(data.errors[9].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"pm.expect(data.errors[9]).to.have.property(\"status\");",
											"pm.expect(data.errors[9].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"pm.expect(data.errors[9]).to.have.property(\"detail\");",
											"pm.expect(data.errors[9].detail).to.equal(\"shippingAddress.firstName => This field is missing.\");",
											"});",
											"",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"pm.expect(data.errors[10]).to.have.property(\"code\");",
											"pm.expect(data.errors[10].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"pm.expect(data.errors[10]).to.have.property(\"status\");",
											"pm.expect(data.errors[10].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"pm.expect(data.errors[10]).to.have.property(\"detail\");",
											"pm.expect(data.errors[10].detail).to.equal(\"shippingAddress.lastName => This field is missing.\");",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"pm.expect(data.errors[11]).to.have.property(\"code\");",
											"pm.expect(data.errors[11].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"pm.expect(data.errors[11]).to.have.property(\"status\");",
											"pm.expect(data.errors[11].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"pm.expect(data.errors[11]).to.have.property(\"detail\");",
											"pm.expect(data.errors[11].detail).to.equal(\"shippingAddress.address1 => This field is missing.\");",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"pm.expect(data.errors[12]).to.have.property(\"code\");",
											"pm.expect(data.errors[12].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"pm.expect(data.errors[12]).to.have.property(\"status\");",
											"pm.expect(data.errors[12].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"pm.expect(data.errors[12]).to.have.property(\"detail\");",
											"pm.expect(data.errors[12].detail).to.equal(\"shippingAddress.address2 => This field is missing.\");",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"pm.expect(data.errors[13]).to.have.property(\"code\");",
											"pm.expect(data.errors[13].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"pm.expect(data.errors[13]).to.have.property(\"status\");",
											"pm.expect(data.errors[13].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"pm.expect(data.errors[13]).to.have.property(\"detail\");",
											"pm.expect(data.errors[13].detail).to.equal(\"shippingAddress.zipCode => This field is missing.\");",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"pm.expect(data.errors[14]).to.have.property(\"code\");",
											"pm.expect(data.errors[14].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"pm.expect(data.errors[14]).to.have.property(\"status\");",
											"pm.expect(data.errors[14].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"pm.expect(data.errors[14]).to.have.property(\"detail\");",
											"pm.expect(data.errors[14].detail).to.equal(\"shippingAddress.city => This field is missing.\");",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"pm.expect(data.errors[15]).to.have.property(\"code\");",
											"pm.expect(data.errors[15].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"pm.expect(data.errors[15]).to.have.property(\"status\");",
											"pm.expect(data.errors[15].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"pm.expect(data.errors[15]).to.have.property(\"detail\");",
											"pm.expect(data.errors[15].detail).to.equal(\"shippingAddress.iso2Code => This field is missing.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9,*;q=0.5"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"value": "{{unique_anonymous_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\"\n            },\n            \"idCart\": \"{{guest_carts_uuid}}\",\n            \"billingAddress\": {},\n            \"shippingAddress\": {},\n            \"payments\": [\n                {\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\"\n                }\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/checkout",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.1.4. Post checkout data with empty billing address",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
										"exec": [
											"//update tests according to validation concept",
											"",
											"var data = pm.response.json();",
											"pm.test(\"Response should have a `422` status code\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Response should be an error response\", function () {",
											"    pm.response.to.be.error;",
											"});",
											"",
											"pm.test(\"Response should have an `errors` object\", function () {",
											"    pm.response.to.be.json;",
											"    pm.expect(data).to.have.property(\"errors\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"code\");",
											"    pm.expect(data.errors[0].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"status\");",
											"    pm.expect(data.errors[0].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
											"    pm.expect(data.errors[0].detail).to.equal(\"billingAddress.salutation => This field is missing.\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"    pm.expect(data.errors[1]).to.have.property(\"code\");",
											"    pm.expect(data.errors[1].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"    pm.expect(data.errors[1]).to.have.property(\"status\");",
											"    pm.expect(data.errors[1].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"    pm.expect(data.errors[1]).to.have.property(\"detail\");",
											"    pm.expect(data.errors[1].detail).to.equal(\"billingAddress.firstName => This field is missing.\");",
											"});",
											"",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"pm.expect(data.errors[2]).to.have.property(\"code\");",
											"pm.expect(data.errors[2].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"pm.expect(data.errors[2]).to.have.property(\"status\");",
											"pm.expect(data.errors[2].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"pm.expect(data.errors[2]).to.have.property(\"detail\");",
											"pm.expect(data.errors[2].detail).to.equal(\"billingAddress.lastName => This field is missing.\");",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"pm.expect(data.errors[3]).to.have.property(\"code\");",
											"pm.expect(data.errors[3].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"pm.expect(data.errors[3]).to.have.property(\"status\");",
											"pm.expect(data.errors[3].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"pm.expect(data.errors[3]).to.have.property(\"detail\");",
											"pm.expect(data.errors[3].detail).to.equal(\"billingAddress.address1 => This field is missing.\");",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"pm.expect(data.errors[4]).to.have.property(\"code\");",
											"pm.expect(data.errors[4].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"pm.expect(data.errors[4]).to.have.property(\"status\");",
											"pm.expect(data.errors[4].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"pm.expect(data.errors[4]).to.have.property(\"detail\");",
											"pm.expect(data.errors[4].detail).to.equal(\"billingAddress.address2 => This field is missing.\");",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"pm.expect(data.errors[5]).to.have.property(\"code\");",
											"pm.expect(data.errors[5].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"pm.expect(data.errors[5]).to.have.property(\"status\");",
											"pm.expect(data.errors[5].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"pm.expect(data.errors[5]).to.have.property(\"detail\");",
											"pm.expect(data.errors[5].detail).to.equal(\"billingAddress.zipCode => This field is missing.\");",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"pm.expect(data.errors[6]).to.have.property(\"code\");",
											"pm.expect(data.errors[6].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"pm.expect(data.errors[6]).to.have.property(\"status\");",
											"pm.expect(data.errors[6].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"pm.expect(data.errors[6]).to.have.property(\"detail\");",
											"pm.expect(data.errors[6].detail).to.equal(\"billingAddress.city => This field is missing.\");",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"pm.expect(data.errors[7]).to.have.property(\"code\");",
											"pm.expect(data.errors[7].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"pm.expect(data.errors[7]).to.have.property(\"status\");",
											"pm.expect(data.errors[7].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"pm.expect(data.errors[7]).to.have.property(\"detail\");",
											"pm.expect(data.errors[7].detail).to.equal(\"billingAddress.iso2Code => This field is missing.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9,*;q=0.5"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"type": "text",
										"value": "{{unique_anonymous_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\"\n            },\n            \"idCart\": \"{{guest_carts_uuid}}\",\n            \"billingAddress\": {},\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"payments\": [\n                {\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\"\n                }\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/checkout",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.1.5 Post checkout data with empty shipping address",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
										"exec": [
											"//update tests according to validation concept",
											"",
											"var data = pm.response.json();",
											"pm.test(\"Response should have a `422` status code\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Response should be an error response\", function () {",
											"    pm.response.to.be.error;",
											"});",
											"",
											"pm.test(\"Response should have an `errors` object\", function () {",
											"    pm.response.to.be.json;",
											"    pm.expect(data).to.have.property(\"errors\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"code\");",
											"    pm.expect(data.errors[0].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"status\");",
											"    pm.expect(data.errors[0].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
											"    pm.expect(data.errors[0].detail).to.equal(\"shippingAddress.salutation => This field is missing.\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"    pm.expect(data.errors[1]).to.have.property(\"code\");",
											"    pm.expect(data.errors[1].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"    pm.expect(data.errors[1]).to.have.property(\"status\");",
											"    pm.expect(data.errors[1].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"    pm.expect(data.errors[1]).to.have.property(\"detail\");",
											"    pm.expect(data.errors[1].detail).to.equal(\"shippingAddress.firstName => This field is missing.\");",
											"});",
											"",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"pm.expect(data.errors[2]).to.have.property(\"code\");",
											"pm.expect(data.errors[2].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"pm.expect(data.errors[2]).to.have.property(\"status\");",
											"pm.expect(data.errors[2].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"pm.expect(data.errors[2]).to.have.property(\"detail\");",
											"pm.expect(data.errors[2].detail).to.equal(\"shippingAddress.lastName => This field is missing.\");",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"pm.expect(data.errors[3]).to.have.property(\"code\");",
											"pm.expect(data.errors[3].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"pm.expect(data.errors[3]).to.have.property(\"status\");",
											"pm.expect(data.errors[3].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"pm.expect(data.errors[3]).to.have.property(\"detail\");",
											"pm.expect(data.errors[3].detail).to.equal(\"shippingAddress.address1 => This field is missing.\");",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"pm.expect(data.errors[4]).to.have.property(\"code\");",
											"pm.expect(data.errors[4].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"pm.expect(data.errors[4]).to.have.property(\"status\");",
											"pm.expect(data.errors[4].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"pm.expect(data.errors[4]).to.have.property(\"detail\");",
											"pm.expect(data.errors[4].detail).to.equal(\"shippingAddress.address2 => This field is missing.\");",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"pm.expect(data.errors[5]).to.have.property(\"code\");",
											"pm.expect(data.errors[5].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"pm.expect(data.errors[5]).to.have.property(\"status\");",
											"pm.expect(data.errors[5].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"pm.expect(data.errors[5]).to.have.property(\"detail\");",
											"pm.expect(data.errors[5].detail).to.equal(\"shippingAddress.zipCode => This field is missing.\");",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"pm.expect(data.errors[6]).to.have.property(\"code\");",
											"pm.expect(data.errors[6].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"pm.expect(data.errors[6]).to.have.property(\"status\");",
											"pm.expect(data.errors[6].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"pm.expect(data.errors[6]).to.have.property(\"detail\");",
											"pm.expect(data.errors[6].detail).to.equal(\"shippingAddress.city => This field is missing.\");",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"pm.expect(data.errors[7]).to.have.property(\"code\");",
											"pm.expect(data.errors[7].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"pm.expect(data.errors[7]).to.have.property(\"status\");",
											"pm.expect(data.errors[7].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"pm.expect(data.errors[7]).to.have.property(\"detail\");",
											"pm.expect(data.errors[7].detail).to.equal(\"shippingAddress.iso2Code => This field is missing.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9,*;q=0.5"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"type": "text",
										"value": "{{unique_anonymous_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\"\n            },\n            \"idCart\": \"{{guest_carts_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {},\n            \"payments\": [\n                {\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\"\n                }\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/checkout",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.1.6 Post checkout data with empty payments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
										"exec": [
											"var data = pm.response.json();",
											"pm.test(\"Response should have a `422` status code\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Response should be an error response\", function () {",
											"    pm.response.to.be.error;",
											"});",
											"",
											"pm.test(\"Response should have an `errors` object\", function () {",
											"    pm.response.to.be.json;",
											"    pm.expect(data).to.have.property(\"errors\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"code\");",
											"    pm.expect(data.errors[0].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"status\");",
											"    pm.expect(data.errors[0].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
											"    pm.expect(data.errors[0].detail).to.equal(\"payments => This value should not be blank.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9,*;q=0.5"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"value": "{{unique_anonymous_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\"\n            },\n            \"idCart\": \"{{guest_carts_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"payments\": [],\n            \"shipment\": {\n                \"shipmentSelection\": 1,\n                \"method\": {\n                    \"carrierName\": \"Spryker Dummy Shipment\",\n                    \"id\": 1,\n                    \"name\": \"Standard\",\n                    \"price\": 490,\n                    \"taxRate\": null,\n                    \"shipmentDeliveryTime\": null\n                }\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/checkout",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.1.7 Post checkout data with empty shipments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
										"exec": [
											"var data = pm.response.json();",
											"pm.test(\"Response should have a `422` status code\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Response should be an error response\", function () {",
											"    pm.response.to.be.error;",
											"});",
											"",
											"pm.test(\"Response should have an `errors` object\", function () {",
											"    pm.response.to.be.json;",
											"    pm.expect(data).to.have.property(\"errors\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"code\");",
											"    pm.expect(data.errors[0].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"status\");",
											"    pm.expect(data.errors[0].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
											"    pm.expect(data.errors[0].detail).to.equal(\"shipment.idShipmentMethod => This field is missing.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9,*;q=0.5"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"type": "text",
										"value": "{{unique_anonymous_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\"\n            },\n            \"idCart\": \"{{guest_carts_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"payments\": [\n                {\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"dummyPayment\"\n                }\n            ],\n            \"shipment\": {}\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/checkout",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.1.8 Post checkout data without billing address",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
										"exec": [
											"var data = pm.response.json();",
											"pm.test(\"Response should have a `422` status code\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Response should be an error response\", function () {",
											"    pm.response.to.be.error;",
											"});",
											"",
											"pm.test(\"Response should have an `errors` object\", function () {",
											"    pm.response.to.be.json;",
											"    pm.expect(data).to.have.property(\"errors\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"code\");",
											"    pm.expect(data.errors[0].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"status\");",
											"    pm.expect(data.errors[0].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
											"    pm.expect(data.errors[0].detail).to.equal(\"billingAddress => This field is missing.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9,*;q=0.5"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"value": "{{unique_anonymous_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\"\n            },\n            \"idCart\": \"{{guest_carts_uuid}}\",\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"payments\": [\n                {\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\"\n                }\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            },\n            \"voucherCode\": \"\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/checkout",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.1.9 Post checkout data without shipping address",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
										"exec": [
											"var data = pm.response.json();",
											"pm.test(\"Response should have a `422` status code\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Response should be an error response\", function () {",
											"    pm.response.to.be.error;",
											"});",
											"",
											"pm.test(\"Response should have an `errors` object\", function () {",
											"    pm.response.to.be.json;",
											"    pm.expect(data).to.have.property(\"errors\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"code\");",
											"    pm.expect(data.errors[0].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"status\");",
											"    pm.expect(data.errors[0].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
											"    pm.expect(data.errors[0].detail).to.equal(\"shippingAddress => This field is missing.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9,*;q=0.5"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"value": "{{unique_anonymous_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\"\n            },\n            \"idCart\": \"{{guest_carts_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"payments\": [\n                {\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"DummyPayment\"\n                }\n            ],\n            \"shipment\": {\n                \"idShipmentMethod\": 1\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/checkout",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.1.10 Post checkout data without payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
										"exec": [
											"var data = pm.response.json();",
											"pm.test(\"Response should have a `422` status code\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Response should be an error response\", function () {",
											"    pm.response.to.be.error;",
											"});",
											"",
											"pm.test(\"Response should have an `errors` object\", function () {",
											"    pm.response.to.be.json;",
											"    pm.expect(data).to.have.property(\"errors\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"code\");",
											"    pm.expect(data.errors[0].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"status\");",
											"    pm.expect(data.errors[0].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
											"    pm.expect(data.errors[0].detail).to.equal(\"payments => This field is missing.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9,*;q=0.5"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"value": "{{unique_anonymous_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\"\n            },\n            \"idCart\": \"{{guest_carts_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shipment\": {\n                \"shipmentSelection\": 1,\n                \"method\": {\n                    \"carrierName\": \"Spryker Dummy Shipment\",\n                    \"id\": 1,\n                    \"name\": \"Standard\",\n                    \"price\": 490,\n                    \"taxRate\": null,\n                    \"shipmentDeliveryTime\": null\n                }\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/checkout",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.1.11 Post checkout data without shipment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
										"exec": [
											"var data = pm.response.json();",
											"pm.test(\"Response should have a `422` status code\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Response should be an error response\", function () {",
											"    pm.response.to.be.error;",
											"});",
											"",
											"pm.test(\"Response should have an `errors` object\", function () {",
											"    pm.response.to.be.json;",
											"    pm.expect(data).to.have.property(\"errors\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error code\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"code\");",
											"    pm.expect(data.errors[0].code).to.equal(\"901\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"status\");",
											"    pm.expect(data.errors[0].status).to.equal(422);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
											"    pm.expect(data.errors[0].detail).to.equal(\"shipment => This field is missing.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9,*;q=0.5"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"type": "text",
										"value": "{{unique_anonymous_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\"\n            },\n            \"idCart\": \"{{guest_carts_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"payments\": [\n                {\n                    \"dummyPaymentInvoice\": {\n                        \"dateOfBirth\": \"08.04.1986\"\n                    },\n                    \"paymentMethodName\": \"invoice\",\n                    \"paymentProviderName\": \"dummyPayment\",\n                    \"paymentSelection\": \"dummyPaymentInvoice\"\n                }\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/checkout",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "1.2.1 Add an item to customer's cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
										"exec": [
											"var data = pm.response.json();",
											"postman.setEnvironmentVariable(\"cart_uuid\", data.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9,*;q=0.5"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"value": "{{unique_anonymous_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"guest-cart-items\",\n        \"attributes\": {\n            \"sku\": \"{{concrete_sku_2}}\",\n            \"quantity\": \"1\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/guest-cart-items",
									"host": [
										"{{url}}"
									],
									"path": [
										"guest-cart-items"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3.2 PATCH checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
										"exec": [
											"var data = pm.response.json();",
											"pm.test(\"Response should have a `404` status code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response should be error response\", function () {",
											"    pm.response.to.be.error;",
											"});",
											"",
											"pm.test(\"Response should have an `errors` object\", function () {",
											"    pm.response.to.be.json;",
											"    pm.expect(data).to.have.property(\"errors\");",
											"});",
											"",
											"pm.test(\"Response should not have an error code\", function () {",
											"    pm.expect(data.errors[0]).not.to.have.property(\"code\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"status\");",
											"    pm.expect(data.errors[0].status).to.equal(404);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
											"    pm.expect(data.errors[0].detail).to.equal(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9,*;q=0.5"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"type": "text",
										"value": "{{unique_anonymous_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"checkout\",\n        \"attributes\": {\n            \"customer\": {\n                \"salutation\": \"Mr\",\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\"\n            },\n            \"idCart\": \"{{guest_cart_uuid}}\",\n            \"billingAddress\": {\n                \"salutation\": 0,\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"shippingAddress\": {\n                \"salutation\": 0,\n                \"email\": \"spencor.hopkin@spryker.com\",\n                \"firstName\": \"spencor\",\n                \"lastName\": \"hopkin\",\n                \"address1\": \"West road\",\n                \"address2\": \"212\",\n                \"address3\": \"\",\n                \"zipCode\": \"61000\",\n                \"city\": \"Berlin\",\n                \"iso2Code\": \"DE\",\n                \"company\": \"Spryker\",\n                \"phone\": \"+380669455897\",\n                \"isDefaultShipping\": true,\n                \"isDefaultBilling\": true\n            },\n            \"payments\": [\n                {\n                    \"dummyPaymentInvoice\": {\n                        \"dateOfBirth\": \"08.04.1986\"\n                    },\n                    \"paymentMethod\": \"invoice\",\n                    \"paymentProvider\": \"dummyPayment\",\n                    \"paymentSelection\": \"dummyPaymentInvoice\",\n                    \"amount\": 42992\n                }\n            ],\n            \"shipment\": {\n                \"shipmentSelection\": 1,\n                \"method\": {\n                    \"carrierName\": \"Spryker Dummy Shipment\",\n                    \"id\": 1,\n                    \"name\": \"Standard\",\n                    \"price\": 490,\n                    \"taxRate\": null,\n                    \"shipmentDeliveryTime\": null\n                }\n            },\n            \"voucherCode\": \"123456qwerty\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/checkout",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3.2 GET checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
										"exec": [
											"var data = pm.response.json();",
											"pm.test(\"Response should have a `404` status code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response should be error response\", function () {",
											"    pm.response.to.be.error;",
											"});",
											"",
											"pm.test(\"Response should have an `errors` object\", function () {",
											"    pm.response.to.be.json;",
											"    pm.expect(data).to.have.property(\"errors\");",
											"});",
											"",
											"pm.test(\"Response should not have an error code\", function () {",
											"    pm.expect(data.errors[0]).not.to.have.property(\"code\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"status\");",
											"    pm.expect(data.errors[0].status).to.equal(404);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
											"    pm.expect(data.errors[0].detail).to.equal(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9,*;q=0.5"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"value": "{{unique_anonymous_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/checkout",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3.2 DELETE checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f6d4590-e2f8-48c9-bebd-7a25a40dd7cc",
										"exec": [
											"var data = pm.response.json();",
											"pm.test(\"Response should have a `404` status code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response should be error response\", function () {",
											"    pm.response.to.be.error;",
											"});",
											"",
											"pm.test(\"Response should have an `errors` object\", function () {",
											"    pm.response.to.be.json;",
											"    pm.expect(data).to.have.property(\"errors\");",
											"});",
											"",
											"pm.test(\"Response should not have an error code\", function () {",
											"    pm.expect(data.errors[0]).not.to.have.property(\"code\");",
											"});",
											"",
											"pm.test(\"Response should have a correct error status\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"status\");",
											"    pm.expect(data.errors[0].status).to.equal(404);",
											"});",
											"",
											"pm.test(\"Response should have a correct error detail\", function () {",
											"    pm.expect(data.errors[0]).to.have.property(\"detail\");",
											"    pm.expect(data.errors[0].detail).to.equal(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Accept-Language",
										"value": "de-DE, en;q=0.9,*;q=0.5"
									},
									{
										"key": "X-Anonymous-Customer-Unique-Id",
										"type": "text",
										"value": "{{unique_anonymous_id}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/checkout",
									"host": [
										"{{url}}"
									],
									"path": [
										"checkout"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "89e03716-1b55-4a20-a1d5-e43d59f1bded",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "9c0738be-d0f0-4d13-be7a-61fe514ce087",
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Response should not have a `500` status code\", function () {",
					"   pm.response.to.not.have.status(500);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"id": "4fdb524c-93d4-4115-92d2-fea7afcf6913",
			"key": "cart_rule_product_sku",
			"value": "012_25904598",
			"type": "string"
		},
		{
			"id": "bcde0139-d1e7-41b8-a922-1fedd325f786",
			"key": "email",
			"value": "ya.test@mail.com",
			"type": "string"
		},
		{
			"id": "65ea97c7-0043-4e8e-a9d9-6ee4ba280ed3",
			"key": "firstName",
			"value": "Max",
			"type": "string"
		},
		{
			"id": "06cef41a-41a1-441b-a95f-0772d24cd3b3",
			"key": "lastName",
			"value": "Maximus",
			"type": "string"
		},
		{
			"id": "713bfb6c-2c30-4efe-936f-6d5db493dcf9",
			"key": "salutation",
			"value": "Mr",
			"type": "string"
		},
		{
			"id": "541223f4-2087-4bc9-a6fb-4b3b7a5b2f43",
			"key": "concrete_sku",
			"value": "009_30692991",
			"type": "string"
		},
		{
			"id": "32875a7a-d1cd-40e0-865b-45f2ed7e1c77",
			"key": "token",
			"value": "",
			"type": "string"
		},
		{
			"id": "44cbb603-d295-4775-8707-b84f6efcc5d2",
			"key": "refresh_token",
			"value": "",
			"type": "string"
		},
		{
			"id": "04759090-9c34-4d82-b2b0-a317c32474c2",
			"key": "customer_address_uuid",
			"value": "",
			"type": "string"
		},
		{
			"id": "26eadec1-af25-4ae0-bdeb-0e73ef282ef2",
			"key": "customer_reference",
			"value": "",
			"type": "string"
		},
		{
			"id": "c2958924-3de6-4d5e-92e5-9aa50620b8ac",
			"key": "guest_carts_uuid",
			"value": "",
			"type": "string"
		},
		{
			"id": "0764df6e-9932-4562-8cbd-33456ec19523",
			"key": "cart_uuid",
			"value": "",
			"type": "string"
		},
		{
			"id": "728a345e-e933-43bf-a1fd-5572571acfe0",
			"key": "concrete_sku_2",
			"value": "009_30692991",
			"type": "string"
		},
		{
			"id": "33aad84d-e3da-40fa-b791-41b6679e66f6",
			"key": "shipmentData",
			"value": "{\"1\":{\"carrierName\":\"Spryker Dummy Shipment\",\"id\":1,\"name\":\"Standard\",\"price\":490,\"taxRate\":null,\"shipmentDeliveryTime\":null},\"2\":{\"carrierName\":\"Spryker Dummy Shipment\",\"id\":2,\"name\":\"Express\",\"price\":590,\"taxRate\":null,\"shipmentDeliveryTime\":null},\"3\":{\"carrierName\":\"Spryker Drone Shipment\",\"id\":3,\"name\":\"Air Standard\",\"price\":500,\"taxRate\":null,\"shipmentDeliveryTime\":null},\"4\":{\"carrierName\":\"Spryker Drone Shipment\",\"id\":4,\"name\":\"Air Sonic\",\"price\":1000,\"taxRate\":null,\"shipmentDeliveryTime\":null},\"5\":{\"carrierName\":\"Spryker Drone Shipment\",\"id\":5,\"name\":\"Air Light\",\"price\":1500,\"taxRate\":null,\"shipmentDeliveryTime\":null}}",
			"type": "string"
		},
		{
			"id": "3f3cf249-aafc-4a61-9959-68ff747a8aa5",
			"key": "secondEmail",
			"value": "second.test@mail.com",
			"type": "string"
		}
	]
}